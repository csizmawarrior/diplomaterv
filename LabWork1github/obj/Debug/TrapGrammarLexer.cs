//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Dana\source\repos\LabWork1github\LabWork1github\G4 files\TrapGrammar.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LabWork1github {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class TrapGrammarLexer : Lexer {
	public const int
		SPAWN=1, TELEPORT_T=2, HEAL=3, DAMAGE=4, RANGE=5, NAME=6, EFFECT_T=7, 
		MOVEROUNDS=8, COLON=9, SEMI=10, COMMA=11, NUMBER=12, ID=13, WS=14;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"SPAWN", "TELEPORT_T", "HEAL", "DAMAGE", "RANGE", "NAME", "EFFECT_T", 
		"MOVEROUNDS", "COLON", "SEMI", "COMMA", "NUMBER", "ID", "WS"
	};


	public TrapGrammarLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'spawn'", "'teleport'", "'heal'", "'damage'", "'range'", "'name'", 
		"'effect'", "'moverounds'", "':'", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SPAWN", "TELEPORT_T", "HEAL", "DAMAGE", "RANGE", "NAME", "EFFECT_T", 
		"MOVEROUNDS", "COLON", "SEMI", "COMMA", "NUMBER", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TrapGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x10m\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x6\r"+
		"_\n\r\r\r\xE\r`\x3\xE\x3\xE\a\xE\x65\n\xE\f\xE\xE\xEh\v\xE\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x2\x2\x2\x10\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2"+
		"\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D"+
		"\x2\x10\x3\x2\x6\x3\x2\x32;\x4\x2\x43\\\x63|\x6\x2\x32;\x43\\\x61\x61"+
		"\x63|\x5\x2\v\f\xF\xF\"\"n\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3"+
		"\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3"+
		"\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2"+
		"\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2"+
		"\x2\x3\x1F\x3\x2\x2\x2\x5%\x3\x2\x2\x2\a.\x3\x2\x2\x2\t\x33\x3\x2\x2\x2"+
		"\v:\x3\x2\x2\x2\r@\x3\x2\x2\x2\xF\x45\x3\x2\x2\x2\x11L\x3\x2\x2\x2\x13"+
		"W\x3\x2\x2\x2\x15Y\x3\x2\x2\x2\x17[\x3\x2\x2\x2\x19^\x3\x2\x2\x2\x1B\x62"+
		"\x3\x2\x2\x2\x1Di\x3\x2\x2\x2\x1F \au\x2\x2 !\ar\x2\x2!\"\a\x63\x2\x2"+
		"\"#\ay\x2\x2#$\ap\x2\x2$\x4\x3\x2\x2\x2%&\av\x2\x2&\'\ag\x2\x2\'(\an\x2"+
		"\x2()\ag\x2\x2)*\ar\x2\x2*+\aq\x2\x2+,\at\x2\x2,-\av\x2\x2-\x6\x3\x2\x2"+
		"\x2./\aj\x2\x2/\x30\ag\x2\x2\x30\x31\a\x63\x2\x2\x31\x32\an\x2\x2\x32"+
		"\b\x3\x2\x2\x2\x33\x34\a\x66\x2\x2\x34\x35\a\x63\x2\x2\x35\x36\ao\x2\x2"+
		"\x36\x37\a\x63\x2\x2\x37\x38\ai\x2\x2\x38\x39\ag\x2\x2\x39\n\x3\x2\x2"+
		"\x2:;\at\x2\x2;<\a\x63\x2\x2<=\ap\x2\x2=>\ai\x2\x2>?\ag\x2\x2?\f\x3\x2"+
		"\x2\x2@\x41\ap\x2\x2\x41\x42\a\x63\x2\x2\x42\x43\ao\x2\x2\x43\x44\ag\x2"+
		"\x2\x44\xE\x3\x2\x2\x2\x45\x46\ag\x2\x2\x46G\ah\x2\x2GH\ah\x2\x2HI\ag"+
		"\x2\x2IJ\a\x65\x2\x2JK\av\x2\x2K\x10\x3\x2\x2\x2LM\ao\x2\x2MN\aq\x2\x2"+
		"NO\ax\x2\x2OP\ag\x2\x2PQ\at\x2\x2QR\aq\x2\x2RS\aw\x2\x2ST\ap\x2\x2TU\a"+
		"\x66\x2\x2UV\au\x2\x2V\x12\x3\x2\x2\x2WX\a<\x2\x2X\x14\x3\x2\x2\x2YZ\a"+
		"=\x2\x2Z\x16\x3\x2\x2\x2[\\\a.\x2\x2\\\x18\x3\x2\x2\x2]_\t\x2\x2\x2^]"+
		"\x3\x2\x2\x2_`\x3\x2\x2\x2`^\x3\x2\x2\x2`\x61\x3\x2\x2\x2\x61\x1A\x3\x2"+
		"\x2\x2\x62\x66\t\x3\x2\x2\x63\x65\t\x4\x2\x2\x64\x63\x3\x2\x2\x2\x65h"+
		"\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2\x66g\x3\x2\x2\x2g\x1C\x3\x2\x2\x2h\x66"+
		"\x3\x2\x2\x2ij\t\x5\x2\x2jk\x3\x2\x2\x2kl\b\xF\x2\x2l\x1E\x3\x2\x2\x2"+
		"\x5\x2`\x66\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LabWork1github
