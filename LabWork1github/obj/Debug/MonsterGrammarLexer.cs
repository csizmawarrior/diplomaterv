//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Dana\source\repos\LabWork1github\LabWork1github\MonsterGrammar.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LabWork1github {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MonsterGrammarLexer : Lexer {
	public const int
		NAME_T=1, RANGE_T=2, MOVEROUNDS_T=3, SHOOTROUNDS_T=4, COLON=5, SEMI=6, 
		COMMA=7, NUMBER=8, ID=9, WS=10;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NAME_T", "RANGE_T", "MOVEROUNDS_T", "SHOOTROUNDS_T", "COLON", "SEMI", 
		"COMMA", "NUMBER", "ID", "WS"
	};


	public MonsterGrammarLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'name'", "'range'", "'moverounds'", "'shootrounds'", "':'", "';'", 
		"','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NAME_T", "RANGE_T", "MOVEROUNDS_T", "SHOOTROUNDS_T", "COLON", "SEMI", 
		"COMMA", "NUMBER", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MonsterGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\fO\b\x1\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x6\t\x41\n\t\r"+
		"\t\xE\t\x42\x3\n\x3\n\a\nG\n\n\f\n\xE\nJ\v\n\x3\v\x3\v\x3\v\x3\v\x2\x2"+
		"\x2\f\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n"+
		"\x13\x2\v\x15\x2\f\x3\x2\x6\x3\x2\x32;\x4\x2\x43\\\x63|\x6\x2\x32;\x43"+
		"\\\x61\x61\x63|\x5\x2\v\f\xF\xF\"\"P\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2"+
		"\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2"+
		"\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2"+
		"\x2\x2\x3\x17\x3\x2\x2\x2\x5\x1C\x3\x2\x2\x2\a\"\x3\x2\x2\x2\t-\x3\x2"+
		"\x2\x2\v\x39\x3\x2\x2\x2\r;\x3\x2\x2\x2\xF=\x3\x2\x2\x2\x11@\x3\x2\x2"+
		"\x2\x13\x44\x3\x2\x2\x2\x15K\x3\x2\x2\x2\x17\x18\ap\x2\x2\x18\x19\a\x63"+
		"\x2\x2\x19\x1A\ao\x2\x2\x1A\x1B\ag\x2\x2\x1B\x4\x3\x2\x2\x2\x1C\x1D\a"+
		"t\x2\x2\x1D\x1E\a\x63\x2\x2\x1E\x1F\ap\x2\x2\x1F \ai\x2\x2 !\ag\x2\x2"+
		"!\x6\x3\x2\x2\x2\"#\ao\x2\x2#$\aq\x2\x2$%\ax\x2\x2%&\ag\x2\x2&\'\at\x2"+
		"\x2\'(\aq\x2\x2()\aw\x2\x2)*\ap\x2\x2*+\a\x66\x2\x2+,\au\x2\x2,\b\x3\x2"+
		"\x2\x2-.\au\x2\x2./\aj\x2\x2/\x30\aq\x2\x2\x30\x31\aq\x2\x2\x31\x32\a"+
		"v\x2\x2\x32\x33\at\x2\x2\x33\x34\aq\x2\x2\x34\x35\aw\x2\x2\x35\x36\ap"+
		"\x2\x2\x36\x37\a\x66\x2\x2\x37\x38\au\x2\x2\x38\n\x3\x2\x2\x2\x39:\a<"+
		"\x2\x2:\f\x3\x2\x2\x2;<\a=\x2\x2<\xE\x3\x2\x2\x2=>\a.\x2\x2>\x10\x3\x2"+
		"\x2\x2?\x41\t\x2\x2\x2@?\x3\x2\x2\x2\x41\x42\x3\x2\x2\x2\x42@\x3\x2\x2"+
		"\x2\x42\x43\x3\x2\x2\x2\x43\x12\x3\x2\x2\x2\x44H\t\x3\x2\x2\x45G\t\x4"+
		"\x2\x2\x46\x45\x3\x2\x2\x2GJ\x3\x2\x2\x2H\x46\x3\x2\x2\x2HI\x3\x2\x2\x2"+
		"I\x14\x3\x2\x2\x2JH\x3\x2\x2\x2KL\t\x5\x2\x2LM\x3\x2\x2\x2MN\b\v\x2\x2"+
		"N\x16\x3\x2\x2\x2\x5\x2\x42H\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LabWork1github
