//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Dana\source\repos\LabWork1github\LabWork1github\DynamicMonster.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LabWork1github {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DynamicMonsterParser : Parser {
	public const int
		DISTANCE=1, DAMAGE=2, DIRECTION=3, NAME_T=4, RANGE_T=5, IN=6, MOVEROUNDS_T=7, 
		SHOOTROUNDS_T=8, PLAYER=9, ROUND=10, ME=11, IF=12, TO=13, WHILE=14, HEALTH=15, 
		ALIVE=16, NUMHOLDER=17, MOVE=18, SHOOT=19, EQUALS=20, EXPRESSIONCONNECTER=21, 
		COMPARE=22, NUMOPERATION=23, PARENTHESISSTART=24, PARENTHESISCLOSE=25, 
		BRACKETCLOSE=26, BRACKETSTART=27, COLON=28, SEMI=29, COMMA=30, NUMBER=31, 
		ID=32, WS=33;
	public const int
		RULE_definition = 0, RULE_name = 1, RULE_statementList = 2, RULE_statement = 3, 
		RULE_nameDeclaration = 4, RULE_rangeDeclaration = 5, RULE_healthDeclaration = 6, 
		RULE_moveDeclaration = 7, RULE_shootDeclaration = 8, RULE_ifexpression = 9, 
		RULE_whileexpression = 10, RULE_damageDeclare = 11, RULE_distanceDeclare = 12, 
		RULE_block = 13, RULE_numberoperations = 14, RULE_character = 15, RULE_booloperation = 16, 
		RULE_boolsconnected = 17, RULE_boolexpression = 18, RULE_place = 19, RULE_x = 20, 
		RULE_y = 21;
	public static readonly string[] ruleNames = {
		"definition", "name", "statementList", "statement", "nameDeclaration", 
		"rangeDeclaration", "healthDeclaration", "moveDeclaration", "shootDeclaration", 
		"ifexpression", "whileexpression", "damageDeclare", "distanceDeclare", 
		"block", "numberoperations", "character", "booloperation", "boolsconnected", 
		"boolexpression", "place", "x", "y"
	};

	private static readonly string[] _LiteralNames = {
		null, "'distance'", "'damage'", null, "'name'", "'range'", "'in'", "'moverounds'", 
		"'shootrounds'", "'player'", "'round'", "'me'", "'if'", "'to'", "'while'", 
		"'HP'", "'alive'", null, "'move'", "'shoot'", "'='", null, null, null, 
		"'('", "')'", "'}'", "'{'", "':'", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DISTANCE", "DAMAGE", "DIRECTION", "NAME_T", "RANGE_T", "IN", "MOVEROUNDS_T", 
		"SHOOTROUNDS_T", "PLAYER", "ROUND", "ME", "IF", "TO", "WHILE", "HEALTH", 
		"ALIVE", "NUMHOLDER", "MOVE", "SHOOT", "EQUALS", "EXPRESSIONCONNECTER", 
		"COMPARE", "NUMOPERATION", "PARENTHESISSTART", "PARENTHESISCLOSE", "BRACKETCLOSE", 
		"BRACKETSTART", "COLON", "SEMI", "COMMA", "NUMBER", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DynamicMonster.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public DynamicMonsterParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DefinitionContext : ParserRuleContext {
		public StatementListContext[] statementList() {
			return GetRuleContexts<StatementListContext>();
		}
		public StatementListContext statementList(int i) {
			return GetRuleContext<StatementListContext>(i);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NAME_T) {
				{
				{
				State = 44; statementList();
				}
				}
				State = 49;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(DynamicMonsterParser.ID, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public NameDeclarationContext nameDeclaration() {
			return GetRuleContext<NameDeclarationContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; nameDeclaration();
			State = 56;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RANGE_T) | (1L << IF) | (1L << WHILE) | (1L << HEALTH) | (1L << MOVE) | (1L << SHOOT))) != 0)) {
				{
				{
				State = 53; statement();
				}
				}
				State = 58;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public HealthDeclarationContext healthDeclaration() {
			return GetRuleContext<HealthDeclarationContext>(0);
		}
		public RangeDeclarationContext rangeDeclaration() {
			return GetRuleContext<RangeDeclarationContext>(0);
		}
		public MoveDeclarationContext moveDeclaration() {
			return GetRuleContext<MoveDeclarationContext>(0);
		}
		public ShootDeclarationContext shootDeclaration() {
			return GetRuleContext<ShootDeclarationContext>(0);
		}
		public IfexpressionContext ifexpression() {
			return GetRuleContext<IfexpressionContext>(0);
		}
		public WhileexpressionContext whileexpression() {
			return GetRuleContext<WhileexpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 65;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case HEALTH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 59; healthDeclaration();
				}
				break;
			case RANGE_T:
				EnterOuterAlt(_localctx, 2);
				{
				State = 60; rangeDeclaration();
				}
				break;
			case MOVE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 61; moveDeclaration();
				}
				break;
			case SHOOT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 62; shootDeclaration();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 5);
				{
				State = 63; ifexpression();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 64; whileexpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameDeclarationContext : ParserRuleContext {
		public ITerminalNode NAME_T() { return GetToken(DynamicMonsterParser.NAME_T, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicMonsterParser.EQUALS, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NameDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterNameDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitNameDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameDeclarationContext nameDeclaration() {
		NameDeclarationContext _localctx = new NameDeclarationContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_nameDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; Match(NAME_T);
			State = 68; Match(EQUALS);
			State = 69; name();
			State = 70; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeDeclarationContext : ParserRuleContext {
		public ITerminalNode RANGE_T() { return GetToken(DynamicMonsterParser.RANGE_T, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicMonsterParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicMonsterParser.NUMBER, 0); }
		public RangeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterRangeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitRangeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeDeclarationContext rangeDeclaration() {
		RangeDeclarationContext _localctx = new RangeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_rangeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(RANGE_T);
			State = 73; Match(EQUALS);
			State = 74; Match(NUMBER);
			State = 75; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HealthDeclarationContext : ParserRuleContext {
		public ITerminalNode HEALTH() { return GetToken(DynamicMonsterParser.HEALTH, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicMonsterParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicMonsterParser.NUMBER, 0); }
		public HealthDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_healthDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterHealthDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitHealthDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHealthDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HealthDeclarationContext healthDeclaration() {
		HealthDeclarationContext _localctx = new HealthDeclarationContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_healthDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(HEALTH);
			State = 78; Match(EQUALS);
			State = 79; Match(NUMBER);
			State = 80; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveDeclarationContext : ParserRuleContext {
		public ITerminalNode MOVE() { return GetToken(DynamicMonsterParser.MOVE, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DynamicMonsterParser.DIRECTION, 0); }
		public ITerminalNode TO() { return GetToken(DynamicMonsterParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(DynamicMonsterParser.COLON, 0); }
		public DistanceDeclareContext distanceDeclare() {
			return GetRuleContext<DistanceDeclareContext>(0);
		}
		public ITerminalNode PLAYER() { return GetToken(DynamicMonsterParser.PLAYER, 0); }
		public MoveDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterMoveDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitMoveDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoveDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveDeclarationContext moveDeclaration() {
		MoveDeclarationContext _localctx = new MoveDeclarationContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_moveDeclaration);
		try {
			State = 94;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 82; Match(MOVE);
				State = 83; Match(DIRECTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84; Match(MOVE);
				State = 85; Match(TO);
				State = 86; place();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 87; Match(MOVE);
				State = 88; Match(DIRECTION);
				State = 89; Match(COLON);
				State = 90; distanceDeclare();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 91; Match(MOVE);
				State = 92; Match(TO);
				State = 93; Match(PLAYER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShootDeclarationContext : ParserRuleContext {
		public ITerminalNode SHOOT() { return GetToken(DynamicMonsterParser.SHOOT, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DynamicMonsterParser.DIRECTION, 0); }
		public ITerminalNode TO() { return GetToken(DynamicMonsterParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public ITerminalNode[] COLON() { return GetTokens(DynamicMonsterParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(DynamicMonsterParser.COLON, i);
		}
		public DistanceDeclareContext distanceDeclare() {
			return GetRuleContext<DistanceDeclareContext>(0);
		}
		public DamageDeclareContext damageDeclare() {
			return GetRuleContext<DamageDeclareContext>(0);
		}
		public ITerminalNode PLAYER() { return GetToken(DynamicMonsterParser.PLAYER, 0); }
		public ShootDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shootDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterShootDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitShootDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShootDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShootDeclarationContext shootDeclaration() {
		ShootDeclarationContext _localctx = new ShootDeclarationContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_shootDeclaration);
		try {
			State = 123;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96; Match(SHOOT);
				State = 97; Match(DIRECTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 98; Match(SHOOT);
				State = 99; Match(TO);
				State = 100; place();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 101; Match(SHOOT);
				State = 102; Match(DIRECTION);
				State = 103; Match(COLON);
				State = 104; distanceDeclare();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 105; Match(SHOOT);
				State = 106; Match(COLON);
				State = 107; damageDeclare();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 108; Match(SHOOT);
				State = 109; Match(TO);
				State = 110; Match(PLAYER);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 111; Match(SHOOT);
				State = 112; Match(DIRECTION);
				State = 113; Match(COLON);
				State = 114; distanceDeclare();
				State = 115; Match(COLON);
				State = 116; damageDeclare();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 118; Match(SHOOT);
				State = 119; place();
				State = 120; Match(COLON);
				State = 121; damageDeclare();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfexpressionContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(DynamicMonsterParser.IF, 0); }
		public BoolexpressionContext boolexpression() {
			return GetRuleContext<BoolexpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterIfexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitIfexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfexpressionContext ifexpression() {
		IfexpressionContext _localctx = new IfexpressionContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_ifexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; Match(IF);
			State = 126; boolexpression();
			State = 127; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileexpressionContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(DynamicMonsterParser.WHILE, 0); }
		public BoolexpressionContext boolexpression() {
			return GetRuleContext<BoolexpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterWhileexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitWhileexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileexpressionContext whileexpression() {
		WhileexpressionContext _localctx = new WhileexpressionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_whileexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; Match(WHILE);
			State = 130; boolexpression();
			State = 131; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DamageDeclareContext : ParserRuleContext {
		public ITerminalNode DAMAGE() { return GetToken(DynamicMonsterParser.DAMAGE, 0); }
		public ITerminalNode COLON() { return GetToken(DynamicMonsterParser.COLON, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicMonsterParser.NUMBER, 0); }
		public DamageDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_damageDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterDamageDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitDamageDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDamageDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DamageDeclareContext damageDeclare() {
		DamageDeclareContext _localctx = new DamageDeclareContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_damageDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(DAMAGE);
			State = 134; Match(COLON);
			State = 135; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistanceDeclareContext : ParserRuleContext {
		public ITerminalNode DISTANCE() { return GetToken(DynamicMonsterParser.DISTANCE, 0); }
		public ITerminalNode COLON() { return GetToken(DynamicMonsterParser.COLON, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicMonsterParser.NUMBER, 0); }
		public DistanceDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distanceDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterDistanceDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitDistanceDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDistanceDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DistanceDeclareContext distanceDeclare() {
		DistanceDeclareContext _localctx = new DistanceDeclareContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_distanceDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; Match(DISTANCE);
			State = 138; Match(COLON);
			State = 139; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode[] BRACKETCLOSE() { return GetTokens(DynamicMonsterParser.BRACKETCLOSE); }
		public ITerminalNode BRACKETCLOSE(int i) {
			return GetToken(DynamicMonsterParser.BRACKETCLOSE, i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(BRACKETCLOSE);
			State = 145;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RANGE_T) | (1L << IF) | (1L << WHILE) | (1L << HEALTH) | (1L << MOVE) | (1L << SHOOT))) != 0)) {
				{
				{
				State = 142; statement();
				}
				}
				State = 147;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 148; Match(BRACKETCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberoperationsContext : ParserRuleContext {
		public ITerminalNode[] NUMHOLDER() { return GetTokens(DynamicMonsterParser.NUMHOLDER); }
		public ITerminalNode NUMHOLDER(int i) {
			return GetToken(DynamicMonsterParser.NUMHOLDER, i);
		}
		public ITerminalNode NUMOPERATION() { return GetToken(DynamicMonsterParser.NUMOPERATION, 0); }
		public NumberoperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberoperations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterNumberoperations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitNumberoperations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberoperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberoperationsContext numberoperations() {
		NumberoperationsContext _localctx = new NumberoperationsContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_numberoperations);
		try {
			State = 154;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 150; Match(NUMHOLDER);
				State = 151; Match(NUMOPERATION);
				State = 152; Match(NUMHOLDER);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 153; Match(NUMHOLDER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterContext : ParserRuleContext {
		public ITerminalNode PLAYER() { return GetToken(DynamicMonsterParser.PLAYER, 0); }
		public ITerminalNode ME() { return GetToken(DynamicMonsterParser.ME, 0); }
		public CharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterCharacter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitCharacter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterContext character() {
		CharacterContext _localctx = new CharacterContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_character);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			_la = _input.La(1);
			if ( !(_la==PLAYER || _la==ME) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooloperationContext : ParserRuleContext {
		public ITerminalNode COMPARE() { return GetToken(DynamicMonsterParser.COMPARE, 0); }
		public NumberoperationsContext[] numberoperations() {
			return GetRuleContexts<NumberoperationsContext>();
		}
		public NumberoperationsContext numberoperations(int i) {
			return GetRuleContext<NumberoperationsContext>(i);
		}
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public ITerminalNode ALIVE() { return GetToken(DynamicMonsterParser.ALIVE, 0); }
		public ITerminalNode PLAYER() { return GetToken(DynamicMonsterParser.PLAYER, 0); }
		public ITerminalNode IN() { return GetToken(DynamicMonsterParser.IN, 0); }
		public ITerminalNode RANGE_T() { return GetToken(DynamicMonsterParser.RANGE_T, 0); }
		public BooloperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booloperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterBooloperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitBooloperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooloperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooloperationContext booloperation() {
		BooloperationContext _localctx = new BooloperationContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_booloperation);
		int _la;
		try {
			State = 177;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 161;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NUMHOLDER) {
					{
					{
					State = 158; numberoperations();
					}
					}
					State = 163;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 164; Match(COMPARE);
				State = 168;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NUMHOLDER) {
					{
					{
					State = 165; numberoperations();
					}
					}
					State = 170;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 171; character();
				State = 172; Match(ALIVE);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 174; Match(PLAYER);
				State = 175; Match(IN);
				State = 176; Match(RANGE_T);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolsconnectedContext : ParserRuleContext {
		public BooloperationContext[] booloperation() {
			return GetRuleContexts<BooloperationContext>();
		}
		public BooloperationContext booloperation(int i) {
			return GetRuleContext<BooloperationContext>(i);
		}
		public ITerminalNode EXPRESSIONCONNECTER() { return GetToken(DynamicMonsterParser.EXPRESSIONCONNECTER, 0); }
		public BoolsconnectedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolsconnected; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterBoolsconnected(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitBoolsconnected(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolsconnected(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolsconnectedContext boolsconnected() {
		BoolsconnectedContext _localctx = new BoolsconnectedContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_boolsconnected);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; booloperation();
			State = 180; Match(EXPRESSIONCONNECTER);
			State = 181; booloperation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolexpressionContext : ParserRuleContext {
		public ITerminalNode PARENTHESISSTART() { return GetToken(DynamicMonsterParser.PARENTHESISSTART, 0); }
		public BoolsconnectedContext boolsconnected() {
			return GetRuleContext<BoolsconnectedContext>(0);
		}
		public ITerminalNode PARENTHESISCLOSE() { return GetToken(DynamicMonsterParser.PARENTHESISCLOSE, 0); }
		public BoolexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterBoolexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitBoolexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolexpressionContext boolexpression() {
		BoolexpressionContext _localctx = new BoolexpressionContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_boolexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; Match(PARENTHESISSTART);
			State = 184; boolsconnected();
			State = 185; Match(PARENTHESISCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceContext : ParserRuleContext {
		public XContext x() {
			return GetRuleContext<XContext>(0);
		}
		public YContext y() {
			return GetRuleContext<YContext>(0);
		}
		public PlaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_place; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterPlace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitPlace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceContext place() {
		PlaceContext _localctx = new PlaceContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_place);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; x();
			State = 188; Match(COMMA);
			State = 189; y();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(DynamicMonsterParser.NUMBER, 0); }
		public XContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_x; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterX(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitX(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitX(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XContext x() {
		XContext _localctx = new XContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_x);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(DynamicMonsterParser.NUMBER, 0); }
		public YContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_y; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitY(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitY(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YContext y() {
		YContext _localctx = new YContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_y);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3#\xC6\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x3\x2\a\x2\x30\n\x2\f\x2\xE\x2\x33\v\x2\x3"+
		"\x3\x3\x3\x3\x4\x3\x4\a\x4\x39\n\x4\f\x4\xE\x4<\v\x4\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x5\x5\x44\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x61\n\t\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n~\n\n\x3\v\x3\v\x3\v\x3\v"+
		"\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF"+
		"\x3\xF\a\xF\x92\n\xF\f\xF\xE\xF\x95\v\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x5\x10\x9D\n\x10\x3\x11\x3\x11\x3\x12\a\x12\xA2\n\x12\f\x12"+
		"\xE\x12\xA5\v\x12\x3\x12\x3\x12\a\x12\xA9\n\x12\f\x12\xE\x12\xAC\v\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\xB4\n\x12\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x2\x2\x2\x18\x2\x2\x4\x2\x6\x2"+
		"\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2"+
		"\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2\x2\x3\x4\x2\v\v\r\r\xC5\x2\x31\x3"+
		"\x2\x2\x2\x4\x34\x3\x2\x2\x2\x6\x36\x3\x2\x2\x2\b\x43\x3\x2\x2\x2\n\x45"+
		"\x3\x2\x2\x2\fJ\x3\x2\x2\x2\xEO\x3\x2\x2\x2\x10`\x3\x2\x2\x2\x12}\x3\x2"+
		"\x2\x2\x14\x7F\x3\x2\x2\x2\x16\x83\x3\x2\x2\x2\x18\x87\x3\x2\x2\x2\x1A"+
		"\x8B\x3\x2\x2\x2\x1C\x8F\x3\x2\x2\x2\x1E\x9C\x3\x2\x2\x2 \x9E\x3\x2\x2"+
		"\x2\"\xB3\x3\x2\x2\x2$\xB5\x3\x2\x2\x2&\xB9\x3\x2\x2\x2(\xBD\x3\x2\x2"+
		"\x2*\xC1\x3\x2\x2\x2,\xC3\x3\x2\x2\x2.\x30\x5\x6\x4\x2/.\x3\x2\x2\x2\x30"+
		"\x33\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\x3\x3\x2\x2"+
		"\x2\x33\x31\x3\x2\x2\x2\x34\x35\a\"\x2\x2\x35\x5\x3\x2\x2\x2\x36:\x5\n"+
		"\x6\x2\x37\x39\x5\b\x5\x2\x38\x37\x3\x2\x2\x2\x39<\x3\x2\x2\x2:\x38\x3"+
		"\x2\x2\x2:;\x3\x2\x2\x2;\a\x3\x2\x2\x2<:\x3\x2\x2\x2=\x44\x5\xE\b\x2>"+
		"\x44\x5\f\a\x2?\x44\x5\x10\t\x2@\x44\x5\x12\n\x2\x41\x44\x5\x14\v\x2\x42"+
		"\x44\x5\x16\f\x2\x43=\x3\x2\x2\x2\x43>\x3\x2\x2\x2\x43?\x3\x2\x2\x2\x43"+
		"@\x3\x2\x2\x2\x43\x41\x3\x2\x2\x2\x43\x42\x3\x2\x2\x2\x44\t\x3\x2\x2\x2"+
		"\x45\x46\a\x6\x2\x2\x46G\a\x16\x2\x2GH\x5\x4\x3\x2HI\a\x1F\x2\x2I\v\x3"+
		"\x2\x2\x2JK\a\a\x2\x2KL\a\x16\x2\x2LM\a!\x2\x2MN\a\x1F\x2\x2N\r\x3\x2"+
		"\x2\x2OP\a\x11\x2\x2PQ\a\x16\x2\x2QR\a!\x2\x2RS\a\x1F\x2\x2S\xF\x3\x2"+
		"\x2\x2TU\a\x14\x2\x2U\x61\a\x5\x2\x2VW\a\x14\x2\x2WX\a\xF\x2\x2X\x61\x5"+
		"(\x15\x2YZ\a\x14\x2\x2Z[\a\x5\x2\x2[\\\a\x1E\x2\x2\\\x61\x5\x1A\xE\x2"+
		"]^\a\x14\x2\x2^_\a\xF\x2\x2_\x61\a\v\x2\x2`T\x3\x2\x2\x2`V\x3\x2\x2\x2"+
		"`Y\x3\x2\x2\x2`]\x3\x2\x2\x2\x61\x11\x3\x2\x2\x2\x62\x63\a\x15\x2\x2\x63"+
		"~\a\x5\x2\x2\x64\x65\a\x15\x2\x2\x65\x66\a\xF\x2\x2\x66~\x5(\x15\x2gh"+
		"\a\x15\x2\x2hi\a\x5\x2\x2ij\a\x1E\x2\x2j~\x5\x1A\xE\x2kl\a\x15\x2\x2l"+
		"m\a\x1E\x2\x2m~\x5\x18\r\x2no\a\x15\x2\x2op\a\xF\x2\x2p~\a\v\x2\x2qr\a"+
		"\x15\x2\x2rs\a\x5\x2\x2st\a\x1E\x2\x2tu\x5\x1A\xE\x2uv\a\x1E\x2\x2vw\x5"+
		"\x18\r\x2w~\x3\x2\x2\x2xy\a\x15\x2\x2yz\x5(\x15\x2z{\a\x1E\x2\x2{|\x5"+
		"\x18\r\x2|~\x3\x2\x2\x2}\x62\x3\x2\x2\x2}\x64\x3\x2\x2\x2}g\x3\x2\x2\x2"+
		"}k\x3\x2\x2\x2}n\x3\x2\x2\x2}q\x3\x2\x2\x2}x\x3\x2\x2\x2~\x13\x3\x2\x2"+
		"\x2\x7F\x80\a\xE\x2\x2\x80\x81\x5&\x14\x2\x81\x82\x5\x1C\xF\x2\x82\x15"+
		"\x3\x2\x2\x2\x83\x84\a\x10\x2\x2\x84\x85\x5&\x14\x2\x85\x86\x5\x1C\xF"+
		"\x2\x86\x17\x3\x2\x2\x2\x87\x88\a\x4\x2\x2\x88\x89\a\x1E\x2\x2\x89\x8A"+
		"\a!\x2\x2\x8A\x19\x3\x2\x2\x2\x8B\x8C\a\x3\x2\x2\x8C\x8D\a\x1E\x2\x2\x8D"+
		"\x8E\a!\x2\x2\x8E\x1B\x3\x2\x2\x2\x8F\x93\a\x1C\x2\x2\x90\x92\x5\b\x5"+
		"\x2\x91\x90\x3\x2\x2\x2\x92\x95\x3\x2\x2\x2\x93\x91\x3\x2\x2\x2\x93\x94"+
		"\x3\x2\x2\x2\x94\x96\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2\x96\x97\a\x1C\x2"+
		"\x2\x97\x1D\x3\x2\x2\x2\x98\x99\a\x13\x2\x2\x99\x9A\a\x19\x2\x2\x9A\x9D"+
		"\a\x13\x2\x2\x9B\x9D\a\x13\x2\x2\x9C\x98\x3\x2\x2\x2\x9C\x9B\x3\x2\x2"+
		"\x2\x9D\x1F\x3\x2\x2\x2\x9E\x9F\t\x2\x2\x2\x9F!\x3\x2\x2\x2\xA0\xA2\x5"+
		"\x1E\x10\x2\xA1\xA0\x3\x2\x2\x2\xA2\xA5\x3\x2\x2\x2\xA3\xA1\x3\x2\x2\x2"+
		"\xA3\xA4\x3\x2\x2\x2\xA4\xA6\x3\x2\x2\x2\xA5\xA3\x3\x2\x2\x2\xA6\xAA\a"+
		"\x18\x2\x2\xA7\xA9\x5\x1E\x10\x2\xA8\xA7\x3\x2\x2\x2\xA9\xAC\x3\x2\x2"+
		"\x2\xAA\xA8\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\xB4\x3\x2\x2\x2\xAC\xAA"+
		"\x3\x2\x2\x2\xAD\xAE\x5 \x11\x2\xAE\xAF\a\x12\x2\x2\xAF\xB4\x3\x2\x2\x2"+
		"\xB0\xB1\a\v\x2\x2\xB1\xB2\a\b\x2\x2\xB2\xB4\a\a\x2\x2\xB3\xA3\x3\x2\x2"+
		"\x2\xB3\xAD\x3\x2\x2\x2\xB3\xB0\x3\x2\x2\x2\xB4#\x3\x2\x2\x2\xB5\xB6\x5"+
		"\"\x12\x2\xB6\xB7\a\x17\x2\x2\xB7\xB8\x5\"\x12\x2\xB8%\x3\x2\x2\x2\xB9"+
		"\xBA\a\x1A\x2\x2\xBA\xBB\x5$\x13\x2\xBB\xBC\a\x1B\x2\x2\xBC\'\x3\x2\x2"+
		"\x2\xBD\xBE\x5*\x16\x2\xBE\xBF\a \x2\x2\xBF\xC0\x5,\x17\x2\xC0)\x3\x2"+
		"\x2\x2\xC1\xC2\a!\x2\x2\xC2+\x3\x2\x2\x2\xC3\xC4\a!\x2\x2\xC4-\x3\x2\x2"+
		"\x2\f\x31:\x43`}\x93\x9C\xA3\xAA\xB3";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LabWork1github
