//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Dana\source\repos\LabWork1github\LabWork1github\DynamicMonster.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LabWork1github {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DynamicMonsterParser : Parser {
	public const int
		RANDOM=1, DISTANCE=2, DAMAGE=3, DIRECTION=4, NAME_T=5, IN=6, TRAP=7, PLAYER=8, 
		PLACE_T=9, ROUND=10, NEAR=11, IS=12, ME=13, IF=14, TO=15, WHILE=16, HEALTH=17, 
		ALIVE=18, MOVE=19, SHOOT=20, EQUALS=21, ABSOLUTE=22, NEGATE=23, BOOLCONNECTER=24, 
		COMPARE=25, NUMCONNECTER=26, PARENTHESISSTART=27, PARENTHESISCLOSE=28, 
		BRACKETCLOSE=29, BRACKETSTART=30, COLON=31, SEMI=32, COMMA=33, ATTRIBUTE=34, 
		NUMBER=35, ID=36, WS=37, MONSTER=38, X=39, Y=40;
	public const int
		RULE_definition = 0, RULE_name = 1, RULE_statementList = 2, RULE_statement = 3, 
		RULE_nameDeclaration = 4, RULE_healthDeclaration = 5, RULE_damageDeclaration = 6, 
		RULE_distanceDeclare = 7, RULE_moveDeclaration = 8, RULE_shootDeclaration = 9, 
		RULE_ifexpression = 10, RULE_whileexpression = 11, RULE_block = 12, RULE_conditionexpression = 13, 
		RULE_character = 14, RULE_possibleAttributes = 15, RULE_characterAttribute = 16, 
		RULE_place = 17, RULE_x = 18, RULE_y = 19, RULE_expression = 20, RULE_something = 21, 
		RULE_operation = 22;
	public static readonly string[] ruleNames = {
		"definition", "name", "statementList", "statement", "nameDeclaration", 
		"healthDeclaration", "damageDeclaration", "distanceDeclare", "moveDeclaration", 
		"shootDeclaration", "ifexpression", "whileexpression", "block", "conditionexpression", 
		"character", "possibleAttributes", "characterAttribute", "place", "x", 
		"y", "expression", "something", "operation"
	};

	private static readonly string[] _LiteralNames = {
		null, "'random'", "'distance'", "'damage'", null, "'name'", "'in'", "'trap'", 
		"'player'", "'place'", "'round'", "'near'", "'is'", "'me'", "'if'", "'to'", 
		"'while'", "'HP'", "'alive'", "'move'", "'shoot'", "'='", "'|'", "'!'", 
		null, null, null, "'('", "')'", "'}'", "'{'", "':'", "';'", "','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "RANDOM", "DISTANCE", "DAMAGE", "DIRECTION", "NAME_T", "IN", "TRAP", 
		"PLAYER", "PLACE_T", "ROUND", "NEAR", "IS", "ME", "IF", "TO", "WHILE", 
		"HEALTH", "ALIVE", "MOVE", "SHOOT", "EQUALS", "ABSOLUTE", "NEGATE", "BOOLCONNECTER", 
		"COMPARE", "NUMCONNECTER", "PARENTHESISSTART", "PARENTHESISCLOSE", "BRACKETCLOSE", 
		"BRACKETSTART", "COLON", "SEMI", "COMMA", "ATTRIBUTE", "NUMBER", "ID", 
		"WS", "MONSTER", "X", "Y"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DynamicMonster.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public DynamicMonsterParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DefinitionContext : ParserRuleContext {
		public StatementListContext[] statementList() {
			return GetRuleContexts<StatementListContext>();
		}
		public StatementListContext statementList(int i) {
			return GetRuleContext<StatementListContext>(i);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NAME_T) {
				{
				{
				State = 46; statementList();
				}
				}
				State = 51;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(DynamicMonsterParser.ID, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public NameDeclarationContext nameDeclaration() {
			return GetRuleContext<NameDeclarationContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; nameDeclaration();
			State = 58;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DAMAGE) | (1L << IF) | (1L << WHILE) | (1L << HEALTH) | (1L << MOVE) | (1L << SHOOT))) != 0)) {
				{
				{
				State = 55; statement();
				}
				}
				State = 60;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public HealthDeclarationContext healthDeclaration() {
			return GetRuleContext<HealthDeclarationContext>(0);
		}
		public DamageDeclarationContext damageDeclaration() {
			return GetRuleContext<DamageDeclarationContext>(0);
		}
		public MoveDeclarationContext moveDeclaration() {
			return GetRuleContext<MoveDeclarationContext>(0);
		}
		public ShootDeclarationContext shootDeclaration() {
			return GetRuleContext<ShootDeclarationContext>(0);
		}
		public IfexpressionContext ifexpression() {
			return GetRuleContext<IfexpressionContext>(0);
		}
		public WhileexpressionContext whileexpression() {
			return GetRuleContext<WhileexpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 79;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case HEALTH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 61; healthDeclaration();
				State = 62; Match(SEMI);
				}
				break;
			case DAMAGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 64; damageDeclaration();
				State = 65; Match(SEMI);
				}
				break;
			case MOVE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 67; moveDeclaration();
				State = 68; Match(SEMI);
				}
				break;
			case SHOOT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 70; shootDeclaration();
				State = 71; Match(SEMI);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 5);
				{
				State = 73; ifexpression();
				State = 74; Match(SEMI);
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 76; whileexpression();
				State = 77; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameDeclarationContext : ParserRuleContext {
		public ITerminalNode NAME_T() { return GetToken(DynamicMonsterParser.NAME_T, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicMonsterParser.EQUALS, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NameDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterNameDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitNameDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameDeclarationContext nameDeclaration() {
		NameDeclarationContext _localctx = new NameDeclarationContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_nameDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(NAME_T);
			State = 82; Match(EQUALS);
			State = 83; name();
			State = 84; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HealthDeclarationContext : ParserRuleContext {
		public ITerminalNode HEALTH() { return GetToken(DynamicMonsterParser.HEALTH, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicMonsterParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicMonsterParser.NUMBER, 0); }
		public HealthDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_healthDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterHealthDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitHealthDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHealthDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HealthDeclarationContext healthDeclaration() {
		HealthDeclarationContext _localctx = new HealthDeclarationContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_healthDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; Match(HEALTH);
			State = 87; Match(EQUALS);
			State = 88; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DamageDeclarationContext : ParserRuleContext {
		public ITerminalNode DAMAGE() { return GetToken(DynamicMonsterParser.DAMAGE, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicMonsterParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicMonsterParser.NUMBER, 0); }
		public DamageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_damageDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterDamageDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitDamageDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDamageDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DamageDeclarationContext damageDeclaration() {
		DamageDeclarationContext _localctx = new DamageDeclarationContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_damageDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; Match(DAMAGE);
			State = 91; Match(EQUALS);
			State = 92; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistanceDeclareContext : ParserRuleContext {
		public ITerminalNode DISTANCE() { return GetToken(DynamicMonsterParser.DISTANCE, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicMonsterParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicMonsterParser.NUMBER, 0); }
		public DistanceDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distanceDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterDistanceDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitDistanceDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDistanceDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DistanceDeclareContext distanceDeclare() {
		DistanceDeclareContext _localctx = new DistanceDeclareContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_distanceDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(DISTANCE);
			State = 95; Match(EQUALS);
			State = 96; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveDeclarationContext : ParserRuleContext {
		public ITerminalNode MOVE() { return GetToken(DynamicMonsterParser.MOVE, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DynamicMonsterParser.DIRECTION, 0); }
		public ITerminalNode TO() { return GetToken(DynamicMonsterParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public DistanceDeclareContext distanceDeclare() {
			return GetRuleContext<DistanceDeclareContext>(0);
		}
		public ITerminalNode PLAYER() { return GetToken(DynamicMonsterParser.PLAYER, 0); }
		public ITerminalNode RANDOM() { return GetToken(DynamicMonsterParser.RANDOM, 0); }
		public MoveDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterMoveDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitMoveDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoveDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveDeclarationContext moveDeclaration() {
		MoveDeclarationContext _localctx = new MoveDeclarationContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_moveDeclaration);
		try {
			State = 112;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 98; Match(MOVE);
				State = 99; Match(DIRECTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 100; Match(MOVE);
				State = 101; Match(TO);
				State = 102; place();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 103; Match(MOVE);
				State = 104; Match(DIRECTION);
				State = 105; distanceDeclare();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 106; Match(MOVE);
				State = 107; Match(TO);
				State = 108; Match(PLAYER);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 109; Match(MOVE);
				State = 110; Match(TO);
				State = 111; Match(RANDOM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShootDeclarationContext : ParserRuleContext {
		public ITerminalNode SHOOT() { return GetToken(DynamicMonsterParser.SHOOT, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DynamicMonsterParser.DIRECTION, 0); }
		public ITerminalNode TO() { return GetToken(DynamicMonsterParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public DistanceDeclareContext distanceDeclare() {
			return GetRuleContext<DistanceDeclareContext>(0);
		}
		public DamageDeclarationContext damageDeclaration() {
			return GetRuleContext<DamageDeclarationContext>(0);
		}
		public ITerminalNode RANDOM() { return GetToken(DynamicMonsterParser.RANDOM, 0); }
		public ITerminalNode PLAYER() { return GetToken(DynamicMonsterParser.PLAYER, 0); }
		public ShootDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shootDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterShootDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitShootDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShootDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShootDeclarationContext shootDeclaration() {
		ShootDeclarationContext _localctx = new ShootDeclarationContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_shootDeclaration);
		try {
			State = 144;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 114; Match(SHOOT);
				State = 115; Match(DIRECTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116; Match(SHOOT);
				State = 117; Match(TO);
				State = 118; place();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 119; Match(SHOOT);
				State = 120; Match(DIRECTION);
				State = 121; distanceDeclare();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 122; Match(SHOOT);
				State = 123; Match(DIRECTION);
				State = 124; damageDeclaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 125; Match(SHOOT);
				State = 126; Match(RANDOM);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 127; Match(SHOOT);
				State = 128; Match(TO);
				State = 129; Match(PLAYER);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 130; Match(SHOOT);
				State = 131; Match(TO);
				State = 132; Match(PLAYER);
				State = 133; damageDeclaration();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 134; Match(SHOOT);
				State = 135; Match(DIRECTION);
				State = 136; distanceDeclare();
				State = 137; damageDeclaration();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 139; Match(SHOOT);
				State = 140; Match(TO);
				State = 141; place();
				State = 142; damageDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfexpressionContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(DynamicMonsterParser.IF, 0); }
		public ITerminalNode PARENTHESISSTART() { return GetToken(DynamicMonsterParser.PARENTHESISSTART, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PARENTHESISCLOSE() { return GetToken(DynamicMonsterParser.PARENTHESISCLOSE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterIfexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitIfexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfexpressionContext ifexpression() {
		IfexpressionContext _localctx = new IfexpressionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_ifexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(IF);
			State = 147; Match(PARENTHESISSTART);
			State = 148; expression(0);
			State = 149; Match(PARENTHESISCLOSE);
			State = 150; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileexpressionContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(DynamicMonsterParser.WHILE, 0); }
		public ITerminalNode PARENTHESISSTART() { return GetToken(DynamicMonsterParser.PARENTHESISSTART, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PARENTHESISCLOSE() { return GetToken(DynamicMonsterParser.PARENTHESISCLOSE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterWhileexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitWhileexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileexpressionContext whileexpression() {
		WhileexpressionContext _localctx = new WhileexpressionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_whileexpression);
		try {
			State = 164;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 152; Match(WHILE);
				State = 153; Match(PARENTHESISSTART);
				State = 154; expression(0);
				State = 155; Match(PARENTHESISCLOSE);
				State = 156; block();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158; Match(WHILE);
				State = 159; Match(PARENTHESISSTART);
				State = 160; expression(0);
				State = 161; Match(PARENTHESISCLOSE);
				State = 162; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode[] BRACKETCLOSE() { return GetTokens(DynamicMonsterParser.BRACKETCLOSE); }
		public ITerminalNode BRACKETCLOSE(int i) {
			return GetToken(DynamicMonsterParser.BRACKETCLOSE, i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; Match(BRACKETCLOSE);
			State = 170;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DAMAGE) | (1L << IF) | (1L << WHILE) | (1L << HEALTH) | (1L << MOVE) | (1L << SHOOT))) != 0)) {
				{
				{
				State = 167; statement();
				}
				}
				State = 172;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 173; Match(BRACKETCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionexpressionContext : ParserRuleContext {
		public ITerminalNode PARENTHESISSTART() { return GetToken(DynamicMonsterParser.PARENTHESISSTART, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PARENTHESISCLOSE() { return GetToken(DynamicMonsterParser.PARENTHESISCLOSE, 0); }
		public ConditionexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterConditionexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitConditionexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionexpressionContext conditionexpression() {
		ConditionexpressionContext _localctx = new ConditionexpressionContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_conditionexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; Match(PARENTHESISSTART);
			State = 176; expression(0);
			State = 177; Match(PARENTHESISCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterContext : ParserRuleContext {
		public ITerminalNode PLAYER() { return GetToken(DynamicMonsterParser.PLAYER, 0); }
		public ITerminalNode ME() { return GetToken(DynamicMonsterParser.ME, 0); }
		public ITerminalNode TRAP() { return GetToken(DynamicMonsterParser.TRAP, 0); }
		public ITerminalNode MONSTER() { return GetToken(DynamicMonsterParser.MONSTER, 0); }
		public CharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterCharacter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitCharacter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterContext character() {
		CharacterContext _localctx = new CharacterContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_character);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRAP) | (1L << PLAYER) | (1L << ME) | (1L << MONSTER))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PossibleAttributesContext : ParserRuleContext {
		public ITerminalNode HEALTH() { return GetToken(DynamicMonsterParser.HEALTH, 0); }
		public ITerminalNode PLACE_T() { return GetToken(DynamicMonsterParser.PLACE_T, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(DynamicMonsterParser.ATTRIBUTE, 0); }
		public ITerminalNode X() { return GetToken(DynamicMonsterParser.X, 0); }
		public ITerminalNode Y() { return GetToken(DynamicMonsterParser.Y, 0); }
		public ITerminalNode DAMAGE() { return GetToken(DynamicMonsterParser.DAMAGE, 0); }
		public PossibleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_possibleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterPossibleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitPossibleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPossibleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PossibleAttributesContext possibleAttributes() {
		PossibleAttributesContext _localctx = new PossibleAttributesContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_possibleAttributes);
		try {
			State = 189;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 181; Match(HEALTH);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 182; Match(PLACE_T);
				State = 183; Match(ATTRIBUTE);
				State = 184; Match(X);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 185; Match(PLACE_T);
				State = 186; Match(ATTRIBUTE);
				State = 187; Match(Y);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 188; Match(DAMAGE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterAttributeContext : ParserRuleContext {
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public ITerminalNode ATTRIBUTE() { return GetToken(DynamicMonsterParser.ATTRIBUTE, 0); }
		public PossibleAttributesContext possibleAttributes() {
			return GetRuleContext<PossibleAttributesContext>(0);
		}
		public CharacterAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characterAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterCharacterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitCharacterAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacterAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterAttributeContext characterAttribute() {
		CharacterAttributeContext _localctx = new CharacterAttributeContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_characterAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; character();
			State = 192; Match(ATTRIBUTE);
			State = 193; possibleAttributes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceContext : ParserRuleContext {
		public XContext x() {
			return GetRuleContext<XContext>(0);
		}
		public YContext y() {
			return GetRuleContext<YContext>(0);
		}
		public PlaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_place; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterPlace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitPlace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceContext place() {
		PlaceContext _localctx = new PlaceContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_place);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; x();
			State = 196; Match(COMMA);
			State = 197; y();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(DynamicMonsterParser.NUMBER, 0); }
		public XContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_x; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterX(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitX(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitX(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XContext x() {
		XContext _localctx = new XContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_x);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(DynamicMonsterParser.NUMBER, 0); }
		public YContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_y; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitY(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitY(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YContext y() {
		YContext _localctx = new YContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_y);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public ITerminalNode PARENTHESISSTART() { return GetToken(DynamicMonsterParser.PARENTHESISSTART, 0); }
		public ITerminalNode PARENTHESISCLOSE() { return GetToken(DynamicMonsterParser.PARENTHESISCLOSE, 0); }
		public ITerminalNode[] ABSOLUTE() { return GetTokens(DynamicMonsterParser.ABSOLUTE); }
		public ITerminalNode ABSOLUTE(int i) {
			return GetToken(DynamicMonsterParser.ABSOLUTE, i);
		}
		public SomethingContext something() {
			return GetRuleContext<SomethingContext>(0);
		}
		public ITerminalNode NEGATE() { return GetToken(DynamicMonsterParser.NEGATE, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case PARENTHESISSTART:
				{
				State = 204; Match(PARENTHESISSTART);
				State = 205; expression(0);
				State = 206; Match(PARENTHESISCLOSE);
				}
				break;
			case ABSOLUTE:
				{
				State = 208; Match(ABSOLUTE);
				State = 209; expression(0);
				State = 210; Match(ABSOLUTE);
				}
				break;
			case DAMAGE:
			case TRAP:
			case PLAYER:
			case PLACE_T:
			case ROUND:
			case ME:
			case HEALTH:
			case NUMBER:
			case MONSTER:
				{
				State = 212; something();
				}
				break;
			case NEGATE:
				{
				State = 213; Match(NEGATE);
				State = 214; expression(1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 223;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 217;
					if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
					State = 218; operation();
					State = 219; expression(6);
					}
					} 
				}
				State = 225;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SomethingContext : ParserRuleContext {
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public ITerminalNode NUMBER() { return GetToken(DynamicMonsterParser.NUMBER, 0); }
		public ITerminalNode ROUND() { return GetToken(DynamicMonsterParser.ROUND, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public PossibleAttributesContext possibleAttributes() {
			return GetRuleContext<PossibleAttributesContext>(0);
		}
		public SomethingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_something; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterSomething(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitSomething(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSomething(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SomethingContext something() {
		SomethingContext _localctx = new SomethingContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_something);
		try {
			State = 231;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 226; character();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 227; Match(NUMBER);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 228; Match(ROUND);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 229; place();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 230; possibleAttributes();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public ITerminalNode ATTRIBUTE() { return GetToken(DynamicMonsterParser.ATTRIBUTE, 0); }
		public ITerminalNode NUMCONNECTER() { return GetToken(DynamicMonsterParser.NUMCONNECTER, 0); }
		public ITerminalNode BOOLCONNECTER() { return GetToken(DynamicMonsterParser.BOOLCONNECTER, 0); }
		public ITerminalNode COMPARE() { return GetToken(DynamicMonsterParser.COMPARE, 0); }
		public ITerminalNode ALIVE() { return GetToken(DynamicMonsterParser.ALIVE, 0); }
		public ITerminalNode IS() { return GetToken(DynamicMonsterParser.IS, 0); }
		public ITerminalNode NEAR() { return GetToken(DynamicMonsterParser.NEAR, 0); }
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_operation);
		try {
			State = 240;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ATTRIBUTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 233; Match(ATTRIBUTE);
				}
				break;
			case NUMCONNECTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 234; Match(NUMCONNECTER);
				}
				break;
			case BOOLCONNECTER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 235; Match(BOOLCONNECTER);
				}
				break;
			case COMPARE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 236; Match(COMPARE);
				}
				break;
			case ALIVE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 237; Match(ALIVE);
				}
				break;
			case IS:
				EnterOuterAlt(_localctx, 6);
				{
				State = 238; Match(IS);
				State = 239; Match(NEAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 20: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3*\xF5\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x3\x2\a\x2\x32\n\x2\f\x2\xE\x2"+
		"\x35\v\x2\x3\x3\x3\x3\x3\x4\x3\x4\a\x4;\n\x4\f\x4\xE\x4>\v\x4\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5R\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\n\x3"+
		"\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\ns\n"+
		"\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x5\v\x93\n\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r"+
		"\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\xA7\n\r\x3\xE\x3\xE"+
		"\a\xE\xAB\n\xE\f\xE\xE\xE\xAE\v\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x5\x11\xC0\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\xDA\n\x16\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\a\x16\xE0\n\x16\f\x16\xE\x16\xE3\v\x16\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\x5\x17\xEA\n\x17\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x5\x18\xF3\n\x18\x3\x18\x2\x2\x3*\x19\x2\x2\x4\x2"+
		"\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2"+
		"\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x2\x3\x5\x2\t\n\xF\xF"+
		"((\x102\x2\x33\x3\x2\x2\x2\x4\x36\x3\x2\x2\x2\x6\x38\x3\x2\x2\x2\bQ\x3"+
		"\x2\x2\x2\nS\x3\x2\x2\x2\fX\x3\x2\x2\x2\xE\\\x3\x2\x2\x2\x10`\x3\x2\x2"+
		"\x2\x12r\x3\x2\x2\x2\x14\x92\x3\x2\x2\x2\x16\x94\x3\x2\x2\x2\x18\xA6\x3"+
		"\x2\x2\x2\x1A\xA8\x3\x2\x2\x2\x1C\xB1\x3\x2\x2\x2\x1E\xB5\x3\x2\x2\x2"+
		" \xBF\x3\x2\x2\x2\"\xC1\x3\x2\x2\x2$\xC5\x3\x2\x2\x2&\xC9\x3\x2\x2\x2"+
		"(\xCB\x3\x2\x2\x2*\xD9\x3\x2\x2\x2,\xE9\x3\x2\x2\x2.\xF2\x3\x2\x2\x2\x30"+
		"\x32\x5\x6\x4\x2\x31\x30\x3\x2\x2\x2\x32\x35\x3\x2\x2\x2\x33\x31\x3\x2"+
		"\x2\x2\x33\x34\x3\x2\x2\x2\x34\x3\x3\x2\x2\x2\x35\x33\x3\x2\x2\x2\x36"+
		"\x37\a&\x2\x2\x37\x5\x3\x2\x2\x2\x38<\x5\n\x6\x2\x39;\x5\b\x5\x2:\x39"+
		"\x3\x2\x2\x2;>\x3\x2\x2\x2<:\x3\x2\x2\x2<=\x3\x2\x2\x2=\a\x3\x2\x2\x2"+
		"><\x3\x2\x2\x2?@\x5\f\a\x2@\x41\a\"\x2\x2\x41R\x3\x2\x2\x2\x42\x43\x5"+
		"\xE\b\x2\x43\x44\a\"\x2\x2\x44R\x3\x2\x2\x2\x45\x46\x5\x12\n\x2\x46G\a"+
		"\"\x2\x2GR\x3\x2\x2\x2HI\x5\x14\v\x2IJ\a\"\x2\x2JR\x3\x2\x2\x2KL\x5\x16"+
		"\f\x2LM\a\"\x2\x2MR\x3\x2\x2\x2NO\x5\x18\r\x2OP\a\"\x2\x2PR\x3\x2\x2\x2"+
		"Q?\x3\x2\x2\x2Q\x42\x3\x2\x2\x2Q\x45\x3\x2\x2\x2QH\x3\x2\x2\x2QK\x3\x2"+
		"\x2\x2QN\x3\x2\x2\x2R\t\x3\x2\x2\x2ST\a\a\x2\x2TU\a\x17\x2\x2UV\x5\x4"+
		"\x3\x2VW\a\"\x2\x2W\v\x3\x2\x2\x2XY\a\x13\x2\x2YZ\a\x17\x2\x2Z[\a%\x2"+
		"\x2[\r\x3\x2\x2\x2\\]\a\x5\x2\x2]^\a\x17\x2\x2^_\a%\x2\x2_\xF\x3\x2\x2"+
		"\x2`\x61\a\x4\x2\x2\x61\x62\a\x17\x2\x2\x62\x63\a%\x2\x2\x63\x11\x3\x2"+
		"\x2\x2\x64\x65\a\x15\x2\x2\x65s\a\x6\x2\x2\x66g\a\x15\x2\x2gh\a\x11\x2"+
		"\x2hs\x5$\x13\x2ij\a\x15\x2\x2jk\a\x6\x2\x2ks\x5\x10\t\x2lm\a\x15\x2\x2"+
		"mn\a\x11\x2\x2ns\a\n\x2\x2op\a\x15\x2\x2pq\a\x11\x2\x2qs\a\x3\x2\x2r\x64"+
		"\x3\x2\x2\x2r\x66\x3\x2\x2\x2ri\x3\x2\x2\x2rl\x3\x2\x2\x2ro\x3\x2\x2\x2"+
		"s\x13\x3\x2\x2\x2tu\a\x16\x2\x2u\x93\a\x6\x2\x2vw\a\x16\x2\x2wx\a\x11"+
		"\x2\x2x\x93\x5$\x13\x2yz\a\x16\x2\x2z{\a\x6\x2\x2{\x93\x5\x10\t\x2|}\a"+
		"\x16\x2\x2}~\a\x6\x2\x2~\x93\x5\xE\b\x2\x7F\x80\a\x16\x2\x2\x80\x93\a"+
		"\x3\x2\x2\x81\x82\a\x16\x2\x2\x82\x83\a\x11\x2\x2\x83\x93\a\n\x2\x2\x84"+
		"\x85\a\x16\x2\x2\x85\x86\a\x11\x2\x2\x86\x87\a\n\x2\x2\x87\x93\x5\xE\b"+
		"\x2\x88\x89\a\x16\x2\x2\x89\x8A\a\x6\x2\x2\x8A\x8B\x5\x10\t\x2\x8B\x8C"+
		"\x5\xE\b\x2\x8C\x93\x3\x2\x2\x2\x8D\x8E\a\x16\x2\x2\x8E\x8F\a\x11\x2\x2"+
		"\x8F\x90\x5$\x13\x2\x90\x91\x5\xE\b\x2\x91\x93\x3\x2\x2\x2\x92t\x3\x2"+
		"\x2\x2\x92v\x3\x2\x2\x2\x92y\x3\x2\x2\x2\x92|\x3\x2\x2\x2\x92\x7F\x3\x2"+
		"\x2\x2\x92\x81\x3\x2\x2\x2\x92\x84\x3\x2\x2\x2\x92\x88\x3\x2\x2\x2\x92"+
		"\x8D\x3\x2\x2\x2\x93\x15\x3\x2\x2\x2\x94\x95\a\x10\x2\x2\x95\x96\a\x1D"+
		"\x2\x2\x96\x97\x5*\x16\x2\x97\x98\a\x1E\x2\x2\x98\x99\x5\x1A\xE\x2\x99"+
		"\x17\x3\x2\x2\x2\x9A\x9B\a\x12\x2\x2\x9B\x9C\a\x1D\x2\x2\x9C\x9D\x5*\x16"+
		"\x2\x9D\x9E\a\x1E\x2\x2\x9E\x9F\x5\x1A\xE\x2\x9F\xA7\x3\x2\x2\x2\xA0\xA1"+
		"\a\x12\x2\x2\xA1\xA2\a\x1D\x2\x2\xA2\xA3\x5*\x16\x2\xA3\xA4\a\x1E\x2\x2"+
		"\xA4\xA5\x5\b\x5\x2\xA5\xA7\x3\x2\x2\x2\xA6\x9A\x3\x2\x2\x2\xA6\xA0\x3"+
		"\x2\x2\x2\xA7\x19\x3\x2\x2\x2\xA8\xAC\a\x1F\x2\x2\xA9\xAB\x5\b\x5\x2\xAA"+
		"\xA9\x3\x2\x2\x2\xAB\xAE\x3\x2\x2\x2\xAC\xAA\x3\x2\x2\x2\xAC\xAD\x3\x2"+
		"\x2\x2\xAD\xAF\x3\x2\x2\x2\xAE\xAC\x3\x2\x2\x2\xAF\xB0\a\x1F\x2\x2\xB0"+
		"\x1B\x3\x2\x2\x2\xB1\xB2\a\x1D\x2\x2\xB2\xB3\x5*\x16\x2\xB3\xB4\a\x1E"+
		"\x2\x2\xB4\x1D\x3\x2\x2\x2\xB5\xB6\t\x2\x2\x2\xB6\x1F\x3\x2\x2\x2\xB7"+
		"\xC0\a\x13\x2\x2\xB8\xB9\a\v\x2\x2\xB9\xBA\a$\x2\x2\xBA\xC0\a)\x2\x2\xBB"+
		"\xBC\a\v\x2\x2\xBC\xBD\a$\x2\x2\xBD\xC0\a*\x2\x2\xBE\xC0\a\x5\x2\x2\xBF"+
		"\xB7\x3\x2\x2\x2\xBF\xB8\x3\x2\x2\x2\xBF\xBB\x3\x2\x2\x2\xBF\xBE\x3\x2"+
		"\x2\x2\xC0!\x3\x2\x2\x2\xC1\xC2\x5\x1E\x10\x2\xC2\xC3\a$\x2\x2\xC3\xC4"+
		"\x5 \x11\x2\xC4#\x3\x2\x2\x2\xC5\xC6\x5&\x14\x2\xC6\xC7\a#\x2\x2\xC7\xC8"+
		"\x5(\x15\x2\xC8%\x3\x2\x2\x2\xC9\xCA\a%\x2\x2\xCA\'\x3\x2\x2\x2\xCB\xCC"+
		"\a%\x2\x2\xCC)\x3\x2\x2\x2\xCD\xCE\b\x16\x1\x2\xCE\xCF\a\x1D\x2\x2\xCF"+
		"\xD0\x5*\x16\x2\xD0\xD1\a\x1E\x2\x2\xD1\xDA\x3\x2\x2\x2\xD2\xD3\a\x18"+
		"\x2\x2\xD3\xD4\x5*\x16\x2\xD4\xD5\a\x18\x2\x2\xD5\xDA\x3\x2\x2\x2\xD6"+
		"\xDA\x5,\x17\x2\xD7\xD8\a\x19\x2\x2\xD8\xDA\x5*\x16\x3\xD9\xCD\x3\x2\x2"+
		"\x2\xD9\xD2\x3\x2\x2\x2\xD9\xD6\x3\x2\x2\x2\xD9\xD7\x3\x2\x2\x2\xDA\xE1"+
		"\x3\x2\x2\x2\xDB\xDC\f\a\x2\x2\xDC\xDD\x5.\x18\x2\xDD\xDE\x5*\x16\b\xDE"+
		"\xE0\x3\x2\x2\x2\xDF\xDB\x3\x2\x2\x2\xE0\xE3\x3\x2\x2\x2\xE1\xDF\x3\x2"+
		"\x2\x2\xE1\xE2\x3\x2\x2\x2\xE2+\x3\x2\x2\x2\xE3\xE1\x3\x2\x2\x2\xE4\xEA"+
		"\x5\x1E\x10\x2\xE5\xEA\a%\x2\x2\xE6\xEA\a\f\x2\x2\xE7\xEA\x5$\x13\x2\xE8"+
		"\xEA\x5 \x11\x2\xE9\xE4\x3\x2\x2\x2\xE9\xE5\x3\x2\x2\x2\xE9\xE6\x3\x2"+
		"\x2\x2\xE9\xE7\x3\x2\x2\x2\xE9\xE8\x3\x2\x2\x2\xEA-\x3\x2\x2\x2\xEB\xF3"+
		"\a$\x2\x2\xEC\xF3\a\x1C\x2\x2\xED\xF3\a\x1A\x2\x2\xEE\xF3\a\x1B\x2\x2"+
		"\xEF\xF3\a\x14\x2\x2\xF0\xF1\a\xE\x2\x2\xF1\xF3\a\r\x2\x2\xF2\xEB\x3\x2"+
		"\x2\x2\xF2\xEC\x3\x2\x2\x2\xF2\xED\x3\x2\x2\x2\xF2\xEE\x3\x2\x2\x2\xF2"+
		"\xEF\x3\x2\x2\x2\xF2\xF0\x3\x2\x2\x2\xF3/\x3\x2\x2\x2\xE\x33<Qr\x92\xA6"+
		"\xAC\xBF\xD9\xE1\xE9\xF2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LabWork1github
