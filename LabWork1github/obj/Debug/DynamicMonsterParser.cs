//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Dana\source\repos\LabWork1github\LabWork1github\DynamicMonster.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LabWork1github {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DynamicMonsterParser : Parser {
	public const int
		RANDOM=1, DISTANCE=2, DAMAGE=3, DIRECTION=4, NAME_T=5, IN=6, TRAP=7, PLAYER=8, 
		PLACE_T=9, ROUND=10, NEAR=11, IS=12, ME=13, IF=14, TO=15, WHILE=16, HEALTH=17, 
		ALIVE=18, MOVE=19, SHOOT=20, EQUALS=21, ABSOLUTE=22, EXPRESSIONCONNECTER=23, 
		COMPARE=24, NUMOPERATION=25, PARENTHESISSTART=26, PARENTHESISCLOSE=27, 
		BRACKETCLOSE=28, BRACKETSTART=29, COLON=30, SEMI=31, COMMA=32, ATTRIBUTE=33, 
		NUMBER=34, ID=35, WS=36, MONSTER=37, X=38, Y=39;
	public const int
		RULE_definition = 0, RULE_name = 1, RULE_statementList = 2, RULE_statement = 3, 
		RULE_insideBlock = 4, RULE_nameDeclaration = 5, RULE_healthDeclaration = 6, 
		RULE_damageDeclaration = 7, RULE_distanceDeclare = 8, RULE_moveDeclaration = 9, 
		RULE_shootDeclaration = 10, RULE_ifexpression = 11, RULE_whileexpression = 12, 
		RULE_block = 13, RULE_numholder = 14, RULE_secondnumparam = 15, RULE_numberoperations = 16, 
		RULE_booloperation = 17, RULE_secondbooloperation = 18, RULE_boolsconnected = 19, 
		RULE_boolexpression = 20, RULE_character = 21, RULE_possibleAttributes = 22, 
		RULE_characterAttribute = 23, RULE_place = 24, RULE_x = 25, RULE_y = 26;
	public static readonly string[] ruleNames = {
		"definition", "name", "statementList", "statement", "insideBlock", "nameDeclaration", 
		"healthDeclaration", "damageDeclaration", "distanceDeclare", "moveDeclaration", 
		"shootDeclaration", "ifexpression", "whileexpression", "block", "numholder", 
		"secondnumparam", "numberoperations", "booloperation", "secondbooloperation", 
		"boolsconnected", "boolexpression", "character", "possibleAttributes", 
		"characterAttribute", "place", "x", "y"
	};

	private static readonly string[] _LiteralNames = {
		null, "'random'", "'distance'", "'damage'", null, "'name'", "'in'", "'trap'", 
		"'player'", "'place'", "'round'", "'near'", "'is'", "'me'", "'if'", "'to'", 
		"'while'", "'HP'", "'alive'", "'move'", "'shoot'", "'='", "'|'", null, 
		null, null, "'('", "')'", "'}'", "'{'", "':'", "';'", "','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "RANDOM", "DISTANCE", "DAMAGE", "DIRECTION", "NAME_T", "IN", "TRAP", 
		"PLAYER", "PLACE_T", "ROUND", "NEAR", "IS", "ME", "IF", "TO", "WHILE", 
		"HEALTH", "ALIVE", "MOVE", "SHOOT", "EQUALS", "ABSOLUTE", "EXPRESSIONCONNECTER", 
		"COMPARE", "NUMOPERATION", "PARENTHESISSTART", "PARENTHESISCLOSE", "BRACKETCLOSE", 
		"BRACKETSTART", "COLON", "SEMI", "COMMA", "ATTRIBUTE", "NUMBER", "ID", 
		"WS", "MONSTER", "X", "Y"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DynamicMonster.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public DynamicMonsterParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DefinitionContext : ParserRuleContext {
		public StatementListContext[] statementList() {
			return GetRuleContexts<StatementListContext>();
		}
		public StatementListContext statementList(int i) {
			return GetRuleContext<StatementListContext>(i);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NAME_T) {
				{
				{
				State = 54; statementList();
				}
				}
				State = 59;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(DynamicMonsterParser.ID, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public NameDeclarationContext nameDeclaration() {
			return GetRuleContext<NameDeclarationContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; nameDeclaration();
			State = 66;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DAMAGE) | (1L << IF) | (1L << WHILE) | (1L << HEALTH) | (1L << MOVE) | (1L << SHOOT))) != 0)) {
				{
				{
				State = 63; statement();
				}
				}
				State = 68;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public HealthDeclarationContext healthDeclaration() {
			return GetRuleContext<HealthDeclarationContext>(0);
		}
		public DamageDeclarationContext damageDeclaration() {
			return GetRuleContext<DamageDeclarationContext>(0);
		}
		public MoveDeclarationContext moveDeclaration() {
			return GetRuleContext<MoveDeclarationContext>(0);
		}
		public ShootDeclarationContext shootDeclaration() {
			return GetRuleContext<ShootDeclarationContext>(0);
		}
		public IfexpressionContext ifexpression() {
			return GetRuleContext<IfexpressionContext>(0);
		}
		public WhileexpressionContext whileexpression() {
			return GetRuleContext<WhileexpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 87;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case HEALTH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 69; healthDeclaration();
				State = 70; Match(SEMI);
				}
				break;
			case DAMAGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72; damageDeclaration();
				State = 73; Match(SEMI);
				}
				break;
			case MOVE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 75; moveDeclaration();
				State = 76; Match(SEMI);
				}
				break;
			case SHOOT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 78; shootDeclaration();
				State = 79; Match(SEMI);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 5);
				{
				State = 81; ifexpression();
				State = 82; Match(SEMI);
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 84; whileexpression();
				State = 85; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsideBlockContext : ParserRuleContext {
		public HealthDeclarationContext healthDeclaration() {
			return GetRuleContext<HealthDeclarationContext>(0);
		}
		public DamageDeclarationContext damageDeclaration() {
			return GetRuleContext<DamageDeclarationContext>(0);
		}
		public MoveDeclarationContext moveDeclaration() {
			return GetRuleContext<MoveDeclarationContext>(0);
		}
		public ShootDeclarationContext shootDeclaration() {
			return GetRuleContext<ShootDeclarationContext>(0);
		}
		public InsideBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insideBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterInsideBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitInsideBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsideBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsideBlockContext insideBlock() {
		InsideBlockContext _localctx = new InsideBlockContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_insideBlock);
		try {
			State = 101;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case HEALTH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 89; healthDeclaration();
				State = 90; Match(SEMI);
				}
				break;
			case DAMAGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 92; damageDeclaration();
				State = 93; Match(SEMI);
				}
				break;
			case MOVE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 95; moveDeclaration();
				State = 96; Match(SEMI);
				}
				break;
			case SHOOT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 98; shootDeclaration();
				State = 99; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameDeclarationContext : ParserRuleContext {
		public ITerminalNode NAME_T() { return GetToken(DynamicMonsterParser.NAME_T, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicMonsterParser.EQUALS, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NameDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterNameDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitNameDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameDeclarationContext nameDeclaration() {
		NameDeclarationContext _localctx = new NameDeclarationContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_nameDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(NAME_T);
			State = 104; Match(EQUALS);
			State = 105; name();
			State = 106; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HealthDeclarationContext : ParserRuleContext {
		public ITerminalNode HEALTH() { return GetToken(DynamicMonsterParser.HEALTH, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicMonsterParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicMonsterParser.NUMBER, 0); }
		public HealthDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_healthDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterHealthDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitHealthDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHealthDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HealthDeclarationContext healthDeclaration() {
		HealthDeclarationContext _localctx = new HealthDeclarationContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_healthDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(HEALTH);
			State = 109; Match(EQUALS);
			State = 110; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DamageDeclarationContext : ParserRuleContext {
		public ITerminalNode DAMAGE() { return GetToken(DynamicMonsterParser.DAMAGE, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicMonsterParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicMonsterParser.NUMBER, 0); }
		public DamageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_damageDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterDamageDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitDamageDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDamageDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DamageDeclarationContext damageDeclaration() {
		DamageDeclarationContext _localctx = new DamageDeclarationContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_damageDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(DAMAGE);
			State = 113; Match(EQUALS);
			State = 114; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistanceDeclareContext : ParserRuleContext {
		public ITerminalNode DISTANCE() { return GetToken(DynamicMonsterParser.DISTANCE, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicMonsterParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicMonsterParser.NUMBER, 0); }
		public DistanceDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distanceDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterDistanceDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitDistanceDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDistanceDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DistanceDeclareContext distanceDeclare() {
		DistanceDeclareContext _localctx = new DistanceDeclareContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_distanceDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(DISTANCE);
			State = 117; Match(EQUALS);
			State = 118; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveDeclarationContext : ParserRuleContext {
		public ITerminalNode MOVE() { return GetToken(DynamicMonsterParser.MOVE, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DynamicMonsterParser.DIRECTION, 0); }
		public ITerminalNode TO() { return GetToken(DynamicMonsterParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public DistanceDeclareContext distanceDeclare() {
			return GetRuleContext<DistanceDeclareContext>(0);
		}
		public ITerminalNode PLAYER() { return GetToken(DynamicMonsterParser.PLAYER, 0); }
		public ITerminalNode RANDOM() { return GetToken(DynamicMonsterParser.RANDOM, 0); }
		public MoveDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterMoveDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitMoveDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoveDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveDeclarationContext moveDeclaration() {
		MoveDeclarationContext _localctx = new MoveDeclarationContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_moveDeclaration);
		try {
			State = 134;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 120; Match(MOVE);
				State = 121; Match(DIRECTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122; Match(MOVE);
				State = 123; Match(TO);
				State = 124; place();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 125; Match(MOVE);
				State = 126; Match(DIRECTION);
				State = 127; distanceDeclare();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 128; Match(MOVE);
				State = 129; Match(TO);
				State = 130; Match(PLAYER);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 131; Match(MOVE);
				State = 132; Match(TO);
				State = 133; Match(RANDOM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShootDeclarationContext : ParserRuleContext {
		public ITerminalNode SHOOT() { return GetToken(DynamicMonsterParser.SHOOT, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DynamicMonsterParser.DIRECTION, 0); }
		public ITerminalNode TO() { return GetToken(DynamicMonsterParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public DistanceDeclareContext distanceDeclare() {
			return GetRuleContext<DistanceDeclareContext>(0);
		}
		public DamageDeclarationContext damageDeclaration() {
			return GetRuleContext<DamageDeclarationContext>(0);
		}
		public ITerminalNode RANDOM() { return GetToken(DynamicMonsterParser.RANDOM, 0); }
		public ITerminalNode PLAYER() { return GetToken(DynamicMonsterParser.PLAYER, 0); }
		public ShootDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shootDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterShootDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitShootDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShootDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShootDeclarationContext shootDeclaration() {
		ShootDeclarationContext _localctx = new ShootDeclarationContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_shootDeclaration);
		try {
			State = 166;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136; Match(SHOOT);
				State = 137; Match(DIRECTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 138; Match(SHOOT);
				State = 139; Match(TO);
				State = 140; place();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 141; Match(SHOOT);
				State = 142; Match(DIRECTION);
				State = 143; distanceDeclare();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 144; Match(SHOOT);
				State = 145; Match(DIRECTION);
				State = 146; damageDeclaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 147; Match(SHOOT);
				State = 148; Match(RANDOM);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 149; Match(SHOOT);
				State = 150; Match(TO);
				State = 151; Match(PLAYER);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 152; Match(SHOOT);
				State = 153; Match(TO);
				State = 154; Match(PLAYER);
				State = 155; damageDeclaration();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 156; Match(SHOOT);
				State = 157; Match(DIRECTION);
				State = 158; distanceDeclare();
				State = 159; damageDeclaration();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 161; Match(SHOOT);
				State = 162; Match(TO);
				State = 163; place();
				State = 164; damageDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfexpressionContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(DynamicMonsterParser.IF, 0); }
		public BoolexpressionContext boolexpression() {
			return GetRuleContext<BoolexpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterIfexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitIfexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfexpressionContext ifexpression() {
		IfexpressionContext _localctx = new IfexpressionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_ifexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; Match(IF);
			State = 169; boolexpression();
			State = 170; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileexpressionContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(DynamicMonsterParser.WHILE, 0); }
		public BoolexpressionContext boolexpression() {
			return GetRuleContext<BoolexpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterWhileexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitWhileexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileexpressionContext whileexpression() {
		WhileexpressionContext _localctx = new WhileexpressionContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_whileexpression);
		try {
			State = 180;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 172; Match(WHILE);
				State = 173; boolexpression();
				State = 174; block();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 176; Match(WHILE);
				State = 177; boolexpression();
				State = 178; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode[] BRACKETCLOSE() { return GetTokens(DynamicMonsterParser.BRACKETCLOSE); }
		public ITerminalNode BRACKETCLOSE(int i) {
			return GetToken(DynamicMonsterParser.BRACKETCLOSE, i);
		}
		public InsideBlockContext[] insideBlock() {
			return GetRuleContexts<InsideBlockContext>();
		}
		public InsideBlockContext insideBlock(int i) {
			return GetRuleContext<InsideBlockContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; Match(BRACKETCLOSE);
			State = 186;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DAMAGE) | (1L << HEALTH) | (1L << MOVE) | (1L << SHOOT))) != 0)) {
				{
				{
				State = 183; insideBlock();
				}
				}
				State = 188;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 189; Match(BRACKETCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumholderContext : ParserRuleContext {
		public ITerminalNode ROUND() { return GetToken(DynamicMonsterParser.ROUND, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicMonsterParser.NUMBER, 0); }
		public CharacterAttributeContext characterAttribute() {
			return GetRuleContext<CharacterAttributeContext>(0);
		}
		public ITerminalNode[] ABSOLUTE() { return GetTokens(DynamicMonsterParser.ABSOLUTE); }
		public ITerminalNode ABSOLUTE(int i) {
			return GetToken(DynamicMonsterParser.ABSOLUTE, i);
		}
		public NumholderContext numholder() {
			return GetRuleContext<NumholderContext>(0);
		}
		public NumholderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numholder; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterNumholder(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitNumholder(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumholder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumholderContext numholder() {
		NumholderContext _localctx = new NumholderContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_numholder);
		try {
			State = 198;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ROUND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 191; Match(ROUND);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 192; Match(NUMBER);
				}
				break;
			case TRAP:
			case PLAYER:
			case ME:
			case MONSTER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 193; characterAttribute();
				}
				break;
			case ABSOLUTE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 194; Match(ABSOLUTE);
				State = 195; numholder();
				State = 196; Match(ABSOLUTE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SecondnumparamContext : ParserRuleContext {
		public ITerminalNode NUMOPERATION() { return GetToken(DynamicMonsterParser.NUMOPERATION, 0); }
		public NumholderContext numholder() {
			return GetRuleContext<NumholderContext>(0);
		}
		public SecondnumparamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondnumparam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterSecondnumparam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitSecondnumparam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecondnumparam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SecondnumparamContext secondnumparam() {
		SecondnumparamContext _localctx = new SecondnumparamContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_secondnumparam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(NUMOPERATION);
			State = 201; numholder();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberoperationsContext : ParserRuleContext {
		public NumholderContext numholder() {
			return GetRuleContext<NumholderContext>(0);
		}
		public SecondnumparamContext[] secondnumparam() {
			return GetRuleContexts<SecondnumparamContext>();
		}
		public SecondnumparamContext secondnumparam(int i) {
			return GetRuleContext<SecondnumparamContext>(i);
		}
		public NumberoperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberoperations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterNumberoperations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitNumberoperations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberoperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberoperationsContext numberoperations() {
		NumberoperationsContext _localctx = new NumberoperationsContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_numberoperations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; numholder();
			State = 207;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NUMOPERATION) {
				{
				{
				State = 204; secondnumparam();
				}
				}
				State = 209;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooloperationContext : ParserRuleContext {
		public NumberoperationsContext[] numberoperations() {
			return GetRuleContexts<NumberoperationsContext>();
		}
		public NumberoperationsContext numberoperations(int i) {
			return GetRuleContext<NumberoperationsContext>(i);
		}
		public ITerminalNode COMPARE() { return GetToken(DynamicMonsterParser.COMPARE, 0); }
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public ITerminalNode ALIVE() { return GetToken(DynamicMonsterParser.ALIVE, 0); }
		public ITerminalNode IS() { return GetToken(DynamicMonsterParser.IS, 0); }
		public ITerminalNode NEAR() { return GetToken(DynamicMonsterParser.NEAR, 0); }
		public BooloperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booloperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterBooloperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitBooloperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooloperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooloperationContext booloperation() {
		BooloperationContext _localctx = new BooloperationContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_booloperation);
		try {
			State = 221;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 210; numberoperations();
				State = 211; Match(COMPARE);
				State = 212; numberoperations();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214; character();
				State = 215; Match(ALIVE);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 217; character();
				State = 218; Match(IS);
				State = 219; Match(NEAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SecondbooloperationContext : ParserRuleContext {
		public ITerminalNode EXPRESSIONCONNECTER() { return GetToken(DynamicMonsterParser.EXPRESSIONCONNECTER, 0); }
		public BooloperationContext booloperation() {
			return GetRuleContext<BooloperationContext>(0);
		}
		public SecondbooloperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondbooloperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterSecondbooloperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitSecondbooloperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecondbooloperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SecondbooloperationContext secondbooloperation() {
		SecondbooloperationContext _localctx = new SecondbooloperationContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_secondbooloperation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223; Match(EXPRESSIONCONNECTER);
			State = 224; booloperation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolsconnectedContext : ParserRuleContext {
		public BooloperationContext booloperation() {
			return GetRuleContext<BooloperationContext>(0);
		}
		public SecondbooloperationContext[] secondbooloperation() {
			return GetRuleContexts<SecondbooloperationContext>();
		}
		public SecondbooloperationContext secondbooloperation(int i) {
			return GetRuleContext<SecondbooloperationContext>(i);
		}
		public BoolsconnectedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolsconnected; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterBoolsconnected(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitBoolsconnected(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolsconnected(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolsconnectedContext boolsconnected() {
		BoolsconnectedContext _localctx = new BoolsconnectedContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_boolsconnected);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; booloperation();
			State = 230;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==EXPRESSIONCONNECTER) {
				{
				{
				State = 227; secondbooloperation();
				}
				}
				State = 232;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolexpressionContext : ParserRuleContext {
		public ITerminalNode PARENTHESISSTART() { return GetToken(DynamicMonsterParser.PARENTHESISSTART, 0); }
		public BoolsconnectedContext boolsconnected() {
			return GetRuleContext<BoolsconnectedContext>(0);
		}
		public ITerminalNode PARENTHESISCLOSE() { return GetToken(DynamicMonsterParser.PARENTHESISCLOSE, 0); }
		public BoolexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterBoolexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitBoolexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolexpressionContext boolexpression() {
		BoolexpressionContext _localctx = new BoolexpressionContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_boolexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; Match(PARENTHESISSTART);
			State = 234; boolsconnected();
			State = 235; Match(PARENTHESISCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterContext : ParserRuleContext {
		public ITerminalNode PLAYER() { return GetToken(DynamicMonsterParser.PLAYER, 0); }
		public ITerminalNode ME() { return GetToken(DynamicMonsterParser.ME, 0); }
		public ITerminalNode TRAP() { return GetToken(DynamicMonsterParser.TRAP, 0); }
		public ITerminalNode MONSTER() { return GetToken(DynamicMonsterParser.MONSTER, 0); }
		public CharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterCharacter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitCharacter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterContext character() {
		CharacterContext _localctx = new CharacterContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_character);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRAP) | (1L << PLAYER) | (1L << ME) | (1L << MONSTER))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PossibleAttributesContext : ParserRuleContext {
		public ITerminalNode HEALTH() { return GetToken(DynamicMonsterParser.HEALTH, 0); }
		public ITerminalNode PLACE_T() { return GetToken(DynamicMonsterParser.PLACE_T, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(DynamicMonsterParser.ATTRIBUTE, 0); }
		public ITerminalNode X() { return GetToken(DynamicMonsterParser.X, 0); }
		public ITerminalNode Y() { return GetToken(DynamicMonsterParser.Y, 0); }
		public ITerminalNode DAMAGE() { return GetToken(DynamicMonsterParser.DAMAGE, 0); }
		public PossibleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_possibleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterPossibleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitPossibleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPossibleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PossibleAttributesContext possibleAttributes() {
		PossibleAttributesContext _localctx = new PossibleAttributesContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_possibleAttributes);
		try {
			State = 247;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 239; Match(HEALTH);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 240; Match(PLACE_T);
				State = 241; Match(ATTRIBUTE);
				State = 242; Match(X);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 243; Match(PLACE_T);
				State = 244; Match(ATTRIBUTE);
				State = 245; Match(Y);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 246; Match(DAMAGE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterAttributeContext : ParserRuleContext {
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public ITerminalNode ATTRIBUTE() { return GetToken(DynamicMonsterParser.ATTRIBUTE, 0); }
		public PossibleAttributesContext possibleAttributes() {
			return GetRuleContext<PossibleAttributesContext>(0);
		}
		public CharacterAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characterAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterCharacterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitCharacterAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacterAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterAttributeContext characterAttribute() {
		CharacterAttributeContext _localctx = new CharacterAttributeContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_characterAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; character();
			State = 250; Match(ATTRIBUTE);
			State = 251; possibleAttributes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceContext : ParserRuleContext {
		public XContext x() {
			return GetRuleContext<XContext>(0);
		}
		public YContext y() {
			return GetRuleContext<YContext>(0);
		}
		public PlaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_place; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterPlace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitPlace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceContext place() {
		PlaceContext _localctx = new PlaceContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_place);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; x();
			State = 254; Match(COMMA);
			State = 255; y();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(DynamicMonsterParser.NUMBER, 0); }
		public XContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_x; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterX(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitX(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitX(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XContext x() {
		XContext _localctx = new XContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_x);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(DynamicMonsterParser.NUMBER, 0); }
		public YContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_y; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitY(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitY(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YContext y() {
		YContext _localctx = new YContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_y);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3)\x108\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x3\x2\a\x2:\n\x2\f\x2\xE\x2=\v\x2\x3\x3\x3\x3\x3\x4"+
		"\x3\x4\a\x4\x43\n\x4\f\x4\xE\x4\x46\v\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x5\x5Z\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6h\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3"+
		"\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\x89\n\v\x3\f"+
		"\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f"+
		"\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f"+
		"\x3\f\x5\f\xA9\n\f\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x5\xE\xB7\n\xE\x3\xF\x3\xF\a\xF\xBB\n\xF\f\xF\xE\xF\xBE"+
		"\v\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5"+
		"\x10\xC9\n\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\a\x12\xD0\n\x12\f\x12"+
		"\xE\x12\xD3\v\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x5\x13\xE0\n\x13\x3\x14\x3\x14\x3\x14\x3\x15"+
		"\x3\x15\a\x15\xE7\n\x15\f\x15\xE\x15\xEA\v\x15\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x5\x18\xFA\n\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x2\x2\x2\x1D\x2\x2\x4\x2\x6"+
		"\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C"+
		"\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2"+
		"\x2\x3\x5\x2\t\n\xF\xF\'\'\x10E\x2;\x3\x2\x2\x2\x4>\x3\x2\x2\x2\x6@\x3"+
		"\x2\x2\x2\bY\x3\x2\x2\x2\ng\x3\x2\x2\x2\fi\x3\x2\x2\x2\xEn\x3\x2\x2\x2"+
		"\x10r\x3\x2\x2\x2\x12v\x3\x2\x2\x2\x14\x88\x3\x2\x2\x2\x16\xA8\x3\x2\x2"+
		"\x2\x18\xAA\x3\x2\x2\x2\x1A\xB6\x3\x2\x2\x2\x1C\xB8\x3\x2\x2\x2\x1E\xC8"+
		"\x3\x2\x2\x2 \xCA\x3\x2\x2\x2\"\xCD\x3\x2\x2\x2$\xDF\x3\x2\x2\x2&\xE1"+
		"\x3\x2\x2\x2(\xE4\x3\x2\x2\x2*\xEB\x3\x2\x2\x2,\xEF\x3\x2\x2\x2.\xF9\x3"+
		"\x2\x2\x2\x30\xFB\x3\x2\x2\x2\x32\xFF\x3\x2\x2\x2\x34\x103\x3\x2\x2\x2"+
		"\x36\x105\x3\x2\x2\x2\x38:\x5\x6\x4\x2\x39\x38\x3\x2\x2\x2:=\x3\x2\x2"+
		"\x2;\x39\x3\x2\x2\x2;<\x3\x2\x2\x2<\x3\x3\x2\x2\x2=;\x3\x2\x2\x2>?\a%"+
		"\x2\x2?\x5\x3\x2\x2\x2@\x44\x5\f\a\x2\x41\x43\x5\b\x5\x2\x42\x41\x3\x2"+
		"\x2\x2\x43\x46\x3\x2\x2\x2\x44\x42\x3\x2\x2\x2\x44\x45\x3\x2\x2\x2\x45"+
		"\a\x3\x2\x2\x2\x46\x44\x3\x2\x2\x2GH\x5\xE\b\x2HI\a!\x2\x2IZ\x3\x2\x2"+
		"\x2JK\x5\x10\t\x2KL\a!\x2\x2LZ\x3\x2\x2\x2MN\x5\x14\v\x2NO\a!\x2\x2OZ"+
		"\x3\x2\x2\x2PQ\x5\x16\f\x2QR\a!\x2\x2RZ\x3\x2\x2\x2ST\x5\x18\r\x2TU\a"+
		"!\x2\x2UZ\x3\x2\x2\x2VW\x5\x1A\xE\x2WX\a!\x2\x2XZ\x3\x2\x2\x2YG\x3\x2"+
		"\x2\x2YJ\x3\x2\x2\x2YM\x3\x2\x2\x2YP\x3\x2\x2\x2YS\x3\x2\x2\x2YV\x3\x2"+
		"\x2\x2Z\t\x3\x2\x2\x2[\\\x5\xE\b\x2\\]\a!\x2\x2]h\x3\x2\x2\x2^_\x5\x10"+
		"\t\x2_`\a!\x2\x2`h\x3\x2\x2\x2\x61\x62\x5\x14\v\x2\x62\x63\a!\x2\x2\x63"+
		"h\x3\x2\x2\x2\x64\x65\x5\x16\f\x2\x65\x66\a!\x2\x2\x66h\x3\x2\x2\x2g["+
		"\x3\x2\x2\x2g^\x3\x2\x2\x2g\x61\x3\x2\x2\x2g\x64\x3\x2\x2\x2h\v\x3\x2"+
		"\x2\x2ij\a\a\x2\x2jk\a\x17\x2\x2kl\x5\x4\x3\x2lm\a!\x2\x2m\r\x3\x2\x2"+
		"\x2no\a\x13\x2\x2op\a\x17\x2\x2pq\a$\x2\x2q\xF\x3\x2\x2\x2rs\a\x5\x2\x2"+
		"st\a\x17\x2\x2tu\a$\x2\x2u\x11\x3\x2\x2\x2vw\a\x4\x2\x2wx\a\x17\x2\x2"+
		"xy\a$\x2\x2y\x13\x3\x2\x2\x2z{\a\x15\x2\x2{\x89\a\x6\x2\x2|}\a\x15\x2"+
		"\x2}~\a\x11\x2\x2~\x89\x5\x32\x1A\x2\x7F\x80\a\x15\x2\x2\x80\x81\a\x6"+
		"\x2\x2\x81\x89\x5\x12\n\x2\x82\x83\a\x15\x2\x2\x83\x84\a\x11\x2\x2\x84"+
		"\x89\a\n\x2\x2\x85\x86\a\x15\x2\x2\x86\x87\a\x11\x2\x2\x87\x89\a\x3\x2"+
		"\x2\x88z\x3\x2\x2\x2\x88|\x3\x2\x2\x2\x88\x7F\x3\x2\x2\x2\x88\x82\x3\x2"+
		"\x2\x2\x88\x85\x3\x2\x2\x2\x89\x15\x3\x2\x2\x2\x8A\x8B\a\x16\x2\x2\x8B"+
		"\xA9\a\x6\x2\x2\x8C\x8D\a\x16\x2\x2\x8D\x8E\a\x11\x2\x2\x8E\xA9\x5\x32"+
		"\x1A\x2\x8F\x90\a\x16\x2\x2\x90\x91\a\x6\x2\x2\x91\xA9\x5\x12\n\x2\x92"+
		"\x93\a\x16\x2\x2\x93\x94\a\x6\x2\x2\x94\xA9\x5\x10\t\x2\x95\x96\a\x16"+
		"\x2\x2\x96\xA9\a\x3\x2\x2\x97\x98\a\x16\x2\x2\x98\x99\a\x11\x2\x2\x99"+
		"\xA9\a\n\x2\x2\x9A\x9B\a\x16\x2\x2\x9B\x9C\a\x11\x2\x2\x9C\x9D\a\n\x2"+
		"\x2\x9D\xA9\x5\x10\t\x2\x9E\x9F\a\x16\x2\x2\x9F\xA0\a\x6\x2\x2\xA0\xA1"+
		"\x5\x12\n\x2\xA1\xA2\x5\x10\t\x2\xA2\xA9\x3\x2\x2\x2\xA3\xA4\a\x16\x2"+
		"\x2\xA4\xA5\a\x11\x2\x2\xA5\xA6\x5\x32\x1A\x2\xA6\xA7\x5\x10\t\x2\xA7"+
		"\xA9\x3\x2\x2\x2\xA8\x8A\x3\x2\x2\x2\xA8\x8C\x3\x2\x2\x2\xA8\x8F\x3\x2"+
		"\x2\x2\xA8\x92\x3\x2\x2\x2\xA8\x95\x3\x2\x2\x2\xA8\x97\x3\x2\x2\x2\xA8"+
		"\x9A\x3\x2\x2\x2\xA8\x9E\x3\x2\x2\x2\xA8\xA3\x3\x2\x2\x2\xA9\x17\x3\x2"+
		"\x2\x2\xAA\xAB\a\x10\x2\x2\xAB\xAC\x5*\x16\x2\xAC\xAD\x5\x1C\xF\x2\xAD"+
		"\x19\x3\x2\x2\x2\xAE\xAF\a\x12\x2\x2\xAF\xB0\x5*\x16\x2\xB0\xB1\x5\x1C"+
		"\xF\x2\xB1\xB7\x3\x2\x2\x2\xB2\xB3\a\x12\x2\x2\xB3\xB4\x5*\x16\x2\xB4"+
		"\xB5\x5\b\x5\x2\xB5\xB7\x3\x2\x2\x2\xB6\xAE\x3\x2\x2\x2\xB6\xB2\x3\x2"+
		"\x2\x2\xB7\x1B\x3\x2\x2\x2\xB8\xBC\a\x1E\x2\x2\xB9\xBB\x5\n\x6\x2\xBA"+
		"\xB9\x3\x2\x2\x2\xBB\xBE\x3\x2\x2\x2\xBC\xBA\x3\x2\x2\x2\xBC\xBD\x3\x2"+
		"\x2\x2\xBD\xBF\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2\xBF\xC0\a\x1E\x2\x2\xC0"+
		"\x1D\x3\x2\x2\x2\xC1\xC9\a\f\x2\x2\xC2\xC9\a$\x2\x2\xC3\xC9\x5\x30\x19"+
		"\x2\xC4\xC5\a\x18\x2\x2\xC5\xC6\x5\x1E\x10\x2\xC6\xC7\a\x18\x2\x2\xC7"+
		"\xC9\x3\x2\x2\x2\xC8\xC1\x3\x2\x2\x2\xC8\xC2\x3\x2\x2\x2\xC8\xC3\x3\x2"+
		"\x2\x2\xC8\xC4\x3\x2\x2\x2\xC9\x1F\x3\x2\x2\x2\xCA\xCB\a\x1B\x2\x2\xCB"+
		"\xCC\x5\x1E\x10\x2\xCC!\x3\x2\x2\x2\xCD\xD1\x5\x1E\x10\x2\xCE\xD0\x5 "+
		"\x11\x2\xCF\xCE\x3\x2\x2\x2\xD0\xD3\x3\x2\x2\x2\xD1\xCF\x3\x2\x2\x2\xD1"+
		"\xD2\x3\x2\x2\x2\xD2#\x3\x2\x2\x2\xD3\xD1\x3\x2\x2\x2\xD4\xD5\x5\"\x12"+
		"\x2\xD5\xD6\a\x1A\x2\x2\xD6\xD7\x5\"\x12\x2\xD7\xE0\x3\x2\x2\x2\xD8\xD9"+
		"\x5,\x17\x2\xD9\xDA\a\x14\x2\x2\xDA\xE0\x3\x2\x2\x2\xDB\xDC\x5,\x17\x2"+
		"\xDC\xDD\a\xE\x2\x2\xDD\xDE\a\r\x2\x2\xDE\xE0\x3\x2\x2\x2\xDF\xD4\x3\x2"+
		"\x2\x2\xDF\xD8\x3\x2\x2\x2\xDF\xDB\x3\x2\x2\x2\xE0%\x3\x2\x2\x2\xE1\xE2"+
		"\a\x19\x2\x2\xE2\xE3\x5$\x13\x2\xE3\'\x3\x2\x2\x2\xE4\xE8\x5$\x13\x2\xE5"+
		"\xE7\x5&\x14\x2\xE6\xE5\x3\x2\x2\x2\xE7\xEA\x3\x2\x2\x2\xE8\xE6\x3\x2"+
		"\x2\x2\xE8\xE9\x3\x2\x2\x2\xE9)\x3\x2\x2\x2\xEA\xE8\x3\x2\x2\x2\xEB\xEC"+
		"\a\x1C\x2\x2\xEC\xED\x5(\x15\x2\xED\xEE\a\x1D\x2\x2\xEE+\x3\x2\x2\x2\xEF"+
		"\xF0\t\x2\x2\x2\xF0-\x3\x2\x2\x2\xF1\xFA\a\x13\x2\x2\xF2\xF3\a\v\x2\x2"+
		"\xF3\xF4\a#\x2\x2\xF4\xFA\a(\x2\x2\xF5\xF6\a\v\x2\x2\xF6\xF7\a#\x2\x2"+
		"\xF7\xFA\a)\x2\x2\xF8\xFA\a\x5\x2\x2\xF9\xF1\x3\x2\x2\x2\xF9\xF2\x3\x2"+
		"\x2\x2\xF9\xF5\x3\x2\x2\x2\xF9\xF8\x3\x2\x2\x2\xFA/\x3\x2\x2\x2\xFB\xFC"+
		"\x5,\x17\x2\xFC\xFD\a#\x2\x2\xFD\xFE\x5.\x18\x2\xFE\x31\x3\x2\x2\x2\xFF"+
		"\x100\x5\x34\x1B\x2\x100\x101\a\"\x2\x2\x101\x102\x5\x36\x1C\x2\x102\x33"+
		"\x3\x2\x2\x2\x103\x104\a$\x2\x2\x104\x35\x3\x2\x2\x2\x105\x106\a$\x2\x2"+
		"\x106\x37\x3\x2\x2\x2\xF;\x44Yg\x88\xA8\xB6\xBC\xC8\xD1\xDF\xE8\xF9";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LabWork1github
