//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Dana\source\repos\LabWork1github\LabWork1github\DynamicMonster.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LabWork1github {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DynamicMonsterParser : Parser {
	public const int
		RANDOM=1, DISTANCE=2, DAMAGE=3, DIRECTION=4, NAME_T=5, RANGE_T=6, IN=7, 
		TRAP=8, PLAYER=9, PLACE_T=10, ROUND=11, NEAR=12, IS=13, ME=14, IF=15, 
		TO=16, WHILE=17, HEALTH=18, ALIVE=19, MOVE=20, SHOOT=21, EQUALS=22, ABSOLUTE=23, 
		EXPRESSIONCONNECTER=24, COMPARE=25, NUMOPERATION=26, PARENTHESISSTART=27, 
		PARENTHESISCLOSE=28, BRACKETCLOSE=29, BRACKETSTART=30, COLON=31, SEMI=32, 
		COMMA=33, ATTRIBUTE=34, NUMBER=35, ID=36, WS=37, MONSTER=38;
	public const int
		RULE_definition = 0, RULE_name = 1, RULE_statementList = 2, RULE_statement = 3, 
		RULE_nameDeclaration = 4, RULE_rangeDeclaration = 5, RULE_healthDeclaration = 6, 
		RULE_moveDeclaration = 7, RULE_shootDeclaration = 8, RULE_ifexpression = 9, 
		RULE_whileexpression = 10, RULE_damageDeclaration = 11, RULE_distanceDeclare = 12, 
		RULE_block = 13, RULE_secondnumparam = 14, RULE_numberoperations = 15, 
		RULE_character = 16, RULE_booloperation = 17, RULE_secondbooloperation = 18, 
		RULE_boolsconnected = 19, RULE_boolexpression = 20, RULE_possibleAttributes = 21, 
		RULE_characterAttribute = 22, RULE_numholder = 23, RULE_place = 24, RULE_x = 25, 
		RULE_y = 26;
	public static readonly string[] ruleNames = {
		"definition", "name", "statementList", "statement", "nameDeclaration", 
		"rangeDeclaration", "healthDeclaration", "moveDeclaration", "shootDeclaration", 
		"ifexpression", "whileexpression", "damageDeclaration", "distanceDeclare", 
		"block", "secondnumparam", "numberoperations", "character", "booloperation", 
		"secondbooloperation", "boolsconnected", "boolexpression", "possibleAttributes", 
		"characterAttribute", "numholder", "place", "x", "y"
	};

	private static readonly string[] _LiteralNames = {
		null, "'random'", "'distance'", "'damage'", null, "'name'", "'range'", 
		"'in'", "'trap'", "'player'", "'place'", "'round'", "'near'", "'is'", 
		"'me'", "'if'", "'to'", "'while'", "'HP'", "'alive'", "'move'", "'shoot'", 
		"'='", "'|'", null, null, null, "'('", "')'", "'}'", "'{'", "':'", "';'", 
		"','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "RANDOM", "DISTANCE", "DAMAGE", "DIRECTION", "NAME_T", "RANGE_T", 
		"IN", "TRAP", "PLAYER", "PLACE_T", "ROUND", "NEAR", "IS", "ME", "IF", 
		"TO", "WHILE", "HEALTH", "ALIVE", "MOVE", "SHOOT", "EQUALS", "ABSOLUTE", 
		"EXPRESSIONCONNECTER", "COMPARE", "NUMOPERATION", "PARENTHESISSTART", 
		"PARENTHESISCLOSE", "BRACKETCLOSE", "BRACKETSTART", "COLON", "SEMI", "COMMA", 
		"ATTRIBUTE", "NUMBER", "ID", "WS", "MONSTER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DynamicMonster.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public DynamicMonsterParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DefinitionContext : ParserRuleContext {
		public StatementListContext[] statementList() {
			return GetRuleContexts<StatementListContext>();
		}
		public StatementListContext statementList(int i) {
			return GetRuleContext<StatementListContext>(i);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NAME_T) {
				{
				{
				State = 54; statementList();
				}
				}
				State = 59;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(DynamicMonsterParser.ID, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public NameDeclarationContext nameDeclaration() {
			return GetRuleContext<NameDeclarationContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; nameDeclaration();
			State = 66;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DAMAGE) | (1L << RANGE_T) | (1L << IF) | (1L << WHILE) | (1L << HEALTH) | (1L << MOVE) | (1L << SHOOT))) != 0)) {
				{
				{
				State = 63; statement();
				}
				}
				State = 68;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public HealthDeclarationContext healthDeclaration() {
			return GetRuleContext<HealthDeclarationContext>(0);
		}
		public RangeDeclarationContext rangeDeclaration() {
			return GetRuleContext<RangeDeclarationContext>(0);
		}
		public DamageDeclarationContext damageDeclaration() {
			return GetRuleContext<DamageDeclarationContext>(0);
		}
		public MoveDeclarationContext moveDeclaration() {
			return GetRuleContext<MoveDeclarationContext>(0);
		}
		public ShootDeclarationContext shootDeclaration() {
			return GetRuleContext<ShootDeclarationContext>(0);
		}
		public IfexpressionContext ifexpression() {
			return GetRuleContext<IfexpressionContext>(0);
		}
		public WhileexpressionContext whileexpression() {
			return GetRuleContext<WhileexpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 90;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case HEALTH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 69; healthDeclaration();
				State = 70; Match(SEMI);
				}
				break;
			case RANGE_T:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72; rangeDeclaration();
				State = 73; Match(SEMI);
				}
				break;
			case DAMAGE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 75; damageDeclaration();
				State = 76; Match(SEMI);
				}
				break;
			case MOVE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 78; moveDeclaration();
				State = 79; Match(SEMI);
				}
				break;
			case SHOOT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 81; shootDeclaration();
				State = 82; Match(SEMI);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 6);
				{
				State = 84; ifexpression();
				State = 85; Match(SEMI);
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 87; whileexpression();
				State = 88; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameDeclarationContext : ParserRuleContext {
		public ITerminalNode NAME_T() { return GetToken(DynamicMonsterParser.NAME_T, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicMonsterParser.EQUALS, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NameDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterNameDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitNameDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameDeclarationContext nameDeclaration() {
		NameDeclarationContext _localctx = new NameDeclarationContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_nameDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(NAME_T);
			State = 93; Match(EQUALS);
			State = 94; name();
			State = 95; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeDeclarationContext : ParserRuleContext {
		public ITerminalNode RANGE_T() { return GetToken(DynamicMonsterParser.RANGE_T, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicMonsterParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicMonsterParser.NUMBER, 0); }
		public RangeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterRangeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitRangeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeDeclarationContext rangeDeclaration() {
		RangeDeclarationContext _localctx = new RangeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_rangeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; Match(RANGE_T);
			State = 98; Match(EQUALS);
			State = 99; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HealthDeclarationContext : ParserRuleContext {
		public ITerminalNode HEALTH() { return GetToken(DynamicMonsterParser.HEALTH, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicMonsterParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicMonsterParser.NUMBER, 0); }
		public HealthDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_healthDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterHealthDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitHealthDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHealthDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HealthDeclarationContext healthDeclaration() {
		HealthDeclarationContext _localctx = new HealthDeclarationContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_healthDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(HEALTH);
			State = 102; Match(EQUALS);
			State = 103; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveDeclarationContext : ParserRuleContext {
		public ITerminalNode MOVE() { return GetToken(DynamicMonsterParser.MOVE, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DynamicMonsterParser.DIRECTION, 0); }
		public ITerminalNode TO() { return GetToken(DynamicMonsterParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public DistanceDeclareContext distanceDeclare() {
			return GetRuleContext<DistanceDeclareContext>(0);
		}
		public ITerminalNode PLAYER() { return GetToken(DynamicMonsterParser.PLAYER, 0); }
		public ITerminalNode RANDOM() { return GetToken(DynamicMonsterParser.RANDOM, 0); }
		public MoveDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterMoveDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitMoveDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoveDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveDeclarationContext moveDeclaration() {
		MoveDeclarationContext _localctx = new MoveDeclarationContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_moveDeclaration);
		try {
			State = 119;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 105; Match(MOVE);
				State = 106; Match(DIRECTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 107; Match(MOVE);
				State = 108; Match(TO);
				State = 109; place();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 110; Match(MOVE);
				State = 111; Match(DIRECTION);
				State = 112; distanceDeclare();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 113; Match(MOVE);
				State = 114; Match(TO);
				State = 115; Match(PLAYER);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 116; Match(MOVE);
				State = 117; Match(TO);
				State = 118; Match(RANDOM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShootDeclarationContext : ParserRuleContext {
		public ITerminalNode SHOOT() { return GetToken(DynamicMonsterParser.SHOOT, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DynamicMonsterParser.DIRECTION, 0); }
		public ITerminalNode TO() { return GetToken(DynamicMonsterParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public DistanceDeclareContext distanceDeclare() {
			return GetRuleContext<DistanceDeclareContext>(0);
		}
		public DamageDeclarationContext damageDeclaration() {
			return GetRuleContext<DamageDeclarationContext>(0);
		}
		public ITerminalNode RANDOM() { return GetToken(DynamicMonsterParser.RANDOM, 0); }
		public ITerminalNode PLAYER() { return GetToken(DynamicMonsterParser.PLAYER, 0); }
		public ShootDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shootDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterShootDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitShootDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShootDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShootDeclarationContext shootDeclaration() {
		ShootDeclarationContext _localctx = new ShootDeclarationContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_shootDeclaration);
		try {
			State = 151;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121; Match(SHOOT);
				State = 122; Match(DIRECTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 123; Match(SHOOT);
				State = 124; Match(TO);
				State = 125; place();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 126; Match(SHOOT);
				State = 127; Match(DIRECTION);
				State = 128; distanceDeclare();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 129; Match(SHOOT);
				State = 130; Match(DIRECTION);
				State = 131; damageDeclaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 132; Match(SHOOT);
				State = 133; Match(RANDOM);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 134; Match(SHOOT);
				State = 135; Match(TO);
				State = 136; Match(PLAYER);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 137; Match(SHOOT);
				State = 138; Match(TO);
				State = 139; Match(PLAYER);
				State = 140; damageDeclaration();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 141; Match(SHOOT);
				State = 142; Match(DIRECTION);
				State = 143; distanceDeclare();
				State = 144; damageDeclaration();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 146; Match(SHOOT);
				State = 147; Match(TO);
				State = 148; place();
				State = 149; damageDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfexpressionContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(DynamicMonsterParser.IF, 0); }
		public BoolexpressionContext boolexpression() {
			return GetRuleContext<BoolexpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterIfexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitIfexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfexpressionContext ifexpression() {
		IfexpressionContext _localctx = new IfexpressionContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_ifexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153; Match(IF);
			State = 154; boolexpression();
			State = 155; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileexpressionContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(DynamicMonsterParser.WHILE, 0); }
		public BoolexpressionContext boolexpression() {
			return GetRuleContext<BoolexpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterWhileexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitWhileexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileexpressionContext whileexpression() {
		WhileexpressionContext _localctx = new WhileexpressionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_whileexpression);
		try {
			State = 165;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157; Match(WHILE);
				State = 158; boolexpression();
				State = 159; block();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 161; Match(WHILE);
				State = 162; boolexpression();
				State = 163; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DamageDeclarationContext : ParserRuleContext {
		public ITerminalNode DAMAGE() { return GetToken(DynamicMonsterParser.DAMAGE, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicMonsterParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicMonsterParser.NUMBER, 0); }
		public DamageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_damageDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterDamageDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitDamageDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDamageDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DamageDeclarationContext damageDeclaration() {
		DamageDeclarationContext _localctx = new DamageDeclarationContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_damageDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; Match(DAMAGE);
			State = 168; Match(EQUALS);
			State = 169; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistanceDeclareContext : ParserRuleContext {
		public ITerminalNode DISTANCE() { return GetToken(DynamicMonsterParser.DISTANCE, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicMonsterParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicMonsterParser.NUMBER, 0); }
		public DistanceDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distanceDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterDistanceDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitDistanceDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDistanceDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DistanceDeclareContext distanceDeclare() {
		DistanceDeclareContext _localctx = new DistanceDeclareContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_distanceDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; Match(DISTANCE);
			State = 172; Match(EQUALS);
			State = 173; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode[] BRACKETCLOSE() { return GetTokens(DynamicMonsterParser.BRACKETCLOSE); }
		public ITerminalNode BRACKETCLOSE(int i) {
			return GetToken(DynamicMonsterParser.BRACKETCLOSE, i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; Match(BRACKETCLOSE);
			State = 179;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DAMAGE) | (1L << RANGE_T) | (1L << IF) | (1L << WHILE) | (1L << HEALTH) | (1L << MOVE) | (1L << SHOOT))) != 0)) {
				{
				{
				State = 176; statement();
				}
				}
				State = 181;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 182; Match(BRACKETCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SecondnumparamContext : ParserRuleContext {
		public ITerminalNode NUMOPERATION() { return GetToken(DynamicMonsterParser.NUMOPERATION, 0); }
		public NumholderContext numholder() {
			return GetRuleContext<NumholderContext>(0);
		}
		public SecondnumparamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondnumparam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterSecondnumparam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitSecondnumparam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecondnumparam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SecondnumparamContext secondnumparam() {
		SecondnumparamContext _localctx = new SecondnumparamContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_secondnumparam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; Match(NUMOPERATION);
			State = 185; numholder();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberoperationsContext : ParserRuleContext {
		public NumholderContext numholder() {
			return GetRuleContext<NumholderContext>(0);
		}
		public SecondnumparamContext[] secondnumparam() {
			return GetRuleContexts<SecondnumparamContext>();
		}
		public SecondnumparamContext secondnumparam(int i) {
			return GetRuleContext<SecondnumparamContext>(i);
		}
		public NumberoperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberoperations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterNumberoperations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitNumberoperations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberoperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberoperationsContext numberoperations() {
		NumberoperationsContext _localctx = new NumberoperationsContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_numberoperations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; numholder();
			State = 191;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NUMOPERATION) {
				{
				{
				State = 188; secondnumparam();
				}
				}
				State = 193;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterContext : ParserRuleContext {
		public ITerminalNode PLAYER() { return GetToken(DynamicMonsterParser.PLAYER, 0); }
		public ITerminalNode ME() { return GetToken(DynamicMonsterParser.ME, 0); }
		public ITerminalNode TRAP() { return GetToken(DynamicMonsterParser.TRAP, 0); }
		public ITerminalNode MONSTER() { return GetToken(DynamicMonsterParser.MONSTER, 0); }
		public CharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterCharacter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitCharacter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterContext character() {
		CharacterContext _localctx = new CharacterContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_character);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRAP) | (1L << PLAYER) | (1L << ME) | (1L << MONSTER))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooloperationContext : ParserRuleContext {
		public NumberoperationsContext[] numberoperations() {
			return GetRuleContexts<NumberoperationsContext>();
		}
		public NumberoperationsContext numberoperations(int i) {
			return GetRuleContext<NumberoperationsContext>(i);
		}
		public ITerminalNode COMPARE() { return GetToken(DynamicMonsterParser.COMPARE, 0); }
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public ITerminalNode ALIVE() { return GetToken(DynamicMonsterParser.ALIVE, 0); }
		public ITerminalNode IN() { return GetToken(DynamicMonsterParser.IN, 0); }
		public ITerminalNode RANGE_T() { return GetToken(DynamicMonsterParser.RANGE_T, 0); }
		public ITerminalNode IS() { return GetToken(DynamicMonsterParser.IS, 0); }
		public ITerminalNode NEAR() { return GetToken(DynamicMonsterParser.NEAR, 0); }
		public BooloperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booloperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterBooloperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitBooloperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooloperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooloperationContext booloperation() {
		BooloperationContext _localctx = new BooloperationContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_booloperation);
		try {
			State = 211;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 196; numberoperations();
				State = 197; Match(COMPARE);
				State = 198; numberoperations();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 200; character();
				State = 201; Match(ALIVE);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 203; character();
				State = 204; Match(IN);
				State = 205; Match(RANGE_T);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 207; character();
				State = 208; Match(IS);
				State = 209; Match(NEAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SecondbooloperationContext : ParserRuleContext {
		public ITerminalNode EXPRESSIONCONNECTER() { return GetToken(DynamicMonsterParser.EXPRESSIONCONNECTER, 0); }
		public BooloperationContext booloperation() {
			return GetRuleContext<BooloperationContext>(0);
		}
		public SecondbooloperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondbooloperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterSecondbooloperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitSecondbooloperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecondbooloperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SecondbooloperationContext secondbooloperation() {
		SecondbooloperationContext _localctx = new SecondbooloperationContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_secondbooloperation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; Match(EXPRESSIONCONNECTER);
			State = 214; booloperation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolsconnectedContext : ParserRuleContext {
		public BooloperationContext booloperation() {
			return GetRuleContext<BooloperationContext>(0);
		}
		public SecondbooloperationContext[] secondbooloperation() {
			return GetRuleContexts<SecondbooloperationContext>();
		}
		public SecondbooloperationContext secondbooloperation(int i) {
			return GetRuleContext<SecondbooloperationContext>(i);
		}
		public BoolsconnectedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolsconnected; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterBoolsconnected(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitBoolsconnected(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolsconnected(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolsconnectedContext boolsconnected() {
		BoolsconnectedContext _localctx = new BoolsconnectedContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_boolsconnected);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; booloperation();
			State = 220;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==EXPRESSIONCONNECTER) {
				{
				{
				State = 217; secondbooloperation();
				}
				}
				State = 222;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolexpressionContext : ParserRuleContext {
		public ITerminalNode PARENTHESISSTART() { return GetToken(DynamicMonsterParser.PARENTHESISSTART, 0); }
		public BoolsconnectedContext boolsconnected() {
			return GetRuleContext<BoolsconnectedContext>(0);
		}
		public ITerminalNode PARENTHESISCLOSE() { return GetToken(DynamicMonsterParser.PARENTHESISCLOSE, 0); }
		public BoolexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterBoolexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitBoolexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolexpressionContext boolexpression() {
		BoolexpressionContext _localctx = new BoolexpressionContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_boolexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223; Match(PARENTHESISSTART);
			State = 224; boolsconnected();
			State = 225; Match(PARENTHESISCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PossibleAttributesContext : ParserRuleContext {
		public ITerminalNode HEALTH() { return GetToken(DynamicMonsterParser.HEALTH, 0); }
		public ITerminalNode PLACE_T() { return GetToken(DynamicMonsterParser.PLACE_T, 0); }
		public ITerminalNode RANGE_T() { return GetToken(DynamicMonsterParser.RANGE_T, 0); }
		public ITerminalNode DAMAGE() { return GetToken(DynamicMonsterParser.DAMAGE, 0); }
		public PossibleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_possibleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterPossibleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitPossibleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPossibleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PossibleAttributesContext possibleAttributes() {
		PossibleAttributesContext _localctx = new PossibleAttributesContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_possibleAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DAMAGE) | (1L << RANGE_T) | (1L << PLACE_T) | (1L << HEALTH))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterAttributeContext : ParserRuleContext {
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public ITerminalNode ATTRIBUTE() { return GetToken(DynamicMonsterParser.ATTRIBUTE, 0); }
		public PossibleAttributesContext possibleAttributes() {
			return GetRuleContext<PossibleAttributesContext>(0);
		}
		public CharacterAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characterAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterCharacterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitCharacterAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacterAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterAttributeContext characterAttribute() {
		CharacterAttributeContext _localctx = new CharacterAttributeContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_characterAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229; character();
			State = 230; Match(ATTRIBUTE);
			State = 231; possibleAttributes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumholderContext : ParserRuleContext {
		public ITerminalNode ROUND() { return GetToken(DynamicMonsterParser.ROUND, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicMonsterParser.NUMBER, 0); }
		public CharacterAttributeContext characterAttribute() {
			return GetRuleContext<CharacterAttributeContext>(0);
		}
		public ITerminalNode[] ABSOLUTE() { return GetTokens(DynamicMonsterParser.ABSOLUTE); }
		public ITerminalNode ABSOLUTE(int i) {
			return GetToken(DynamicMonsterParser.ABSOLUTE, i);
		}
		public NumholderContext numholder() {
			return GetRuleContext<NumholderContext>(0);
		}
		public NumholderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numholder; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterNumholder(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitNumholder(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumholder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumholderContext numholder() {
		NumholderContext _localctx = new NumholderContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_numholder);
		try {
			State = 240;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ROUND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 233; Match(ROUND);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 234; Match(NUMBER);
				}
				break;
			case TRAP:
			case PLAYER:
			case ME:
			case MONSTER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 235; characterAttribute();
				}
				break;
			case ABSOLUTE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 236; Match(ABSOLUTE);
				State = 237; numholder();
				State = 238; Match(ABSOLUTE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceContext : ParserRuleContext {
		public XContext x() {
			return GetRuleContext<XContext>(0);
		}
		public YContext y() {
			return GetRuleContext<YContext>(0);
		}
		public PlaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_place; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterPlace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitPlace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceContext place() {
		PlaceContext _localctx = new PlaceContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_place);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242; x();
			State = 243; Match(COMMA);
			State = 244; y();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(DynamicMonsterParser.NUMBER, 0); }
		public XContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_x; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterX(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitX(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitX(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XContext x() {
		XContext _localctx = new XContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_x);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(DynamicMonsterParser.NUMBER, 0); }
		public YContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_y; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.EnterY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicMonsterListener typedListener = listener as IDynamicMonsterListener;
			if (typedListener != null) typedListener.ExitY(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicMonsterVisitor<TResult> typedVisitor = visitor as IDynamicMonsterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitY(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YContext y() {
		YContext _localctx = new YContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_y);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3(\xFD\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x3\x2\a\x2:\n\x2\f\x2\xE\x2=\v\x2\x3\x3\x3\x3\x3\x4"+
		"\x3\x4\a\x4\x43\n\x4\f\x4\xE\x4\x46\v\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5]\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\tz\n\t\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x9A"+
		"\n\n\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f"+
		"\xA8\n\f\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\a\xF"+
		"\xB4\n\xF\f\xF\xE\xF\xB7\v\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x11"+
		"\x3\x11\a\x11\xC0\n\x11\f\x11\xE\x11\xC3\v\x11\x3\x12\x3\x12\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x5\x13\xD6\n\x13\x3\x14\x3\x14\x3\x14\x3\x15"+
		"\x3\x15\a\x15\xDD\n\x15\f\x15\xE\x15\xE0\v\x15\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x5\x19\xF3\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x2\x2\x2\x1D\x2\x2\x4\x2\x6\x2\b\x2"+
		"\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x2\x4"+
		"\x5\x2\n\v\x10\x10((\x6\x2\x5\x5\b\b\f\f\x14\x14\xFF\x2;\x3\x2\x2\x2\x4"+
		">\x3\x2\x2\x2\x6@\x3\x2\x2\x2\b\\\x3\x2\x2\x2\n^\x3\x2\x2\x2\f\x63\x3"+
		"\x2\x2\x2\xEg\x3\x2\x2\x2\x10y\x3\x2\x2\x2\x12\x99\x3\x2\x2\x2\x14\x9B"+
		"\x3\x2\x2\x2\x16\xA7\x3\x2\x2\x2\x18\xA9\x3\x2\x2\x2\x1A\xAD\x3\x2\x2"+
		"\x2\x1C\xB1\x3\x2\x2\x2\x1E\xBA\x3\x2\x2\x2 \xBD\x3\x2\x2\x2\"\xC4\x3"+
		"\x2\x2\x2$\xD5\x3\x2\x2\x2&\xD7\x3\x2\x2\x2(\xDA\x3\x2\x2\x2*\xE1\x3\x2"+
		"\x2\x2,\xE5\x3\x2\x2\x2.\xE7\x3\x2\x2\x2\x30\xF2\x3\x2\x2\x2\x32\xF4\x3"+
		"\x2\x2\x2\x34\xF8\x3\x2\x2\x2\x36\xFA\x3\x2\x2\x2\x38:\x5\x6\x4\x2\x39"+
		"\x38\x3\x2\x2\x2:=\x3\x2\x2\x2;\x39\x3\x2\x2\x2;<\x3\x2\x2\x2<\x3\x3\x2"+
		"\x2\x2=;\x3\x2\x2\x2>?\a&\x2\x2?\x5\x3\x2\x2\x2@\x44\x5\n\x6\x2\x41\x43"+
		"\x5\b\x5\x2\x42\x41\x3\x2\x2\x2\x43\x46\x3\x2\x2\x2\x44\x42\x3\x2\x2\x2"+
		"\x44\x45\x3\x2\x2\x2\x45\a\x3\x2\x2\x2\x46\x44\x3\x2\x2\x2GH\x5\xE\b\x2"+
		"HI\a\"\x2\x2I]\x3\x2\x2\x2JK\x5\f\a\x2KL\a\"\x2\x2L]\x3\x2\x2\x2MN\x5"+
		"\x18\r\x2NO\a\"\x2\x2O]\x3\x2\x2\x2PQ\x5\x10\t\x2QR\a\"\x2\x2R]\x3\x2"+
		"\x2\x2ST\x5\x12\n\x2TU\a\"\x2\x2U]\x3\x2\x2\x2VW\x5\x14\v\x2WX\a\"\x2"+
		"\x2X]\x3\x2\x2\x2YZ\x5\x16\f\x2Z[\a\"\x2\x2[]\x3\x2\x2\x2\\G\x3\x2\x2"+
		"\x2\\J\x3\x2\x2\x2\\M\x3\x2\x2\x2\\P\x3\x2\x2\x2\\S\x3\x2\x2\x2\\V\x3"+
		"\x2\x2\x2\\Y\x3\x2\x2\x2]\t\x3\x2\x2\x2^_\a\a\x2\x2_`\a\x18\x2\x2`\x61"+
		"\x5\x4\x3\x2\x61\x62\a\"\x2\x2\x62\v\x3\x2\x2\x2\x63\x64\a\b\x2\x2\x64"+
		"\x65\a\x18\x2\x2\x65\x66\a%\x2\x2\x66\r\x3\x2\x2\x2gh\a\x14\x2\x2hi\a"+
		"\x18\x2\x2ij\a%\x2\x2j\xF\x3\x2\x2\x2kl\a\x16\x2\x2lz\a\x6\x2\x2mn\a\x16"+
		"\x2\x2no\a\x12\x2\x2oz\x5\x32\x1A\x2pq\a\x16\x2\x2qr\a\x6\x2\x2rz\x5\x1A"+
		"\xE\x2st\a\x16\x2\x2tu\a\x12\x2\x2uz\a\v\x2\x2vw\a\x16\x2\x2wx\a\x12\x2"+
		"\x2xz\a\x3\x2\x2yk\x3\x2\x2\x2ym\x3\x2\x2\x2yp\x3\x2\x2\x2ys\x3\x2\x2"+
		"\x2yv\x3\x2\x2\x2z\x11\x3\x2\x2\x2{|\a\x17\x2\x2|\x9A\a\x6\x2\x2}~\a\x17"+
		"\x2\x2~\x7F\a\x12\x2\x2\x7F\x9A\x5\x32\x1A\x2\x80\x81\a\x17\x2\x2\x81"+
		"\x82\a\x6\x2\x2\x82\x9A\x5\x1A\xE\x2\x83\x84\a\x17\x2\x2\x84\x85\a\x6"+
		"\x2\x2\x85\x9A\x5\x18\r\x2\x86\x87\a\x17\x2\x2\x87\x9A\a\x3\x2\x2\x88"+
		"\x89\a\x17\x2\x2\x89\x8A\a\x12\x2\x2\x8A\x9A\a\v\x2\x2\x8B\x8C\a\x17\x2"+
		"\x2\x8C\x8D\a\x12\x2\x2\x8D\x8E\a\v\x2\x2\x8E\x9A\x5\x18\r\x2\x8F\x90"+
		"\a\x17\x2\x2\x90\x91\a\x6\x2\x2\x91\x92\x5\x1A\xE\x2\x92\x93\x5\x18\r"+
		"\x2\x93\x9A\x3\x2\x2\x2\x94\x95\a\x17\x2\x2\x95\x96\a\x12\x2\x2\x96\x97"+
		"\x5\x32\x1A\x2\x97\x98\x5\x18\r\x2\x98\x9A\x3\x2\x2\x2\x99{\x3\x2\x2\x2"+
		"\x99}\x3\x2\x2\x2\x99\x80\x3\x2\x2\x2\x99\x83\x3\x2\x2\x2\x99\x86\x3\x2"+
		"\x2\x2\x99\x88\x3\x2\x2\x2\x99\x8B\x3\x2\x2\x2\x99\x8F\x3\x2\x2\x2\x99"+
		"\x94\x3\x2\x2\x2\x9A\x13\x3\x2\x2\x2\x9B\x9C\a\x11\x2\x2\x9C\x9D\x5*\x16"+
		"\x2\x9D\x9E\x5\x1C\xF\x2\x9E\x15\x3\x2\x2\x2\x9F\xA0\a\x13\x2\x2\xA0\xA1"+
		"\x5*\x16\x2\xA1\xA2\x5\x1C\xF\x2\xA2\xA8\x3\x2\x2\x2\xA3\xA4\a\x13\x2"+
		"\x2\xA4\xA5\x5*\x16\x2\xA5\xA6\x5\b\x5\x2\xA6\xA8\x3\x2\x2\x2\xA7\x9F"+
		"\x3\x2\x2\x2\xA7\xA3\x3\x2\x2\x2\xA8\x17\x3\x2\x2\x2\xA9\xAA\a\x5\x2\x2"+
		"\xAA\xAB\a\x18\x2\x2\xAB\xAC\a%\x2\x2\xAC\x19\x3\x2\x2\x2\xAD\xAE\a\x4"+
		"\x2\x2\xAE\xAF\a\x18\x2\x2\xAF\xB0\a%\x2\x2\xB0\x1B\x3\x2\x2\x2\xB1\xB5"+
		"\a\x1F\x2\x2\xB2\xB4\x5\b\x5\x2\xB3\xB2\x3\x2\x2\x2\xB4\xB7\x3\x2\x2\x2"+
		"\xB5\xB3\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\xB8\x3\x2\x2\x2\xB7\xB5\x3"+
		"\x2\x2\x2\xB8\xB9\a\x1F\x2\x2\xB9\x1D\x3\x2\x2\x2\xBA\xBB\a\x1C\x2\x2"+
		"\xBB\xBC\x5\x30\x19\x2\xBC\x1F\x3\x2\x2\x2\xBD\xC1\x5\x30\x19\x2\xBE\xC0"+
		"\x5\x1E\x10\x2\xBF\xBE\x3\x2\x2\x2\xC0\xC3\x3\x2\x2\x2\xC1\xBF\x3\x2\x2"+
		"\x2\xC1\xC2\x3\x2\x2\x2\xC2!\x3\x2\x2\x2\xC3\xC1\x3\x2\x2\x2\xC4\xC5\t"+
		"\x2\x2\x2\xC5#\x3\x2\x2\x2\xC6\xC7\x5 \x11\x2\xC7\xC8\a\x1B\x2\x2\xC8"+
		"\xC9\x5 \x11\x2\xC9\xD6\x3\x2\x2\x2\xCA\xCB\x5\"\x12\x2\xCB\xCC\a\x15"+
		"\x2\x2\xCC\xD6\x3\x2\x2\x2\xCD\xCE\x5\"\x12\x2\xCE\xCF\a\t\x2\x2\xCF\xD0"+
		"\a\b\x2\x2\xD0\xD6\x3\x2\x2\x2\xD1\xD2\x5\"\x12\x2\xD2\xD3\a\xF\x2\x2"+
		"\xD3\xD4\a\xE\x2\x2\xD4\xD6\x3\x2\x2\x2\xD5\xC6\x3\x2\x2\x2\xD5\xCA\x3"+
		"\x2\x2\x2\xD5\xCD\x3\x2\x2\x2\xD5\xD1\x3\x2\x2\x2\xD6%\x3\x2\x2\x2\xD7"+
		"\xD8\a\x1A\x2\x2\xD8\xD9\x5$\x13\x2\xD9\'\x3\x2\x2\x2\xDA\xDE\x5$\x13"+
		"\x2\xDB\xDD\x5&\x14\x2\xDC\xDB\x3\x2\x2\x2\xDD\xE0\x3\x2\x2\x2\xDE\xDC"+
		"\x3\x2\x2\x2\xDE\xDF\x3\x2\x2\x2\xDF)\x3\x2\x2\x2\xE0\xDE\x3\x2\x2\x2"+
		"\xE1\xE2\a\x1D\x2\x2\xE2\xE3\x5(\x15\x2\xE3\xE4\a\x1E\x2\x2\xE4+\x3\x2"+
		"\x2\x2\xE5\xE6\t\x3\x2\x2\xE6-\x3\x2\x2\x2\xE7\xE8\x5\"\x12\x2\xE8\xE9"+
		"\a$\x2\x2\xE9\xEA\x5,\x17\x2\xEA/\x3\x2\x2\x2\xEB\xF3\a\r\x2\x2\xEC\xF3"+
		"\a%\x2\x2\xED\xF3\x5.\x18\x2\xEE\xEF\a\x19\x2\x2\xEF\xF0\x5\x30\x19\x2"+
		"\xF0\xF1\a\x19\x2\x2\xF1\xF3\x3\x2\x2\x2\xF2\xEB\x3\x2\x2\x2\xF2\xEC\x3"+
		"\x2\x2\x2\xF2\xED\x3\x2\x2\x2\xF2\xEE\x3\x2\x2\x2\xF3\x31\x3\x2\x2\x2"+
		"\xF4\xF5\x5\x34\x1B\x2\xF5\xF6\a#\x2\x2\xF6\xF7\x5\x36\x1C\x2\xF7\x33"+
		"\x3\x2\x2\x2\xF8\xF9\a%\x2\x2\xF9\x35\x3\x2\x2\x2\xFA\xFB\a%\x2\x2\xFB"+
		"\x37\x3\x2\x2\x2\r;\x44\\y\x99\xA7\xB5\xC1\xD5\xDE\xF2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LabWork1github
