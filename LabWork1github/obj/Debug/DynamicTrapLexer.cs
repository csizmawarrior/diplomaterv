//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Dana\source\repos\LabWork1github\LabWork1github\G4 files\DynamicTrap.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LabWork1github {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DynamicTrapLexer : Lexer {
	public const int
		TELEPORT_PLACE=1, SPAWN_PLACE=2, DISTANCE=3, DAMAGE=4, DIRECTION=5, IN=6, 
		TRAP=7, MONSTER=8, ROUND=9, ME=10, IF=11, RANDOM=12, TO=13, PLACE_T=14, 
		NEAR=15, IS=16, ON=17, WHILE=18, HEALTH=19, ALIVE=20, MOVE=21, SPAWN=22, 
		TELEPORT_T=23, HEAL=24, NAME_T=25, PLAYER=26, EFFECT_T=27, EQUALS=28, 
		ABSOLUTE=29, EXPRESSIONCONNECTER=30, COMPARE=31, NUMOPERATION=32, PARENTHESISSTART=33, 
		PARENTHESISCLOSE=34, BRACKETCLOSE=35, BRACKETSTART=36, COLON=37, SEMI=38, 
		ATTRIBUTE=39, COMMA=40, NUMBER=41, ID=42, WS=43;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"TELEPORT_PLACE", "SPAWN_PLACE", "DISTANCE", "DAMAGE", "DIRECTION", "IN", 
		"TRAP", "MONSTER", "ROUND", "ME", "IF", "RANDOM", "TO", "PLACE_T", "NEAR", 
		"IS", "ON", "WHILE", "HEALTH", "ALIVE", "MOVE", "SPAWN", "TELEPORT_T", 
		"HEAL", "NAME_T", "PLAYER", "EFFECT_T", "EQUALS", "ABSOLUTE", "EXPRESSIONCONNECTER", 
		"COMPARE", "NUMOPERATION", "PARENTHESISSTART", "PARENTHESISCLOSE", "BRACKETCLOSE", 
		"BRACKETSTART", "COLON", "SEMI", "ATTRIBUTE", "COMMA", "NUMBER", "ID", 
		"WS"
	};


	public DynamicTrapLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'teleport_place'", "'spawn_place'", "'distance'", "'damage'", null, 
		"'in'", "'trap'", "'monster'", "'round'", "'me'", "'if'", "'random'", 
		"'to'", "'place'", "'near'", "'is'", "'ON'", "'while'", "'HP'", "'alive'", 
		"'move'", "'spawn'", "'teleport'", "'heal'", "'name'", "'player'", "'effect'", 
		"'='", "'|'", null, null, null, "'('", "')'", "'}'", "'{'", "':'", "';'", 
		"'.'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TELEPORT_PLACE", "SPAWN_PLACE", "DISTANCE", "DAMAGE", "DIRECTION", 
		"IN", "TRAP", "MONSTER", "ROUND", "ME", "IF", "RANDOM", "TO", "PLACE_T", 
		"NEAR", "IS", "ON", "WHILE", "HEALTH", "ALIVE", "MOVE", "SPAWN", "TELEPORT_T", 
		"HEAL", "NAME_T", "PLAYER", "EFFECT_T", "EQUALS", "ABSOLUTE", "EXPRESSIONCONNECTER", 
		"COMPARE", "NUMOPERATION", "PARENTHESISSTART", "PARENTHESISCLOSE", "BRACKETCLOSE", 
		"BRACKETSTART", "COLON", "SEMI", "ATTRIBUTE", "COMMA", "NUMBER", "ID", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DynamicTrap.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2-\x12B\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x6\x3\x6\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f"+
		"\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11"+
		"\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x5\x1F\x101\n\x1F\x3 \x3 \x3 \x3 \x3 \x5 \x108\n \x3!\x3"+
		"!\x3\"\x3\"\x3#\x3#\x3$\x3$\x3%\x3%\x3&\x3&\x3\'\x3\'\x3(\x3(\x3)\x3)"+
		"\x3*\x6*\x11D\n*\r*\xE*\x11E\x3+\x3+\a+\x123\n+\f+\xE+\x126\v+\x3,\x3"+
		",\x3,\x3,\x2\x2\x2-\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF"+
		"\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10"+
		"\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/"+
		"\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C\x37\x2\x1D\x39\x2\x1E;\x2\x1F"+
		"=\x2 ?\x2!\x41\x2\"\x43\x2#\x45\x2$G\x2%I\x2&K\x2\'M\x2(O\x2)Q\x2*S\x2"+
		"+U\x2,W\x2-\x3\x2\t\x6\x2\x44\x44HHNNTT\x4\x2>>@@\x6\x2\'\',-//\x31\x31"+
		"\x3\x2\x32;\x4\x2\x43\\\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\x5\x2\v\f\xF"+
		"\xF\"\"\x12F\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t"+
		"\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11"+
		"\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2"+
		"\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2"+
		"\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2"+
		"\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31"+
		"\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2"+
		"\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2"+
		"\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2"+
		"\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2O\x3\x2\x2\x2\x2Q\x3"+
		"\x2\x2\x2\x2S\x3\x2\x2\x2\x2U\x3\x2\x2\x2\x2W\x3\x2\x2\x2\x3Y\x3\x2\x2"+
		"\x2\x5h\x3\x2\x2\x2\at\x3\x2\x2\x2\t}\x3\x2\x2\x2\v\x84\x3\x2\x2\x2\r"+
		"\x86\x3\x2\x2\x2\xF\x89\x3\x2\x2\x2\x11\x8E\x3\x2\x2\x2\x13\x96\x3\x2"+
		"\x2\x2\x15\x9C\x3\x2\x2\x2\x17\x9F\x3\x2\x2\x2\x19\xA2\x3\x2\x2\x2\x1B"+
		"\xA9\x3\x2\x2\x2\x1D\xAC\x3\x2\x2\x2\x1F\xB2\x3\x2\x2\x2!\xB7\x3\x2\x2"+
		"\x2#\xBA\x3\x2\x2\x2%\xBD\x3\x2\x2\x2\'\xC3\x3\x2\x2\x2)\xC6\x3\x2\x2"+
		"\x2+\xCC\x3\x2\x2\x2-\xD1\x3\x2\x2\x2/\xD7\x3\x2\x2\x2\x31\xE0\x3\x2\x2"+
		"\x2\x33\xE5\x3\x2\x2\x2\x35\xEA\x3\x2\x2\x2\x37\xF1\x3\x2\x2\x2\x39\xF8"+
		"\x3\x2\x2\x2;\xFA\x3\x2\x2\x2=\x100\x3\x2\x2\x2?\x107\x3\x2\x2\x2\x41"+
		"\x109\x3\x2\x2\x2\x43\x10B\x3\x2\x2\x2\x45\x10D\x3\x2\x2\x2G\x10F\x3\x2"+
		"\x2\x2I\x111\x3\x2\x2\x2K\x113\x3\x2\x2\x2M\x115\x3\x2\x2\x2O\x117\x3"+
		"\x2\x2\x2Q\x119\x3\x2\x2\x2S\x11C\x3\x2\x2\x2U\x120\x3\x2\x2\x2W\x127"+
		"\x3\x2\x2\x2YZ\av\x2\x2Z[\ag\x2\x2[\\\an\x2\x2\\]\ag\x2\x2]^\ar\x2\x2"+
		"^_\aq\x2\x2_`\at\x2\x2`\x61\av\x2\x2\x61\x62\a\x61\x2\x2\x62\x63\ar\x2"+
		"\x2\x63\x64\an\x2\x2\x64\x65\a\x63\x2\x2\x65\x66\a\x65\x2\x2\x66g\ag\x2"+
		"\x2g\x4\x3\x2\x2\x2hi\au\x2\x2ij\ar\x2\x2jk\a\x63\x2\x2kl\ay\x2\x2lm\a"+
		"p\x2\x2mn\a\x61\x2\x2no\ar\x2\x2op\an\x2\x2pq\a\x63\x2\x2qr\a\x65\x2\x2"+
		"rs\ag\x2\x2s\x6\x3\x2\x2\x2tu\a\x66\x2\x2uv\ak\x2\x2vw\au\x2\x2wx\av\x2"+
		"\x2xy\a\x63\x2\x2yz\ap\x2\x2z{\a\x65\x2\x2{|\ag\x2\x2|\b\x3\x2\x2\x2}"+
		"~\a\x66\x2\x2~\x7F\a\x63\x2\x2\x7F\x80\ao\x2\x2\x80\x81\a\x63\x2\x2\x81"+
		"\x82\ai\x2\x2\x82\x83\ag\x2\x2\x83\n\x3\x2\x2\x2\x84\x85\t\x2\x2\x2\x85"+
		"\f\x3\x2\x2\x2\x86\x87\ak\x2\x2\x87\x88\ap\x2\x2\x88\xE\x3\x2\x2\x2\x89"+
		"\x8A\av\x2\x2\x8A\x8B\at\x2\x2\x8B\x8C\a\x63\x2\x2\x8C\x8D\ar\x2\x2\x8D"+
		"\x10\x3\x2\x2\x2\x8E\x8F\ao\x2\x2\x8F\x90\aq\x2\x2\x90\x91\ap\x2\x2\x91"+
		"\x92\au\x2\x2\x92\x93\av\x2\x2\x93\x94\ag\x2\x2\x94\x95\at\x2\x2\x95\x12"+
		"\x3\x2\x2\x2\x96\x97\at\x2\x2\x97\x98\aq\x2\x2\x98\x99\aw\x2\x2\x99\x9A"+
		"\ap\x2\x2\x9A\x9B\a\x66\x2\x2\x9B\x14\x3\x2\x2\x2\x9C\x9D\ao\x2\x2\x9D"+
		"\x9E\ag\x2\x2\x9E\x16\x3\x2\x2\x2\x9F\xA0\ak\x2\x2\xA0\xA1\ah\x2\x2\xA1"+
		"\x18\x3\x2\x2\x2\xA2\xA3\at\x2\x2\xA3\xA4\a\x63\x2\x2\xA4\xA5\ap\x2\x2"+
		"\xA5\xA6\a\x66\x2\x2\xA6\xA7\aq\x2\x2\xA7\xA8\ao\x2\x2\xA8\x1A\x3\x2\x2"+
		"\x2\xA9\xAA\av\x2\x2\xAA\xAB\aq\x2\x2\xAB\x1C\x3\x2\x2\x2\xAC\xAD\ar\x2"+
		"\x2\xAD\xAE\an\x2\x2\xAE\xAF\a\x63\x2\x2\xAF\xB0\a\x65\x2\x2\xB0\xB1\a"+
		"g\x2\x2\xB1\x1E\x3\x2\x2\x2\xB2\xB3\ap\x2\x2\xB3\xB4\ag\x2\x2\xB4\xB5"+
		"\a\x63\x2\x2\xB5\xB6\at\x2\x2\xB6 \x3\x2\x2\x2\xB7\xB8\ak\x2\x2\xB8\xB9"+
		"\au\x2\x2\xB9\"\x3\x2\x2\x2\xBA\xBB\aQ\x2\x2\xBB\xBC\aP\x2\x2\xBC$\x3"+
		"\x2\x2\x2\xBD\xBE\ay\x2\x2\xBE\xBF\aj\x2\x2\xBF\xC0\ak\x2\x2\xC0\xC1\a"+
		"n\x2\x2\xC1\xC2\ag\x2\x2\xC2&\x3\x2\x2\x2\xC3\xC4\aJ\x2\x2\xC4\xC5\aR"+
		"\x2\x2\xC5(\x3\x2\x2\x2\xC6\xC7\a\x63\x2\x2\xC7\xC8\an\x2\x2\xC8\xC9\a"+
		"k\x2\x2\xC9\xCA\ax\x2\x2\xCA\xCB\ag\x2\x2\xCB*\x3\x2\x2\x2\xCC\xCD\ao"+
		"\x2\x2\xCD\xCE\aq\x2\x2\xCE\xCF\ax\x2\x2\xCF\xD0\ag\x2\x2\xD0,\x3\x2\x2"+
		"\x2\xD1\xD2\au\x2\x2\xD2\xD3\ar\x2\x2\xD3\xD4\a\x63\x2\x2\xD4\xD5\ay\x2"+
		"\x2\xD5\xD6\ap\x2\x2\xD6.\x3\x2\x2\x2\xD7\xD8\av\x2\x2\xD8\xD9\ag\x2\x2"+
		"\xD9\xDA\an\x2\x2\xDA\xDB\ag\x2\x2\xDB\xDC\ar\x2\x2\xDC\xDD\aq\x2\x2\xDD"+
		"\xDE\at\x2\x2\xDE\xDF\av\x2\x2\xDF\x30\x3\x2\x2\x2\xE0\xE1\aj\x2\x2\xE1"+
		"\xE2\ag\x2\x2\xE2\xE3\a\x63\x2\x2\xE3\xE4\an\x2\x2\xE4\x32\x3\x2\x2\x2"+
		"\xE5\xE6\ap\x2\x2\xE6\xE7\a\x63\x2\x2\xE7\xE8\ao\x2\x2\xE8\xE9\ag\x2\x2"+
		"\xE9\x34\x3\x2\x2\x2\xEA\xEB\ar\x2\x2\xEB\xEC\an\x2\x2\xEC\xED\a\x63\x2"+
		"\x2\xED\xEE\a{\x2\x2\xEE\xEF\ag\x2\x2\xEF\xF0\at\x2\x2\xF0\x36\x3\x2\x2"+
		"\x2\xF1\xF2\ag\x2\x2\xF2\xF3\ah\x2\x2\xF3\xF4\ah\x2\x2\xF4\xF5\ag\x2\x2"+
		"\xF5\xF6\a\x65\x2\x2\xF6\xF7\av\x2\x2\xF7\x38\x3\x2\x2\x2\xF8\xF9\a?\x2"+
		"\x2\xF9:\x3\x2\x2\x2\xFA\xFB\a~\x2\x2\xFB<\x3\x2\x2\x2\xFC\xFD\a~\x2\x2"+
		"\xFD\x101\a~\x2\x2\xFE\xFF\a(\x2\x2\xFF\x101\a(\x2\x2\x100\xFC\x3\x2\x2"+
		"\x2\x100\xFE\x3\x2\x2\x2\x101>\x3\x2\x2\x2\x102\x108\t\x3\x2\x2\x103\x104"+
		"\a?\x2\x2\x104\x108\a?\x2\x2\x105\x106\a#\x2\x2\x106\x108\a?\x2\x2\x107"+
		"\x102\x3\x2\x2\x2\x107\x103\x3\x2\x2\x2\x107\x105\x3\x2\x2\x2\x108@\x3"+
		"\x2\x2\x2\x109\x10A\t\x4\x2\x2\x10A\x42\x3\x2\x2\x2\x10B\x10C\a*\x2\x2"+
		"\x10C\x44\x3\x2\x2\x2\x10D\x10E\a+\x2\x2\x10E\x46\x3\x2\x2\x2\x10F\x110"+
		"\a\x7F\x2\x2\x110H\x3\x2\x2\x2\x111\x112\a}\x2\x2\x112J\x3\x2\x2\x2\x113"+
		"\x114\a<\x2\x2\x114L\x3\x2\x2\x2\x115\x116\a=\x2\x2\x116N\x3\x2\x2\x2"+
		"\x117\x118\a\x30\x2\x2\x118P\x3\x2\x2\x2\x119\x11A\a.\x2\x2\x11AR\x3\x2"+
		"\x2\x2\x11B\x11D\t\x5\x2\x2\x11C\x11B\x3\x2\x2\x2\x11D\x11E\x3\x2\x2\x2"+
		"\x11E\x11C\x3\x2\x2\x2\x11E\x11F\x3\x2\x2\x2\x11FT\x3\x2\x2\x2\x120\x124"+
		"\t\x6\x2\x2\x121\x123\t\a\x2\x2\x122\x121\x3\x2\x2\x2\x123\x126\x3\x2"+
		"\x2\x2\x124\x122\x3\x2\x2\x2\x124\x125\x3\x2\x2\x2\x125V\x3\x2\x2\x2\x126"+
		"\x124\x3\x2\x2\x2\x127\x128\t\b\x2\x2\x128\x129\x3\x2\x2\x2\x129\x12A"+
		"\b,\x2\x2\x12AX\x3\x2\x2\x2\a\x2\x100\x107\x11E\x124\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LabWork1github
