//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Dana\source\repos\LabWork1github\LabWork1github\DynamicTrap.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LabWork1github {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DynamicTrapLexer : Lexer {
	public const int
		DISTANCE=1, DAMAGE=2, DIRECTION=3, IN=4, TRAP=5, MONSTER=6, ROUND=7, ME=8, 
		IF=9, RANDOM=10, TO=11, PLACE_T=12, WHILE=13, HEALTH=14, ALIVE=15, MOVE=16, 
		SPAWN=17, TELEPORT_T=18, HEAL=19, RANGE_T=20, NAME_T=21, PLAYER=22, EFFECT_T=23, 
		EQUALS=24, EXPRESSIONCONNECTER=25, COMPARE=26, NUMOPERATION=27, PARENTHESISSTART=28, 
		PARENTHESISCLOSE=29, BRACKETCLOSE=30, BRACKETSTART=31, COLON=32, SEMI=33, 
		ATTRIBUTE=34, COMMA=35, NUMBER=36, ID=37, WS=38;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"DISTANCE", "DAMAGE", "DIRECTION", "IN", "TRAP", "MONSTER", "ROUND", "ME", 
		"IF", "RANDOM", "TO", "PLACE_T", "WHILE", "HEALTH", "ALIVE", "MOVE", "SPAWN", 
		"TELEPORT_T", "HEAL", "RANGE_T", "NAME_T", "PLAYER", "EFFECT_T", "EQUALS", 
		"EXPRESSIONCONNECTER", "COMPARE", "NUMOPERATION", "PARENTHESISSTART", 
		"PARENTHESISCLOSE", "BRACKETCLOSE", "BRACKETSTART", "COLON", "SEMI", "ATTRIBUTE", 
		"COMMA", "NUMBER", "ID", "WS"
	};


	public DynamicTrapLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'distance'", "'damage'", null, "'in'", "'trap'", "'monster'", "'round'", 
		"'me'", "'if'", "'random'", "'to'", "'place'", "'while'", "'HP'", "'alive'", 
		"'move'", "'spawn'", "'teleport'", "'heal'", "'range'", "'name'", "'player'", 
		"'effect'", "'='", null, null, null, "'('", "')'", "'}'", "'{'", "':'", 
		"';'", "'.'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DISTANCE", "DAMAGE", "DIRECTION", "IN", "TRAP", "MONSTER", "ROUND", 
		"ME", "IF", "RANDOM", "TO", "PLACE_T", "WHILE", "HEALTH", "ALIVE", "MOVE", 
		"SPAWN", "TELEPORT_T", "HEAL", "RANGE_T", "NAME_T", "PLAYER", "EFFECT_T", 
		"EQUALS", "EXPRESSIONCONNECTER", "COMPARE", "NUMOPERATION", "PARENTHESISSTART", 
		"PARENTHESISCLOSE", "BRACKETCLOSE", "BRACKETSTART", "COLON", "SEMI", "ATTRIBUTE", 
		"COMMA", "NUMBER", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DynamicTrap.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2(\xFF\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3"+
		"\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19"+
		"\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\xD5\n\x1A\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x5\x1B\xDC\n\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E"+
		"\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x3$\x3$\x3%\x6"+
		"%\xF1\n%\r%\xE%\xF2\x3&\x3&\a&\xF7\n&\f&\xE&\xFA\v&\x3\'\x3\'\x3\'\x3"+
		"\'\x2\x2\x2(\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11"+
		"\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2"+
		"\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19"+
		"\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C\x37\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 ?"+
		"\x2!\x41\x2\"\x43\x2#\x45\x2$G\x2%I\x2&K\x2\'M\x2(\x3\x2\t\x6\x2\x44\x44"+
		"HHNNTT\x4\x2>>@@\x6\x2\'\',-//\x31\x31\x3\x2\x32;\x4\x2\x43\\\x63|\x6"+
		"\x2\x32;\x43\\\x61\x61\x63|\x5\x2\v\f\xF\xF\"\"\x103\x2\x3\x3\x2\x2\x2"+
		"\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2"+
		"\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2"+
		"\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3"+
		"\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3"+
		"\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2"+
		"\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2"+
		"\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2"+
		"\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2\x43\x3\x2"+
		"\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x2K\x3\x2\x2"+
		"\x2\x2M\x3\x2\x2\x2\x3O\x3\x2\x2\x2\x5X\x3\x2\x2\x2\a_\x3\x2\x2\x2\t\x61"+
		"\x3\x2\x2\x2\v\x64\x3\x2\x2\x2\ri\x3\x2\x2\x2\xFq\x3\x2\x2\x2\x11w\x3"+
		"\x2\x2\x2\x13z\x3\x2\x2\x2\x15}\x3\x2\x2\x2\x17\x84\x3\x2\x2\x2\x19\x87"+
		"\x3\x2\x2\x2\x1B\x8D\x3\x2\x2\x2\x1D\x93\x3\x2\x2\x2\x1F\x96\x3\x2\x2"+
		"\x2!\x9C\x3\x2\x2\x2#\xA1\x3\x2\x2\x2%\xA7\x3\x2\x2\x2\'\xB0\x3\x2\x2"+
		"\x2)\xB5\x3\x2\x2\x2+\xBB\x3\x2\x2\x2-\xC0\x3\x2\x2\x2/\xC7\x3\x2\x2\x2"+
		"\x31\xCE\x3\x2\x2\x2\x33\xD4\x3\x2\x2\x2\x35\xDB\x3\x2\x2\x2\x37\xDD\x3"+
		"\x2\x2\x2\x39\xDF\x3\x2\x2\x2;\xE1\x3\x2\x2\x2=\xE3\x3\x2\x2\x2?\xE5\x3"+
		"\x2\x2\x2\x41\xE7\x3\x2\x2\x2\x43\xE9\x3\x2\x2\x2\x45\xEB\x3\x2\x2\x2"+
		"G\xED\x3\x2\x2\x2I\xF0\x3\x2\x2\x2K\xF4\x3\x2\x2\x2M\xFB\x3\x2\x2\x2O"+
		"P\a\x66\x2\x2PQ\ak\x2\x2QR\au\x2\x2RS\av\x2\x2ST\a\x63\x2\x2TU\ap\x2\x2"+
		"UV\a\x65\x2\x2VW\ag\x2\x2W\x4\x3\x2\x2\x2XY\a\x66\x2\x2YZ\a\x63\x2\x2"+
		"Z[\ao\x2\x2[\\\a\x63\x2\x2\\]\ai\x2\x2]^\ag\x2\x2^\x6\x3\x2\x2\x2_`\t"+
		"\x2\x2\x2`\b\x3\x2\x2\x2\x61\x62\ak\x2\x2\x62\x63\ap\x2\x2\x63\n\x3\x2"+
		"\x2\x2\x64\x65\av\x2\x2\x65\x66\at\x2\x2\x66g\a\x63\x2\x2gh\ar\x2\x2h"+
		"\f\x3\x2\x2\x2ij\ao\x2\x2jk\aq\x2\x2kl\ap\x2\x2lm\au\x2\x2mn\av\x2\x2"+
		"no\ag\x2\x2op\at\x2\x2p\xE\x3\x2\x2\x2qr\at\x2\x2rs\aq\x2\x2st\aw\x2\x2"+
		"tu\ap\x2\x2uv\a\x66\x2\x2v\x10\x3\x2\x2\x2wx\ao\x2\x2xy\ag\x2\x2y\x12"+
		"\x3\x2\x2\x2z{\ak\x2\x2{|\ah\x2\x2|\x14\x3\x2\x2\x2}~\at\x2\x2~\x7F\a"+
		"\x63\x2\x2\x7F\x80\ap\x2\x2\x80\x81\a\x66\x2\x2\x81\x82\aq\x2\x2\x82\x83"+
		"\ao\x2\x2\x83\x16\x3\x2\x2\x2\x84\x85\av\x2\x2\x85\x86\aq\x2\x2\x86\x18"+
		"\x3\x2\x2\x2\x87\x88\ar\x2\x2\x88\x89\an\x2\x2\x89\x8A\a\x63\x2\x2\x8A"+
		"\x8B\a\x65\x2\x2\x8B\x8C\ag\x2\x2\x8C\x1A\x3\x2\x2\x2\x8D\x8E\ay\x2\x2"+
		"\x8E\x8F\aj\x2\x2\x8F\x90\ak\x2\x2\x90\x91\an\x2\x2\x91\x92\ag\x2\x2\x92"+
		"\x1C\x3\x2\x2\x2\x93\x94\aJ\x2\x2\x94\x95\aR\x2\x2\x95\x1E\x3\x2\x2\x2"+
		"\x96\x97\a\x63\x2\x2\x97\x98\an\x2\x2\x98\x99\ak\x2\x2\x99\x9A\ax\x2\x2"+
		"\x9A\x9B\ag\x2\x2\x9B \x3\x2\x2\x2\x9C\x9D\ao\x2\x2\x9D\x9E\aq\x2\x2\x9E"+
		"\x9F\ax\x2\x2\x9F\xA0\ag\x2\x2\xA0\"\x3\x2\x2\x2\xA1\xA2\au\x2\x2\xA2"+
		"\xA3\ar\x2\x2\xA3\xA4\a\x63\x2\x2\xA4\xA5\ay\x2\x2\xA5\xA6\ap\x2\x2\xA6"+
		"$\x3\x2\x2\x2\xA7\xA8\av\x2\x2\xA8\xA9\ag\x2\x2\xA9\xAA\an\x2\x2\xAA\xAB"+
		"\ag\x2\x2\xAB\xAC\ar\x2\x2\xAC\xAD\aq\x2\x2\xAD\xAE\at\x2\x2\xAE\xAF\a"+
		"v\x2\x2\xAF&\x3\x2\x2\x2\xB0\xB1\aj\x2\x2\xB1\xB2\ag\x2\x2\xB2\xB3\a\x63"+
		"\x2\x2\xB3\xB4\an\x2\x2\xB4(\x3\x2\x2\x2\xB5\xB6\at\x2\x2\xB6\xB7\a\x63"+
		"\x2\x2\xB7\xB8\ap\x2\x2\xB8\xB9\ai\x2\x2\xB9\xBA\ag\x2\x2\xBA*\x3\x2\x2"+
		"\x2\xBB\xBC\ap\x2\x2\xBC\xBD\a\x63\x2\x2\xBD\xBE\ao\x2\x2\xBE\xBF\ag\x2"+
		"\x2\xBF,\x3\x2\x2\x2\xC0\xC1\ar\x2\x2\xC1\xC2\an\x2\x2\xC2\xC3\a\x63\x2"+
		"\x2\xC3\xC4\a{\x2\x2\xC4\xC5\ag\x2\x2\xC5\xC6\at\x2\x2\xC6.\x3\x2\x2\x2"+
		"\xC7\xC8\ag\x2\x2\xC8\xC9\ah\x2\x2\xC9\xCA\ah\x2\x2\xCA\xCB\ag\x2\x2\xCB"+
		"\xCC\a\x65\x2\x2\xCC\xCD\av\x2\x2\xCD\x30\x3\x2\x2\x2\xCE\xCF\a?\x2\x2"+
		"\xCF\x32\x3\x2\x2\x2\xD0\xD1\a~\x2\x2\xD1\xD5\a~\x2\x2\xD2\xD3\a(\x2\x2"+
		"\xD3\xD5\a(\x2\x2\xD4\xD0\x3\x2\x2\x2\xD4\xD2\x3\x2\x2\x2\xD5\x34\x3\x2"+
		"\x2\x2\xD6\xDC\t\x3\x2\x2\xD7\xD8\a?\x2\x2\xD8\xDC\a?\x2\x2\xD9\xDA\a"+
		"#\x2\x2\xDA\xDC\a?\x2\x2\xDB\xD6\x3\x2\x2\x2\xDB\xD7\x3\x2\x2\x2\xDB\xD9"+
		"\x3\x2\x2\x2\xDC\x36\x3\x2\x2\x2\xDD\xDE\t\x4\x2\x2\xDE\x38\x3\x2\x2\x2"+
		"\xDF\xE0\a*\x2\x2\xE0:\x3\x2\x2\x2\xE1\xE2\a+\x2\x2\xE2<\x3\x2\x2\x2\xE3"+
		"\xE4\a\x7F\x2\x2\xE4>\x3\x2\x2\x2\xE5\xE6\a}\x2\x2\xE6@\x3\x2\x2\x2\xE7"+
		"\xE8\a<\x2\x2\xE8\x42\x3\x2\x2\x2\xE9\xEA\a=\x2\x2\xEA\x44\x3\x2\x2\x2"+
		"\xEB\xEC\a\x30\x2\x2\xEC\x46\x3\x2\x2\x2\xED\xEE\a.\x2\x2\xEEH\x3\x2\x2"+
		"\x2\xEF\xF1\t\x5\x2\x2\xF0\xEF\x3\x2\x2\x2\xF1\xF2\x3\x2\x2\x2\xF2\xF0"+
		"\x3\x2\x2\x2\xF2\xF3\x3\x2\x2\x2\xF3J\x3\x2\x2\x2\xF4\xF8\t\x6\x2\x2\xF5"+
		"\xF7\t\a\x2\x2\xF6\xF5\x3\x2\x2\x2\xF7\xFA\x3\x2\x2\x2\xF8\xF6\x3\x2\x2"+
		"\x2\xF8\xF9\x3\x2\x2\x2\xF9L\x3\x2\x2\x2\xFA\xF8\x3\x2\x2\x2\xFB\xFC\t"+
		"\b\x2\x2\xFC\xFD\x3\x2\x2\x2\xFD\xFE\b\'\x2\x2\xFEN\x3\x2\x2\x2\a\x2\xD4"+
		"\xDB\xF2\xF8\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LabWork1github
