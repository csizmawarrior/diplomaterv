//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Dana\source\repos\LabWork1github\LabWork1github\DynamicTrap.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LabWork1github {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DynamicTrapParser : Parser {
	public const int
		DISTANCE=1, DAMAGE=2, DIRECTION=3, IN=4, TRAP=5, MONSTER=6, ROUND=7, ME=8, 
		IF=9, RANDOM=10, TO=11, PLACE_T=12, WHILE=13, HEALTH=14, ALIVE=15, MOVE=16, 
		SPAWN=17, TELEPORT_T=18, HEAL=19, RANGE_T=20, NAME_T=21, PLAYER=22, EFFECT_T=23, 
		EQUALS=24, EXPRESSIONCONNECTER=25, COMPARE=26, NUMOPERATION=27, PARENTHESISSTART=28, 
		PARENTHESISCLOSE=29, BRACKETCLOSE=30, BRACKETSTART=31, COLON=32, SEMI=33, 
		ATTRIBUTE=34, COMMA=35, NUMBER=36, ID=37, WS=38;
	public const int
		RULE_definition = 0, RULE_name = 1, RULE_statementList = 2, RULE_statement = 3, 
		RULE_damageDeclaration = 4, RULE_healDeclaration = 5, RULE_spawnDeclaration = 6, 
		RULE_teleport = 7, RULE_moveDeclaration = 8, RULE_rangeDeclare = 9, RULE_nameDeclaration = 10, 
		RULE_damageDeclare = 11, RULE_healDeclare = 12, RULE_distanceDeclare = 13, 
		RULE_ifexpression = 14, RULE_whileexpression = 15, RULE_block = 16, RULE_firstnumparam = 17, 
		RULE_secondnumparam = 18, RULE_numberoperations = 19, RULE_character = 20, 
		RULE_secondnumberoperations = 21, RULE_booloperation = 22, RULE_secondbooloperation = 23, 
		RULE_boolsconnected = 24, RULE_boolexpression = 25, RULE_possibleAttributes = 26, 
		RULE_characterAttribute = 27, RULE_numholder = 28, RULE_place = 29, RULE_x = 30, 
		RULE_y = 31;
	public static readonly string[] ruleNames = {
		"definition", "name", "statementList", "statement", "damageDeclaration", 
		"healDeclaration", "spawnDeclaration", "teleport", "moveDeclaration", 
		"rangeDeclare", "nameDeclaration", "damageDeclare", "healDeclare", "distanceDeclare", 
		"ifexpression", "whileexpression", "block", "firstnumparam", "secondnumparam", 
		"numberoperations", "character", "secondnumberoperations", "booloperation", 
		"secondbooloperation", "boolsconnected", "boolexpression", "possibleAttributes", 
		"characterAttribute", "numholder", "place", "x", "y"
	};

	private static readonly string[] _LiteralNames = {
		null, "'distance'", "'damage'", null, "'in'", "'trap'", "'monster'", "'round'", 
		"'me'", "'if'", "'random'", "'to'", "'place'", "'while'", "'HP'", "'alive'", 
		"'move'", "'spawn'", "'teleport'", "'heal'", "'range'", "'name'", "'player'", 
		"'effect'", "'='", null, null, null, "'('", "')'", "'}'", "'{'", "':'", 
		"';'", "'.'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DISTANCE", "DAMAGE", "DIRECTION", "IN", "TRAP", "MONSTER", "ROUND", 
		"ME", "IF", "RANDOM", "TO", "PLACE_T", "WHILE", "HEALTH", "ALIVE", "MOVE", 
		"SPAWN", "TELEPORT_T", "HEAL", "RANGE_T", "NAME_T", "PLAYER", "EFFECT_T", 
		"EQUALS", "EXPRESSIONCONNECTER", "COMPARE", "NUMOPERATION", "PARENTHESISSTART", 
		"PARENTHESISCLOSE", "BRACKETCLOSE", "BRACKETSTART", "COLON", "SEMI", "ATTRIBUTE", 
		"COMMA", "NUMBER", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DynamicTrap.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public DynamicTrapParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DefinitionContext : ParserRuleContext {
		public StatementListContext[] statementList() {
			return GetRuleContexts<StatementListContext>();
		}
		public StatementListContext statementList(int i) {
			return GetRuleContext<StatementListContext>(i);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NAME_T) {
				{
				{
				State = 64; statementList();
				}
				}
				State = 69;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(DynamicTrapParser.ID, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public NameDeclarationContext nameDeclaration() {
			return GetRuleContext<NameDeclarationContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; nameDeclaration();
			State = 76;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DAMAGE) | (1L << IF) | (1L << WHILE) | (1L << MOVE) | (1L << HEAL) | (1L << RANGE_T))) != 0)) {
				{
				{
				State = 73; statement();
				}
				}
				State = 78;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DamageDeclarationContext damageDeclaration() {
			return GetRuleContext<DamageDeclarationContext>(0);
		}
		public RangeDeclareContext rangeDeclare() {
			return GetRuleContext<RangeDeclareContext>(0);
		}
		public MoveDeclarationContext moveDeclaration() {
			return GetRuleContext<MoveDeclarationContext>(0);
		}
		public IfexpressionContext ifexpression() {
			return GetRuleContext<IfexpressionContext>(0);
		}
		public WhileexpressionContext whileexpression() {
			return GetRuleContext<WhileexpressionContext>(0);
		}
		public DamageDeclareContext damageDeclare() {
			return GetRuleContext<DamageDeclareContext>(0);
		}
		public HealDeclareContext healDeclare() {
			return GetRuleContext<HealDeclareContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 87;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 79; damageDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 80; rangeDeclare();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 81; moveDeclaration();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 82; ifexpression();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 83; whileexpression();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 84; damageDeclare();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 85; healDeclare();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 86; rangeDeclare();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DamageDeclarationContext : ParserRuleContext {
		public ITerminalNode DAMAGE() { return GetToken(DynamicTrapParser.DAMAGE, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DynamicTrapParser.DIRECTION, 0); }
		public DamageDeclareContext damageDeclare() {
			return GetRuleContext<DamageDeclareContext>(0);
		}
		public DistanceDeclareContext distanceDeclare() {
			return GetRuleContext<DistanceDeclareContext>(0);
		}
		public ITerminalNode RANDOM() { return GetToken(DynamicTrapParser.RANDOM, 0); }
		public ITerminalNode TO() { return GetToken(DynamicTrapParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public DamageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_damageDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterDamageDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitDamageDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDamageDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DamageDeclarationContext damageDeclaration() {
		DamageDeclarationContext _localctx = new DamageDeclarationContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_damageDeclaration);
		try {
			State = 120;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 89; Match(DAMAGE);
				State = 90; Match(DIRECTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 91; Match(DAMAGE);
				State = 92; Match(DIRECTION);
				State = 93; damageDeclare();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 94; Match(DAMAGE);
				State = 95; Match(DIRECTION);
				State = 96; distanceDeclare();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 97; Match(DAMAGE);
				State = 98; Match(DIRECTION);
				State = 99; distanceDeclare();
				State = 100; damageDeclare();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 102; Match(DAMAGE);
				State = 103; Match(RANDOM);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 104; Match(DAMAGE);
				State = 105; Match(TO);
				State = 106; place();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 107; Match(DAMAGE);
				State = 108; Match(TO);
				State = 109; place();
				State = 110; damageDeclare();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 112; Match(DAMAGE);
				State = 113; Match(TO);
				State = 114; character();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 115; Match(DAMAGE);
				State = 116; Match(TO);
				State = 117; character();
				State = 118; damageDeclare();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HealDeclarationContext : ParserRuleContext {
		public ITerminalNode HEAL() { return GetToken(DynamicTrapParser.HEAL, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DynamicTrapParser.DIRECTION, 0); }
		public DamageDeclareContext damageDeclare() {
			return GetRuleContext<DamageDeclareContext>(0);
		}
		public DistanceDeclareContext distanceDeclare() {
			return GetRuleContext<DistanceDeclareContext>(0);
		}
		public ITerminalNode RANDOM() { return GetToken(DynamicTrapParser.RANDOM, 0); }
		public ITerminalNode TO() { return GetToken(DynamicTrapParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public HealDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_healDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterHealDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitHealDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHealDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HealDeclarationContext healDeclaration() {
		HealDeclarationContext _localctx = new HealDeclarationContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_healDeclaration);
		try {
			State = 153;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 122; Match(HEAL);
				State = 123; Match(DIRECTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 124; Match(HEAL);
				State = 125; Match(DIRECTION);
				State = 126; damageDeclare();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 127; Match(HEAL);
				State = 128; Match(DIRECTION);
				State = 129; distanceDeclare();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 130; Match(HEAL);
				State = 131; Match(DIRECTION);
				State = 132; distanceDeclare();
				State = 133; damageDeclare();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 135; Match(HEAL);
				State = 136; Match(RANDOM);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 137; Match(HEAL);
				State = 138; Match(TO);
				State = 139; place();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 140; Match(HEAL);
				State = 141; Match(TO);
				State = 142; place();
				State = 143; damageDeclare();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 145; Match(HEAL);
				State = 146; Match(TO);
				State = 147; character();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 148; Match(HEAL);
				State = 149; Match(TO);
				State = 150; character();
				State = 151; damageDeclare();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpawnDeclarationContext : ParserRuleContext {
		public ITerminalNode SPAWN() { return GetToken(DynamicTrapParser.SPAWN, 0); }
		public ITerminalNode MONSTER() { return GetToken(DynamicTrapParser.MONSTER, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TO() { return GetToken(DynamicTrapParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public ITerminalNode RANDOM() { return GetToken(DynamicTrapParser.RANDOM, 0); }
		public SpawnDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spawnDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterSpawnDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitSpawnDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpawnDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpawnDeclarationContext spawnDeclaration() {
		SpawnDeclarationContext _localctx = new SpawnDeclarationContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_spawnDeclaration);
		try {
			State = 163;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 155; Match(SPAWN);
				State = 156; Match(MONSTER);
				State = 157; name();
				State = 158; Match(TO);
				State = 159; place();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 161; Match(SPAWN);
				State = 162; Match(RANDOM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeleportContext : ParserRuleContext {
		public ITerminalNode TELEPORT_T() { return GetToken(DynamicTrapParser.TELEPORT_T, 0); }
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public ITerminalNode TO() { return GetToken(DynamicTrapParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public ITerminalNode RANDOM() { return GetToken(DynamicTrapParser.RANDOM, 0); }
		public TeleportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teleport; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterTeleport(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitTeleport(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTeleport(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TeleportContext teleport() {
		TeleportContext _localctx = new TeleportContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_teleport);
		try {
			State = 174;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 165; Match(TELEPORT_T);
				State = 166; character();
				State = 167; Match(TO);
				State = 168; place();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 170; Match(TELEPORT_T);
				State = 171; character();
				State = 172; Match(RANDOM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveDeclarationContext : ParserRuleContext {
		public ITerminalNode MOVE() { return GetToken(DynamicTrapParser.MOVE, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DynamicTrapParser.DIRECTION, 0); }
		public ITerminalNode TO() { return GetToken(DynamicTrapParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(DynamicTrapParser.COLON, 0); }
		public DistanceDeclareContext distanceDeclare() {
			return GetRuleContext<DistanceDeclareContext>(0);
		}
		public ITerminalNode PLAYER() { return GetToken(DynamicTrapParser.PLAYER, 0); }
		public ITerminalNode RANDOM() { return GetToken(DynamicTrapParser.RANDOM, 0); }
		public MoveDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterMoveDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitMoveDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoveDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveDeclarationContext moveDeclaration() {
		MoveDeclarationContext _localctx = new MoveDeclarationContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_moveDeclaration);
		try {
			State = 191;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176; Match(MOVE);
				State = 177; Match(DIRECTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 178; Match(MOVE);
				State = 179; Match(TO);
				State = 180; place();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 181; Match(MOVE);
				State = 182; Match(DIRECTION);
				State = 183; Match(COLON);
				State = 184; distanceDeclare();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 185; Match(MOVE);
				State = 186; Match(TO);
				State = 187; Match(PLAYER);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 188; Match(MOVE);
				State = 189; Match(TO);
				State = 190; Match(RANDOM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeDeclareContext : ParserRuleContext {
		public ITerminalNode RANGE_T() { return GetToken(DynamicTrapParser.RANGE_T, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicTrapParser.NUMBER, 0); }
		public RangeDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterRangeDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitRangeDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeDeclareContext rangeDeclare() {
		RangeDeclareContext _localctx = new RangeDeclareContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_rangeDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(RANGE_T);
			State = 194; Match(COLON);
			State = 195; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameDeclarationContext : ParserRuleContext {
		public ITerminalNode NAME_T() { return GetToken(DynamicTrapParser.NAME_T, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NameDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterNameDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitNameDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameDeclarationContext nameDeclaration() {
		NameDeclarationContext _localctx = new NameDeclarationContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_nameDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; Match(NAME_T);
			State = 198; Match(COLON);
			State = 199; name();
			State = 200; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DamageDeclareContext : ParserRuleContext {
		public ITerminalNode DAMAGE() { return GetToken(DynamicTrapParser.DAMAGE, 0); }
		public ITerminalNode COLON() { return GetToken(DynamicTrapParser.COLON, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicTrapParser.NUMBER, 0); }
		public DamageDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_damageDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterDamageDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitDamageDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDamageDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DamageDeclareContext damageDeclare() {
		DamageDeclareContext _localctx = new DamageDeclareContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_damageDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; Match(DAMAGE);
			State = 203; Match(COLON);
			State = 204; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HealDeclareContext : ParserRuleContext {
		public ITerminalNode HEAL() { return GetToken(DynamicTrapParser.HEAL, 0); }
		public ITerminalNode COLON() { return GetToken(DynamicTrapParser.COLON, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicTrapParser.NUMBER, 0); }
		public HealDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_healDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterHealDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitHealDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHealDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HealDeclareContext healDeclare() {
		HealDeclareContext _localctx = new HealDeclareContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_healDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; Match(HEAL);
			State = 207; Match(COLON);
			State = 208; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistanceDeclareContext : ParserRuleContext {
		public ITerminalNode DISTANCE() { return GetToken(DynamicTrapParser.DISTANCE, 0); }
		public ITerminalNode COLON() { return GetToken(DynamicTrapParser.COLON, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicTrapParser.NUMBER, 0); }
		public DistanceDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distanceDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterDistanceDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitDistanceDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDistanceDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DistanceDeclareContext distanceDeclare() {
		DistanceDeclareContext _localctx = new DistanceDeclareContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_distanceDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; Match(DISTANCE);
			State = 211; Match(COLON);
			State = 212; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfexpressionContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(DynamicTrapParser.IF, 0); }
		public BoolexpressionContext boolexpression() {
			return GetRuleContext<BoolexpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterIfexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitIfexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfexpressionContext ifexpression() {
		IfexpressionContext _localctx = new IfexpressionContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_ifexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(IF);
			State = 215; boolexpression();
			State = 216; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileexpressionContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(DynamicTrapParser.WHILE, 0); }
		public BoolexpressionContext boolexpression() {
			return GetRuleContext<BoolexpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterWhileexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitWhileexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileexpressionContext whileexpression() {
		WhileexpressionContext _localctx = new WhileexpressionContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_whileexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; Match(WHILE);
			State = 219; boolexpression();
			State = 220; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode[] BRACKETCLOSE() { return GetTokens(DynamicTrapParser.BRACKETCLOSE); }
		public ITerminalNode BRACKETCLOSE(int i) {
			return GetToken(DynamicTrapParser.BRACKETCLOSE, i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(BRACKETCLOSE);
			State = 226;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DAMAGE) | (1L << IF) | (1L << WHILE) | (1L << MOVE) | (1L << HEAL) | (1L << RANGE_T))) != 0)) {
				{
				{
				State = 223; statement();
				}
				}
				State = 228;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 229; Match(BRACKETCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FirstnumparamContext : ParserRuleContext {
		public NumholderContext numholder() {
			return GetRuleContext<NumholderContext>(0);
		}
		public FirstnumparamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_firstnumparam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterFirstnumparam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitFirstnumparam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirstnumparam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FirstnumparamContext firstnumparam() {
		FirstnumparamContext _localctx = new FirstnumparamContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_firstnumparam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; numholder();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SecondnumparamContext : ParserRuleContext {
		public ITerminalNode NUMOPERATION() { return GetToken(DynamicTrapParser.NUMOPERATION, 0); }
		public NumholderContext numholder() {
			return GetRuleContext<NumholderContext>(0);
		}
		public SecondnumparamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondnumparam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterSecondnumparam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitSecondnumparam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecondnumparam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SecondnumparamContext secondnumparam() {
		SecondnumparamContext _localctx = new SecondnumparamContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_secondnumparam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; Match(NUMOPERATION);
			State = 234; numholder();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberoperationsContext : ParserRuleContext {
		public NumholderContext numholder() {
			return GetRuleContext<NumholderContext>(0);
		}
		public SecondnumparamContext[] secondnumparam() {
			return GetRuleContexts<SecondnumparamContext>();
		}
		public SecondnumparamContext secondnumparam(int i) {
			return GetRuleContext<SecondnumparamContext>(i);
		}
		public NumberoperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberoperations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterNumberoperations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitNumberoperations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberoperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberoperationsContext numberoperations() {
		NumberoperationsContext _localctx = new NumberoperationsContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_numberoperations);
		int _la;
		try {
			State = 244;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 236; numholder();
				State = 240;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NUMOPERATION) {
					{
					{
					State = 237; secondnumparam();
					}
					}
					State = 242;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 243; numholder();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterContext : ParserRuleContext {
		public ITerminalNode PLAYER() { return GetToken(DynamicTrapParser.PLAYER, 0); }
		public ITerminalNode ME() { return GetToken(DynamicTrapParser.ME, 0); }
		public ITerminalNode TRAP() { return GetToken(DynamicTrapParser.TRAP, 0); }
		public CharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterCharacter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitCharacter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterContext character() {
		CharacterContext _localctx = new CharacterContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_character);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRAP) | (1L << ME) | (1L << PLAYER))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SecondnumberoperationsContext : ParserRuleContext {
		public ITerminalNode COMPARE() { return GetToken(DynamicTrapParser.COMPARE, 0); }
		public NumberoperationsContext numberoperations() {
			return GetRuleContext<NumberoperationsContext>(0);
		}
		public SecondnumberoperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondnumberoperations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterSecondnumberoperations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitSecondnumberoperations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecondnumberoperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SecondnumberoperationsContext secondnumberoperations() {
		SecondnumberoperationsContext _localctx = new SecondnumberoperationsContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_secondnumberoperations);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; Match(COMPARE);
			State = 249; numberoperations();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooloperationContext : ParserRuleContext {
		public NumberoperationsContext numberoperations() {
			return GetRuleContext<NumberoperationsContext>(0);
		}
		public SecondnumberoperationsContext secondnumberoperations() {
			return GetRuleContext<SecondnumberoperationsContext>(0);
		}
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public ITerminalNode ALIVE() { return GetToken(DynamicTrapParser.ALIVE, 0); }
		public ITerminalNode IN() { return GetToken(DynamicTrapParser.IN, 0); }
		public ITerminalNode RANGE_T() { return GetToken(DynamicTrapParser.RANGE_T, 0); }
		public BooloperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booloperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterBooloperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitBooloperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooloperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooloperationContext booloperation() {
		BooloperationContext _localctx = new BooloperationContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_booloperation);
		int _la;
		try {
			State = 262;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 251; numberoperations();
				State = 253;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMPARE) {
					{
					State = 252; secondnumberoperations();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 255; character();
				State = 256; Match(ALIVE);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 258; character();
				State = 259; Match(IN);
				State = 260; Match(RANGE_T);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SecondbooloperationContext : ParserRuleContext {
		public ITerminalNode EXPRESSIONCONNECTER() { return GetToken(DynamicTrapParser.EXPRESSIONCONNECTER, 0); }
		public BooloperationContext booloperation() {
			return GetRuleContext<BooloperationContext>(0);
		}
		public SecondbooloperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondbooloperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterSecondbooloperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitSecondbooloperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecondbooloperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SecondbooloperationContext secondbooloperation() {
		SecondbooloperationContext _localctx = new SecondbooloperationContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_secondbooloperation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264; Match(EXPRESSIONCONNECTER);
			State = 265; booloperation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolsconnectedContext : ParserRuleContext {
		public BooloperationContext booloperation() {
			return GetRuleContext<BooloperationContext>(0);
		}
		public SecondbooloperationContext[] secondbooloperation() {
			return GetRuleContexts<SecondbooloperationContext>();
		}
		public SecondbooloperationContext secondbooloperation(int i) {
			return GetRuleContext<SecondbooloperationContext>(i);
		}
		public BoolsconnectedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolsconnected; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterBoolsconnected(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitBoolsconnected(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolsconnected(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolsconnectedContext boolsconnected() {
		BoolsconnectedContext _localctx = new BoolsconnectedContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_boolsconnected);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267; booloperation();
			State = 271;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==EXPRESSIONCONNECTER) {
				{
				{
				State = 268; secondbooloperation();
				}
				}
				State = 273;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolexpressionContext : ParserRuleContext {
		public ITerminalNode PARENTHESISSTART() { return GetToken(DynamicTrapParser.PARENTHESISSTART, 0); }
		public BoolsconnectedContext boolsconnected() {
			return GetRuleContext<BoolsconnectedContext>(0);
		}
		public ITerminalNode PARENTHESISCLOSE() { return GetToken(DynamicTrapParser.PARENTHESISCLOSE, 0); }
		public BoolexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterBoolexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitBoolexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolexpressionContext boolexpression() {
		BoolexpressionContext _localctx = new BoolexpressionContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_boolexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; Match(PARENTHESISSTART);
			State = 275; boolsconnected();
			State = 276; Match(PARENTHESISCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PossibleAttributesContext : ParserRuleContext {
		public ITerminalNode HEALTH() { return GetToken(DynamicTrapParser.HEALTH, 0); }
		public ITerminalNode PLACE_T() { return GetToken(DynamicTrapParser.PLACE_T, 0); }
		public ITerminalNode RANGE_T() { return GetToken(DynamicTrapParser.RANGE_T, 0); }
		public ITerminalNode DAMAGE() { return GetToken(DynamicTrapParser.DAMAGE, 0); }
		public ITerminalNode HEAL() { return GetToken(DynamicTrapParser.HEAL, 0); }
		public PossibleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_possibleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterPossibleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitPossibleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPossibleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PossibleAttributesContext possibleAttributes() {
		PossibleAttributesContext _localctx = new PossibleAttributesContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_possibleAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DAMAGE) | (1L << PLACE_T) | (1L << HEALTH) | (1L << HEAL) | (1L << RANGE_T))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterAttributeContext : ParserRuleContext {
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public ITerminalNode ATTRIBUTE() { return GetToken(DynamicTrapParser.ATTRIBUTE, 0); }
		public PossibleAttributesContext possibleAttributes() {
			return GetRuleContext<PossibleAttributesContext>(0);
		}
		public CharacterAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characterAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterCharacterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitCharacterAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacterAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterAttributeContext characterAttribute() {
		CharacterAttributeContext _localctx = new CharacterAttributeContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_characterAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; character();
			State = 281; Match(ATTRIBUTE);
			State = 282; possibleAttributes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumholderContext : ParserRuleContext {
		public ITerminalNode ROUND() { return GetToken(DynamicTrapParser.ROUND, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicTrapParser.NUMBER, 0); }
		public CharacterAttributeContext characterAttribute() {
			return GetRuleContext<CharacterAttributeContext>(0);
		}
		public NumholderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numholder; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterNumholder(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitNumholder(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumholder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumholderContext numholder() {
		NumholderContext _localctx = new NumholderContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_numholder);
		try {
			State = 287;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ROUND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 284; Match(ROUND);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 285; Match(NUMBER);
				}
				break;
			case TRAP:
			case ME:
			case PLAYER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 286; characterAttribute();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceContext : ParserRuleContext {
		public XContext x() {
			return GetRuleContext<XContext>(0);
		}
		public YContext y() {
			return GetRuleContext<YContext>(0);
		}
		public PlaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_place; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterPlace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitPlace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceContext place() {
		PlaceContext _localctx = new PlaceContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_place);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289; x();
			State = 290; Match(COMMA);
			State = 291; y();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(DynamicTrapParser.NUMBER, 0); }
		public XContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_x; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterX(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitX(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitX(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XContext x() {
		XContext _localctx = new XContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_x);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(DynamicTrapParser.NUMBER, 0); }
		public YContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_y; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitY(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitY(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YContext y() {
		YContext _localctx = new YContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_y);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3(\x12C\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x3\x2\a\x2\x44\n\x2\f\x2\xE\x2G\v\x2\x3\x3\x3\x3\x3\x4\x3\x4\a\x4"+
		"M\n\x4\f\x4\xE\x4P\v\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x5\x5Z\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6{\n"+
		"\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x5\a\x9C\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x5\b\xA6\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xB1\n"+
		"\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\x3\n\x5\n\xC2\n\n\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r"+
		"\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\a\x12"+
		"\xE3\n\x12\f\x12\xE\x12\xE6\v\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3"+
		"\x14\x3\x14\x3\x15\x3\x15\a\x15\xF1\n\x15\f\x15\xE\x15\xF4\v\x15\x3\x15"+
		"\x5\x15\xF7\n\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x5"+
		"\x18\x100\n\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18"+
		"\x109\n\x18\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\a\x1A\x110\n\x1A\f\x1A"+
		"\xE\x1A\x113\v\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x122\n\x1E\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3!\x2\x2\x2\"\x2\x2\x4\x2\x6\x2\b\x2\n"+
		"\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2"+
		" \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:"+
		"\x2<\x2>\x2@\x2\x2\x4\x5\x2\a\a\n\n\x18\x18\x6\x2\x4\x4\xE\xE\x10\x10"+
		"\x15\x16\x133\x2\x45\x3\x2\x2\x2\x4H\x3\x2\x2\x2\x6J\x3\x2\x2\x2\bY\x3"+
		"\x2\x2\x2\nz\x3\x2\x2\x2\f\x9B\x3\x2\x2\x2\xE\xA5\x3\x2\x2\x2\x10\xB0"+
		"\x3\x2\x2\x2\x12\xC1\x3\x2\x2\x2\x14\xC3\x3\x2\x2\x2\x16\xC7\x3\x2\x2"+
		"\x2\x18\xCC\x3\x2\x2\x2\x1A\xD0\x3\x2\x2\x2\x1C\xD4\x3\x2\x2\x2\x1E\xD8"+
		"\x3\x2\x2\x2 \xDC\x3\x2\x2\x2\"\xE0\x3\x2\x2\x2$\xE9\x3\x2\x2\x2&\xEB"+
		"\x3\x2\x2\x2(\xF6\x3\x2\x2\x2*\xF8\x3\x2\x2\x2,\xFA\x3\x2\x2\x2.\x108"+
		"\x3\x2\x2\x2\x30\x10A\x3\x2\x2\x2\x32\x10D\x3\x2\x2\x2\x34\x114\x3\x2"+
		"\x2\x2\x36\x118\x3\x2\x2\x2\x38\x11A\x3\x2\x2\x2:\x121\x3\x2\x2\x2<\x123"+
		"\x3\x2\x2\x2>\x127\x3\x2\x2\x2@\x129\x3\x2\x2\x2\x42\x44\x5\x6\x4\x2\x43"+
		"\x42\x3\x2\x2\x2\x44G\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2\x45\x46\x3\x2\x2"+
		"\x2\x46\x3\x3\x2\x2\x2G\x45\x3\x2\x2\x2HI\a\'\x2\x2I\x5\x3\x2\x2\x2JN"+
		"\x5\x16\f\x2KM\x5\b\x5\x2LK\x3\x2\x2\x2MP\x3\x2\x2\x2NL\x3\x2\x2\x2NO"+
		"\x3\x2\x2\x2O\a\x3\x2\x2\x2PN\x3\x2\x2\x2QZ\x5\n\x6\x2RZ\x5\x14\v\x2S"+
		"Z\x5\x12\n\x2TZ\x5\x1E\x10\x2UZ\x5 \x11\x2VZ\x5\x18\r\x2WZ\x5\x1A\xE\x2"+
		"XZ\x5\x14\v\x2YQ\x3\x2\x2\x2YR\x3\x2\x2\x2YS\x3\x2\x2\x2YT\x3\x2\x2\x2"+
		"YU\x3\x2\x2\x2YV\x3\x2\x2\x2YW\x3\x2\x2\x2YX\x3\x2\x2\x2Z\t\x3\x2\x2\x2"+
		"[\\\a\x4\x2\x2\\{\a\x5\x2\x2]^\a\x4\x2\x2^_\a\x5\x2\x2_{\x5\x18\r\x2`"+
		"\x61\a\x4\x2\x2\x61\x62\a\x5\x2\x2\x62{\x5\x1C\xF\x2\x63\x64\a\x4\x2\x2"+
		"\x64\x65\a\x5\x2\x2\x65\x66\x5\x1C\xF\x2\x66g\x5\x18\r\x2g{\x3\x2\x2\x2"+
		"hi\a\x4\x2\x2i{\a\f\x2\x2jk\a\x4\x2\x2kl\a\r\x2\x2l{\x5<\x1F\x2mn\a\x4"+
		"\x2\x2no\a\r\x2\x2op\x5<\x1F\x2pq\x5\x18\r\x2q{\x3\x2\x2\x2rs\a\x4\x2"+
		"\x2st\a\r\x2\x2t{\x5*\x16\x2uv\a\x4\x2\x2vw\a\r\x2\x2wx\x5*\x16\x2xy\x5"+
		"\x18\r\x2y{\x3\x2\x2\x2z[\x3\x2\x2\x2z]\x3\x2\x2\x2z`\x3\x2\x2\x2z\x63"+
		"\x3\x2\x2\x2zh\x3\x2\x2\x2zj\x3\x2\x2\x2zm\x3\x2\x2\x2zr\x3\x2\x2\x2z"+
		"u\x3\x2\x2\x2{\v\x3\x2\x2\x2|}\a\x15\x2\x2}\x9C\a\x5\x2\x2~\x7F\a\x15"+
		"\x2\x2\x7F\x80\a\x5\x2\x2\x80\x9C\x5\x18\r\x2\x81\x82\a\x15\x2\x2\x82"+
		"\x83\a\x5\x2\x2\x83\x9C\x5\x1C\xF\x2\x84\x85\a\x15\x2\x2\x85\x86\a\x5"+
		"\x2\x2\x86\x87\x5\x1C\xF\x2\x87\x88\x5\x18\r\x2\x88\x9C\x3\x2\x2\x2\x89"+
		"\x8A\a\x15\x2\x2\x8A\x9C\a\f\x2\x2\x8B\x8C\a\x15\x2\x2\x8C\x8D\a\r\x2"+
		"\x2\x8D\x9C\x5<\x1F\x2\x8E\x8F\a\x15\x2\x2\x8F\x90\a\r\x2\x2\x90\x91\x5"+
		"<\x1F\x2\x91\x92\x5\x18\r\x2\x92\x9C\x3\x2\x2\x2\x93\x94\a\x15\x2\x2\x94"+
		"\x95\a\r\x2\x2\x95\x9C\x5*\x16\x2\x96\x97\a\x15\x2\x2\x97\x98\a\r\x2\x2"+
		"\x98\x99\x5*\x16\x2\x99\x9A\x5\x18\r\x2\x9A\x9C\x3\x2\x2\x2\x9B|\x3\x2"+
		"\x2\x2\x9B~\x3\x2\x2\x2\x9B\x81\x3\x2\x2\x2\x9B\x84\x3\x2\x2\x2\x9B\x89"+
		"\x3\x2\x2\x2\x9B\x8B\x3\x2\x2\x2\x9B\x8E\x3\x2\x2\x2\x9B\x93\x3\x2\x2"+
		"\x2\x9B\x96\x3\x2\x2\x2\x9C\r\x3\x2\x2\x2\x9D\x9E\a\x13\x2\x2\x9E\x9F"+
		"\a\b\x2\x2\x9F\xA0\x5\x4\x3\x2\xA0\xA1\a\r\x2\x2\xA1\xA2\x5<\x1F\x2\xA2"+
		"\xA6\x3\x2\x2\x2\xA3\xA4\a\x13\x2\x2\xA4\xA6\a\f\x2\x2\xA5\x9D\x3\x2\x2"+
		"\x2\xA5\xA3\x3\x2\x2\x2\xA6\xF\x3\x2\x2\x2\xA7\xA8\a\x14\x2\x2\xA8\xA9"+
		"\x5*\x16\x2\xA9\xAA\a\r\x2\x2\xAA\xAB\x5<\x1F\x2\xAB\xB1\x3\x2\x2\x2\xAC"+
		"\xAD\a\x14\x2\x2\xAD\xAE\x5*\x16\x2\xAE\xAF\a\f\x2\x2\xAF\xB1\x3\x2\x2"+
		"\x2\xB0\xA7\x3\x2\x2\x2\xB0\xAC\x3\x2\x2\x2\xB1\x11\x3\x2\x2\x2\xB2\xB3"+
		"\a\x12\x2\x2\xB3\xC2\a\x5\x2\x2\xB4\xB5\a\x12\x2\x2\xB5\xB6\a\r\x2\x2"+
		"\xB6\xC2\x5<\x1F\x2\xB7\xB8\a\x12\x2\x2\xB8\xB9\a\x5\x2\x2\xB9\xBA\a\""+
		"\x2\x2\xBA\xC2\x5\x1C\xF\x2\xBB\xBC\a\x12\x2\x2\xBC\xBD\a\r\x2\x2\xBD"+
		"\xC2\a\x18\x2\x2\xBE\xBF\a\x12\x2\x2\xBF\xC0\a\r\x2\x2\xC0\xC2\a\f\x2"+
		"\x2\xC1\xB2\x3\x2\x2\x2\xC1\xB4\x3\x2\x2\x2\xC1\xB7\x3\x2\x2\x2\xC1\xBB"+
		"\x3\x2\x2\x2\xC1\xBE\x3\x2\x2\x2\xC2\x13\x3\x2\x2\x2\xC3\xC4\a\x16\x2"+
		"\x2\xC4\xC5\a\"\x2\x2\xC5\xC6\a&\x2\x2\xC6\x15\x3\x2\x2\x2\xC7\xC8\a\x17"+
		"\x2\x2\xC8\xC9\a\"\x2\x2\xC9\xCA\x5\x4\x3\x2\xCA\xCB\a#\x2\x2\xCB\x17"+
		"\x3\x2\x2\x2\xCC\xCD\a\x4\x2\x2\xCD\xCE\a\"\x2\x2\xCE\xCF\a&\x2\x2\xCF"+
		"\x19\x3\x2\x2\x2\xD0\xD1\a\x15\x2\x2\xD1\xD2\a\"\x2\x2\xD2\xD3\a&\x2\x2"+
		"\xD3\x1B\x3\x2\x2\x2\xD4\xD5\a\x3\x2\x2\xD5\xD6\a\"\x2\x2\xD6\xD7\a&\x2"+
		"\x2\xD7\x1D\x3\x2\x2\x2\xD8\xD9\a\v\x2\x2\xD9\xDA\x5\x34\x1B\x2\xDA\xDB"+
		"\x5\"\x12\x2\xDB\x1F\x3\x2\x2\x2\xDC\xDD\a\xF\x2\x2\xDD\xDE\x5\x34\x1B"+
		"\x2\xDE\xDF\x5\"\x12\x2\xDF!\x3\x2\x2\x2\xE0\xE4\a \x2\x2\xE1\xE3\x5\b"+
		"\x5\x2\xE2\xE1\x3\x2\x2\x2\xE3\xE6\x3\x2\x2\x2\xE4\xE2\x3\x2\x2\x2\xE4"+
		"\xE5\x3\x2\x2\x2\xE5\xE7\x3\x2\x2\x2\xE6\xE4\x3\x2\x2\x2\xE7\xE8\a \x2"+
		"\x2\xE8#\x3\x2\x2\x2\xE9\xEA\x5:\x1E\x2\xEA%\x3\x2\x2\x2\xEB\xEC\a\x1D"+
		"\x2\x2\xEC\xED\x5:\x1E\x2\xED\'\x3\x2\x2\x2\xEE\xF2\x5:\x1E\x2\xEF\xF1"+
		"\x5&\x14\x2\xF0\xEF\x3\x2\x2\x2\xF1\xF4\x3\x2\x2\x2\xF2\xF0\x3\x2\x2\x2"+
		"\xF2\xF3\x3\x2\x2\x2\xF3\xF7\x3\x2\x2\x2\xF4\xF2\x3\x2\x2\x2\xF5\xF7\x5"+
		":\x1E\x2\xF6\xEE\x3\x2\x2\x2\xF6\xF5\x3\x2\x2\x2\xF7)\x3\x2\x2\x2\xF8"+
		"\xF9\t\x2\x2\x2\xF9+\x3\x2\x2\x2\xFA\xFB\a\x1C\x2\x2\xFB\xFC\x5(\x15\x2"+
		"\xFC-\x3\x2\x2\x2\xFD\xFF\x5(\x15\x2\xFE\x100\x5,\x17\x2\xFF\xFE\x3\x2"+
		"\x2\x2\xFF\x100\x3\x2\x2\x2\x100\x109\x3\x2\x2\x2\x101\x102\x5*\x16\x2"+
		"\x102\x103\a\x11\x2\x2\x103\x109\x3\x2\x2\x2\x104\x105\x5*\x16\x2\x105"+
		"\x106\a\x6\x2\x2\x106\x107\a\x16\x2\x2\x107\x109\x3\x2\x2\x2\x108\xFD"+
		"\x3\x2\x2\x2\x108\x101\x3\x2\x2\x2\x108\x104\x3\x2\x2\x2\x109/\x3\x2\x2"+
		"\x2\x10A\x10B\a\x1B\x2\x2\x10B\x10C\x5.\x18\x2\x10C\x31\x3\x2\x2\x2\x10D"+
		"\x111\x5.\x18\x2\x10E\x110\x5\x30\x19\x2\x10F\x10E\x3\x2\x2\x2\x110\x113"+
		"\x3\x2\x2\x2\x111\x10F\x3\x2\x2\x2\x111\x112\x3\x2\x2\x2\x112\x33\x3\x2"+
		"\x2\x2\x113\x111\x3\x2\x2\x2\x114\x115\a\x1E\x2\x2\x115\x116\x5\x32\x1A"+
		"\x2\x116\x117\a\x1F\x2\x2\x117\x35\x3\x2\x2\x2\x118\x119\t\x3\x2\x2\x119"+
		"\x37\x3\x2\x2\x2\x11A\x11B\x5*\x16\x2\x11B\x11C\a$\x2\x2\x11C\x11D\x5"+
		"\x36\x1C\x2\x11D\x39\x3\x2\x2\x2\x11E\x122\a\t\x2\x2\x11F\x122\a&\x2\x2"+
		"\x120\x122\x5\x38\x1D\x2\x121\x11E\x3\x2\x2\x2\x121\x11F\x3\x2\x2\x2\x121"+
		"\x120\x3\x2\x2\x2\x122;\x3\x2\x2\x2\x123\x124\x5> \x2\x124\x125\a%\x2"+
		"\x2\x125\x126\x5@!\x2\x126=\x3\x2\x2\x2\x127\x128\a&\x2\x2\x128?\x3\x2"+
		"\x2\x2\x129\x12A\a&\x2\x2\x12A\x41\x3\x2\x2\x2\x11\x45NYz\x9B\xA5\xB0"+
		"\xC1\xE4\xF2\xF6\xFF\x108\x111\x121";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LabWork1github
