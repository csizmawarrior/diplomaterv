//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Dana\source\repos\LabWork1github\LabWork1github\DynamicTrap.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LabWork1github {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DynamicTrapParser : Parser {
	public const int
		DISTANCE=1, DAMAGE=2, DIRECTION=3, IN=4, TRAP=5, MONSTER=6, ROUND=7, ME=8, 
		IF=9, RANDOM=10, TO=11, PLACE_T=12, NEAR=13, IS=14, ON=15, WHILE=16, HEALTH=17, 
		ALIVE=18, MOVE=19, SPAWN=20, TELEPORT_T=21, HEAL=22, NAME_T=23, PLAYER=24, 
		EFFECT_T=25, EQUALS=26, ABSOLUTE=27, EXPRESSIONCONNECTER=28, COMPARE=29, 
		NUMOPERATION=30, PARENTHESISSTART=31, PARENTHESISCLOSE=32, BRACKETCLOSE=33, 
		BRACKETSTART=34, COLON=35, SEMI=36, ATTRIBUTE=37, COMMA=38, NUMBER=39, 
		ID=40, WS=41, X=42, Y=43, NEGATE=44, NOTHING=45, NUMCONNECTER=46, BOOLCONNECTER=47;
	public const int
		RULE_definition = 0, RULE_name = 1, RULE_statementList = 2, RULE_statement = 3, 
		RULE_damageDeclaration = 4, RULE_healDeclaration = 5, RULE_spawnDeclaration = 6, 
		RULE_teleport = 7, RULE_moveDeclaration = 8, RULE_nameDeclaration = 9, 
		RULE_damageDeclare = 10, RULE_healDeclare = 11, RULE_distanceDeclare = 12, 
		RULE_ifexpression = 13, RULE_whileexpression = 14, RULE_block = 15, RULE_character = 16, 
		RULE_possibleAttributes = 17, RULE_place = 18, RULE_x = 19, RULE_y = 20, 
		RULE_expression = 21, RULE_something = 22, RULE_operation = 23;
	public static readonly string[] ruleNames = {
		"definition", "name", "statementList", "statement", "damageDeclaration", 
		"healDeclaration", "spawnDeclaration", "teleport", "moveDeclaration", 
		"nameDeclaration", "damageDeclare", "healDeclare", "distanceDeclare", 
		"ifexpression", "whileexpression", "block", "character", "possibleAttributes", 
		"place", "x", "y", "expression", "something", "operation"
	};

	private static readonly string[] _LiteralNames = {
		null, "'distance'", "'damage'", null, "'in'", "'trap'", "'monster'", "'round'", 
		"'me'", "'if'", "'random'", "'to'", "'place'", "'near'", "'is'", "'ON'", 
		"'while'", "'HP'", "'alive'", "'move'", "'spawn'", "'teleport'", "'heal'", 
		"'name'", "'player'", "'effect'", "'='", "'|'", null, null, null, "'('", 
		"')'", "'}'", "'{'", "':'", "';'", "'.'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DISTANCE", "DAMAGE", "DIRECTION", "IN", "TRAP", "MONSTER", "ROUND", 
		"ME", "IF", "RANDOM", "TO", "PLACE_T", "NEAR", "IS", "ON", "WHILE", "HEALTH", 
		"ALIVE", "MOVE", "SPAWN", "TELEPORT_T", "HEAL", "NAME_T", "PLAYER", "EFFECT_T", 
		"EQUALS", "ABSOLUTE", "EXPRESSIONCONNECTER", "COMPARE", "NUMOPERATION", 
		"PARENTHESISSTART", "PARENTHESISCLOSE", "BRACKETCLOSE", "BRACKETSTART", 
		"COLON", "SEMI", "ATTRIBUTE", "COMMA", "NUMBER", "ID", "WS", "X", "Y", 
		"NEGATE", "NOTHING", "NUMCONNECTER", "BOOLCONNECTER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DynamicTrap.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public DynamicTrapParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DefinitionContext : ParserRuleContext {
		public StatementListContext[] statementList() {
			return GetRuleContexts<StatementListContext>();
		}
		public StatementListContext statementList(int i) {
			return GetRuleContext<StatementListContext>(i);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NAME_T) {
				{
				{
				State = 48; statementList();
				}
				}
				State = 53;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(DynamicTrapParser.ID, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public NameDeclarationContext nameDeclaration() {
			return GetRuleContext<NameDeclarationContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; nameDeclaration();
			State = 60;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DAMAGE) | (1L << IF) | (1L << WHILE) | (1L << MOVE) | (1L << HEAL))) != 0)) {
				{
				{
				State = 57; statement();
				}
				}
				State = 62;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DamageDeclarationContext damageDeclaration() {
			return GetRuleContext<DamageDeclarationContext>(0);
		}
		public MoveDeclarationContext moveDeclaration() {
			return GetRuleContext<MoveDeclarationContext>(0);
		}
		public IfexpressionContext ifexpression() {
			return GetRuleContext<IfexpressionContext>(0);
		}
		public WhileexpressionContext whileexpression() {
			return GetRuleContext<WhileexpressionContext>(0);
		}
		public DamageDeclareContext damageDeclare() {
			return GetRuleContext<DamageDeclareContext>(0);
		}
		public HealDeclareContext healDeclare() {
			return GetRuleContext<HealDeclareContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 81;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 63; damageDeclaration();
				State = 64; Match(SEMI);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 66; moveDeclaration();
				State = 67; Match(SEMI);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 69; ifexpression();
				State = 70; Match(SEMI);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 72; whileexpression();
				State = 73; Match(SEMI);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 75; damageDeclare();
				State = 76; Match(SEMI);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 78; healDeclare();
				State = 79; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DamageDeclarationContext : ParserRuleContext {
		public ITerminalNode DAMAGE() { return GetToken(DynamicTrapParser.DAMAGE, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DynamicTrapParser.DIRECTION, 0); }
		public DamageDeclareContext damageDeclare() {
			return GetRuleContext<DamageDeclareContext>(0);
		}
		public DistanceDeclareContext distanceDeclare() {
			return GetRuleContext<DistanceDeclareContext>(0);
		}
		public ITerminalNode RANDOM() { return GetToken(DynamicTrapParser.RANDOM, 0); }
		public ITerminalNode TO() { return GetToken(DynamicTrapParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public DamageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_damageDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterDamageDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitDamageDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDamageDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DamageDeclarationContext damageDeclaration() {
		DamageDeclarationContext _localctx = new DamageDeclarationContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_damageDeclaration);
		try {
			State = 114;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83; Match(DAMAGE);
				State = 84; Match(DIRECTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 85; Match(DAMAGE);
				State = 86; Match(DIRECTION);
				State = 87; damageDeclare();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 88; Match(DAMAGE);
				State = 89; Match(DIRECTION);
				State = 90; distanceDeclare();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 91; Match(DAMAGE);
				State = 92; Match(DIRECTION);
				State = 93; distanceDeclare();
				State = 94; damageDeclare();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 96; Match(DAMAGE);
				State = 97; Match(RANDOM);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 98; Match(DAMAGE);
				State = 99; Match(TO);
				State = 100; place();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 101; Match(DAMAGE);
				State = 102; Match(TO);
				State = 103; place();
				State = 104; damageDeclare();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 106; Match(DAMAGE);
				State = 107; Match(TO);
				State = 108; character();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 109; Match(DAMAGE);
				State = 110; Match(TO);
				State = 111; character();
				State = 112; damageDeclare();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HealDeclarationContext : ParserRuleContext {
		public ITerminalNode HEAL() { return GetToken(DynamicTrapParser.HEAL, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DynamicTrapParser.DIRECTION, 0); }
		public HealDeclareContext healDeclare() {
			return GetRuleContext<HealDeclareContext>(0);
		}
		public DistanceDeclareContext distanceDeclare() {
			return GetRuleContext<DistanceDeclareContext>(0);
		}
		public ITerminalNode RANDOM() { return GetToken(DynamicTrapParser.RANDOM, 0); }
		public ITerminalNode TO() { return GetToken(DynamicTrapParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public HealDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_healDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterHealDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitHealDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHealDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HealDeclarationContext healDeclaration() {
		HealDeclarationContext _localctx = new HealDeclarationContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_healDeclaration);
		try {
			State = 147;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 116; Match(HEAL);
				State = 117; Match(DIRECTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 118; Match(HEAL);
				State = 119; Match(DIRECTION);
				State = 120; healDeclare();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 121; Match(HEAL);
				State = 122; Match(DIRECTION);
				State = 123; distanceDeclare();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 124; Match(HEAL);
				State = 125; Match(DIRECTION);
				State = 126; distanceDeclare();
				State = 127; healDeclare();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 129; Match(HEAL);
				State = 130; Match(RANDOM);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 131; Match(HEAL);
				State = 132; Match(TO);
				State = 133; place();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 134; Match(HEAL);
				State = 135; Match(TO);
				State = 136; place();
				State = 137; healDeclare();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 139; Match(HEAL);
				State = 140; Match(TO);
				State = 141; character();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 142; Match(HEAL);
				State = 143; Match(TO);
				State = 144; character();
				State = 145; healDeclare();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpawnDeclarationContext : ParserRuleContext {
		public ITerminalNode SPAWN() { return GetToken(DynamicTrapParser.SPAWN, 0); }
		public ITerminalNode MONSTER() { return GetToken(DynamicTrapParser.MONSTER, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TO() { return GetToken(DynamicTrapParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public ITerminalNode RANDOM() { return GetToken(DynamicTrapParser.RANDOM, 0); }
		public SpawnDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spawnDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterSpawnDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitSpawnDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpawnDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpawnDeclarationContext spawnDeclaration() {
		SpawnDeclarationContext _localctx = new SpawnDeclarationContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_spawnDeclaration);
		try {
			State = 157;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 149; Match(SPAWN);
				State = 150; Match(MONSTER);
				State = 151; name();
				State = 152; Match(TO);
				State = 153; place();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 155; Match(SPAWN);
				State = 156; Match(RANDOM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeleportContext : ParserRuleContext {
		public ITerminalNode TELEPORT_T() { return GetToken(DynamicTrapParser.TELEPORT_T, 0); }
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public ITerminalNode TO() { return GetToken(DynamicTrapParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public ITerminalNode RANDOM() { return GetToken(DynamicTrapParser.RANDOM, 0); }
		public TeleportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teleport; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterTeleport(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitTeleport(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTeleport(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TeleportContext teleport() {
		TeleportContext _localctx = new TeleportContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_teleport);
		try {
			State = 168;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 159; Match(TELEPORT_T);
				State = 160; character();
				State = 161; Match(TO);
				State = 162; place();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 164; Match(TELEPORT_T);
				State = 165; character();
				State = 166; Match(RANDOM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveDeclarationContext : ParserRuleContext {
		public ITerminalNode MOVE() { return GetToken(DynamicTrapParser.MOVE, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DynamicTrapParser.DIRECTION, 0); }
		public ITerminalNode TO() { return GetToken(DynamicTrapParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public DistanceDeclareContext distanceDeclare() {
			return GetRuleContext<DistanceDeclareContext>(0);
		}
		public ITerminalNode PLAYER() { return GetToken(DynamicTrapParser.PLAYER, 0); }
		public ITerminalNode RANDOM() { return GetToken(DynamicTrapParser.RANDOM, 0); }
		public MoveDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterMoveDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitMoveDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoveDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveDeclarationContext moveDeclaration() {
		MoveDeclarationContext _localctx = new MoveDeclarationContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_moveDeclaration);
		try {
			State = 184;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 170; Match(MOVE);
				State = 171; Match(DIRECTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 172; Match(MOVE);
				State = 173; Match(TO);
				State = 174; place();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 175; Match(MOVE);
				State = 176; Match(DIRECTION);
				State = 177; distanceDeclare();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 178; Match(MOVE);
				State = 179; Match(TO);
				State = 180; Match(PLAYER);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 181; Match(MOVE);
				State = 182; Match(TO);
				State = 183; Match(RANDOM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameDeclarationContext : ParserRuleContext {
		public ITerminalNode NAME_T() { return GetToken(DynamicTrapParser.NAME_T, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicTrapParser.EQUALS, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NameDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterNameDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitNameDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameDeclarationContext nameDeclaration() {
		NameDeclarationContext _localctx = new NameDeclarationContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_nameDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; Match(NAME_T);
			State = 187; Match(EQUALS);
			State = 188; name();
			State = 189; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DamageDeclareContext : ParserRuleContext {
		public ITerminalNode DAMAGE() { return GetToken(DynamicTrapParser.DAMAGE, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicTrapParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicTrapParser.NUMBER, 0); }
		public DamageDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_damageDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterDamageDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitDamageDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDamageDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DamageDeclareContext damageDeclare() {
		DamageDeclareContext _localctx = new DamageDeclareContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_damageDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(DAMAGE);
			State = 192; Match(EQUALS);
			State = 193; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HealDeclareContext : ParserRuleContext {
		public ITerminalNode HEAL() { return GetToken(DynamicTrapParser.HEAL, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicTrapParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicTrapParser.NUMBER, 0); }
		public HealDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_healDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterHealDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitHealDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHealDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HealDeclareContext healDeclare() {
		HealDeclareContext _localctx = new HealDeclareContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_healDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; Match(HEAL);
			State = 196; Match(EQUALS);
			State = 197; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistanceDeclareContext : ParserRuleContext {
		public ITerminalNode DISTANCE() { return GetToken(DynamicTrapParser.DISTANCE, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicTrapParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicTrapParser.NUMBER, 0); }
		public DistanceDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distanceDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterDistanceDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitDistanceDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDistanceDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DistanceDeclareContext distanceDeclare() {
		DistanceDeclareContext _localctx = new DistanceDeclareContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_distanceDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; Match(DISTANCE);
			State = 200; Match(EQUALS);
			State = 201; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfexpressionContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(DynamicTrapParser.IF, 0); }
		public ITerminalNode PARENTHESISSTART() { return GetToken(DynamicTrapParser.PARENTHESISSTART, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PARENTHESISCLOSE() { return GetToken(DynamicTrapParser.PARENTHESISCLOSE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterIfexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitIfexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfexpressionContext ifexpression() {
		IfexpressionContext _localctx = new IfexpressionContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_ifexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; Match(IF);
			State = 204; Match(PARENTHESISSTART);
			State = 205; expression(0);
			State = 206; Match(PARENTHESISCLOSE);
			State = 207; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileexpressionContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(DynamicTrapParser.WHILE, 0); }
		public ITerminalNode PARENTHESISSTART() { return GetToken(DynamicTrapParser.PARENTHESISSTART, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PARENTHESISCLOSE() { return GetToken(DynamicTrapParser.PARENTHESISCLOSE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterWhileexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitWhileexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileexpressionContext whileexpression() {
		WhileexpressionContext _localctx = new WhileexpressionContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_whileexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; Match(WHILE);
			State = 210; Match(PARENTHESISSTART);
			State = 211; expression(0);
			State = 212; Match(PARENTHESISCLOSE);
			State = 213; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode[] BRACKETCLOSE() { return GetTokens(DynamicTrapParser.BRACKETCLOSE); }
		public ITerminalNode BRACKETCLOSE(int i) {
			return GetToken(DynamicTrapParser.BRACKETCLOSE, i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(BRACKETCLOSE);
			State = 219;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DAMAGE) | (1L << IF) | (1L << WHILE) | (1L << MOVE) | (1L << HEAL))) != 0)) {
				{
				{
				State = 216; statement();
				}
				}
				State = 221;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 222; Match(BRACKETCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterContext : ParserRuleContext {
		public ITerminalNode PLAYER() { return GetToken(DynamicTrapParser.PLAYER, 0); }
		public ITerminalNode ME() { return GetToken(DynamicTrapParser.ME, 0); }
		public ITerminalNode MONSTER() { return GetToken(DynamicTrapParser.MONSTER, 0); }
		public ITerminalNode TRAP() { return GetToken(DynamicTrapParser.TRAP, 0); }
		public CharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterCharacter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitCharacter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterContext character() {
		CharacterContext _localctx = new CharacterContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_character);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRAP) | (1L << MONSTER) | (1L << ME) | (1L << PLAYER))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PossibleAttributesContext : ParserRuleContext {
		public ITerminalNode HEALTH() { return GetToken(DynamicTrapParser.HEALTH, 0); }
		public ITerminalNode PLACE_T() { return GetToken(DynamicTrapParser.PLACE_T, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(DynamicTrapParser.ATTRIBUTE, 0); }
		public ITerminalNode X() { return GetToken(DynamicTrapParser.X, 0); }
		public ITerminalNode Y() { return GetToken(DynamicTrapParser.Y, 0); }
		public ITerminalNode DAMAGE() { return GetToken(DynamicTrapParser.DAMAGE, 0); }
		public ITerminalNode HEAL() { return GetToken(DynamicTrapParser.HEAL, 0); }
		public PossibleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_possibleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterPossibleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitPossibleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPossibleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PossibleAttributesContext possibleAttributes() {
		PossibleAttributesContext _localctx = new PossibleAttributesContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_possibleAttributes);
		try {
			State = 235;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 226; Match(HEALTH);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 227; Match(PLACE_T);
				State = 228; Match(ATTRIBUTE);
				State = 229; Match(X);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 230; Match(PLACE_T);
				State = 231; Match(ATTRIBUTE);
				State = 232; Match(Y);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 233; Match(DAMAGE);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 234; Match(HEAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceContext : ParserRuleContext {
		public XContext x() {
			return GetRuleContext<XContext>(0);
		}
		public YContext y() {
			return GetRuleContext<YContext>(0);
		}
		public PlaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_place; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterPlace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitPlace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceContext place() {
		PlaceContext _localctx = new PlaceContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_place);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; x();
			State = 238; Match(COMMA);
			State = 239; y();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(DynamicTrapParser.NUMBER, 0); }
		public XContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_x; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterX(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitX(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitX(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XContext x() {
		XContext _localctx = new XContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_x);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(DynamicTrapParser.NUMBER, 0); }
		public YContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_y; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitY(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitY(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YContext y() {
		YContext _localctx = new YContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_y);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public ITerminalNode PARENTHESISSTART() { return GetToken(DynamicTrapParser.PARENTHESISSTART, 0); }
		public ITerminalNode PARENTHESISCLOSE() { return GetToken(DynamicTrapParser.PARENTHESISCLOSE, 0); }
		public ITerminalNode[] ABSOLUTE() { return GetTokens(DynamicTrapParser.ABSOLUTE); }
		public ITerminalNode ABSOLUTE(int i) {
			return GetToken(DynamicTrapParser.ABSOLUTE, i);
		}
		public SomethingContext something() {
			return GetRuleContext<SomethingContext>(0);
		}
		public ITerminalNode NEGATE() { return GetToken(DynamicTrapParser.NEGATE, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case PARENTHESISSTART:
				{
				State = 246; Match(PARENTHESISSTART);
				State = 247; expression(0);
				State = 248; Match(PARENTHESISCLOSE);
				}
				break;
			case ABSOLUTE:
				{
				State = 250; Match(ABSOLUTE);
				State = 251; expression(0);
				State = 252; Match(ABSOLUTE);
				}
				break;
			case DAMAGE:
			case TRAP:
			case MONSTER:
			case ROUND:
			case ME:
			case PLACE_T:
			case HEALTH:
			case HEAL:
			case PLAYER:
			case NUMBER:
			case NOTHING:
				{
				State = 254; something();
				}
				break;
			case NEGATE:
				{
				State = 255; Match(NEGATE);
				State = 256; expression(1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 265;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 259;
					if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
					State = 260; operation();
					State = 261; expression(6);
					}
					} 
				}
				State = 267;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SomethingContext : ParserRuleContext {
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public ITerminalNode NUMBER() { return GetToken(DynamicTrapParser.NUMBER, 0); }
		public ITerminalNode ROUND() { return GetToken(DynamicTrapParser.ROUND, 0); }
		public PossibleAttributesContext possibleAttributes() {
			return GetRuleContext<PossibleAttributesContext>(0);
		}
		public ITerminalNode NOTHING() { return GetToken(DynamicTrapParser.NOTHING, 0); }
		public SomethingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_something; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterSomething(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitSomething(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSomething(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SomethingContext something() {
		SomethingContext _localctx = new SomethingContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_something);
		try {
			State = 273;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TRAP:
			case MONSTER:
			case ME:
			case PLAYER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268; character();
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 269; Match(NUMBER);
				}
				break;
			case ROUND:
				EnterOuterAlt(_localctx, 3);
				{
				State = 270; Match(ROUND);
				}
				break;
			case DAMAGE:
			case PLACE_T:
			case HEALTH:
			case HEAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 271; possibleAttributes();
				}
				break;
			case NOTHING:
				EnterOuterAlt(_localctx, 5);
				{
				State = 272; Match(NOTHING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public ITerminalNode ATTRIBUTE() { return GetToken(DynamicTrapParser.ATTRIBUTE, 0); }
		public ITerminalNode NUMCONNECTER() { return GetToken(DynamicTrapParser.NUMCONNECTER, 0); }
		public ITerminalNode BOOLCONNECTER() { return GetToken(DynamicTrapParser.BOOLCONNECTER, 0); }
		public ITerminalNode COMPARE() { return GetToken(DynamicTrapParser.COMPARE, 0); }
		public ITerminalNode ALIVE() { return GetToken(DynamicTrapParser.ALIVE, 0); }
		public ITerminalNode IS() { return GetToken(DynamicTrapParser.IS, 0); }
		public ITerminalNode NEAR() { return GetToken(DynamicTrapParser.NEAR, 0); }
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_operation);
		try {
			State = 282;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ATTRIBUTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 275; Match(ATTRIBUTE);
				}
				break;
			case NUMCONNECTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 276; Match(NUMCONNECTER);
				}
				break;
			case BOOLCONNECTER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 277; Match(BOOLCONNECTER);
				}
				break;
			case COMPARE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 278; Match(COMPARE);
				}
				break;
			case ALIVE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 279; Match(ALIVE);
				}
				break;
			case IS:
				EnterOuterAlt(_localctx, 6);
				{
				State = 280; Match(IS);
				State = 281; Match(NEAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 21: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x31\x11F\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x3\x2\a\x2\x34\n"+
		"\x2\f\x2\xE\x2\x37\v\x2\x3\x3\x3\x3\x3\x4\x3\x4\a\x4=\n\x4\f\x4\xE\x4"+
		"@\v\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5T\n\x5\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6u\n\x6\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x96"+
		"\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\xA0\n\b\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xAB\n\t\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\xBB\n\n\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x11\x3\x11\a\x11\xDC\n\x11\f\x11\xE\x11\xDF\v\x11\x3"+
		"\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x5\x13\xEE\n\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15"+
		"\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x104\n\x17\x3\x17\x3\x17\x3"+
		"\x17\x3\x17\a\x17\x10A\n\x17\f\x17\xE\x17\x10D\v\x17\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x5\x18\x114\n\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\x5\x19\x11D\n\x19\x3\x19\x2\x2\x3,\x1A\x2\x2\x4\x2\x6\x2"+
		"\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2"+
		"\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x2\x3\x5\x2\a\b\n\n\x1A"+
		"\x1A\x135\x2\x35\x3\x2\x2\x2\x4\x38\x3\x2\x2\x2\x6:\x3\x2\x2\x2\bS\x3"+
		"\x2\x2\x2\nt\x3\x2\x2\x2\f\x95\x3\x2\x2\x2\xE\x9F\x3\x2\x2\x2\x10\xAA"+
		"\x3\x2\x2\x2\x12\xBA\x3\x2\x2\x2\x14\xBC\x3\x2\x2\x2\x16\xC1\x3\x2\x2"+
		"\x2\x18\xC5\x3\x2\x2\x2\x1A\xC9\x3\x2\x2\x2\x1C\xCD\x3\x2\x2\x2\x1E\xD3"+
		"\x3\x2\x2\x2 \xD9\x3\x2\x2\x2\"\xE2\x3\x2\x2\x2$\xED\x3\x2\x2\x2&\xEF"+
		"\x3\x2\x2\x2(\xF3\x3\x2\x2\x2*\xF5\x3\x2\x2\x2,\x103\x3\x2\x2\x2.\x113"+
		"\x3\x2\x2\x2\x30\x11C\x3\x2\x2\x2\x32\x34\x5\x6\x4\x2\x33\x32\x3\x2\x2"+
		"\x2\x34\x37\x3\x2\x2\x2\x35\x33\x3\x2\x2\x2\x35\x36\x3\x2\x2\x2\x36\x3"+
		"\x3\x2\x2\x2\x37\x35\x3\x2\x2\x2\x38\x39\a*\x2\x2\x39\x5\x3\x2\x2\x2:"+
		">\x5\x14\v\x2;=\x5\b\x5\x2<;\x3\x2\x2\x2=@\x3\x2\x2\x2><\x3\x2\x2\x2>"+
		"?\x3\x2\x2\x2?\a\x3\x2\x2\x2@>\x3\x2\x2\x2\x41\x42\x5\n\x6\x2\x42\x43"+
		"\a&\x2\x2\x43T\x3\x2\x2\x2\x44\x45\x5\x12\n\x2\x45\x46\a&\x2\x2\x46T\x3"+
		"\x2\x2\x2GH\x5\x1C\xF\x2HI\a&\x2\x2IT\x3\x2\x2\x2JK\x5\x1E\x10\x2KL\a"+
		"&\x2\x2LT\x3\x2\x2\x2MN\x5\x16\f\x2NO\a&\x2\x2OT\x3\x2\x2\x2PQ\x5\x18"+
		"\r\x2QR\a&\x2\x2RT\x3\x2\x2\x2S\x41\x3\x2\x2\x2S\x44\x3\x2\x2\x2SG\x3"+
		"\x2\x2\x2SJ\x3\x2\x2\x2SM\x3\x2\x2\x2SP\x3\x2\x2\x2T\t\x3\x2\x2\x2UV\a"+
		"\x4\x2\x2Vu\a\x5\x2\x2WX\a\x4\x2\x2XY\a\x5\x2\x2Yu\x5\x16\f\x2Z[\a\x4"+
		"\x2\x2[\\\a\x5\x2\x2\\u\x5\x1A\xE\x2]^\a\x4\x2\x2^_\a\x5\x2\x2_`\x5\x1A"+
		"\xE\x2`\x61\x5\x16\f\x2\x61u\x3\x2\x2\x2\x62\x63\a\x4\x2\x2\x63u\a\f\x2"+
		"\x2\x64\x65\a\x4\x2\x2\x65\x66\a\r\x2\x2\x66u\x5&\x14\x2gh\a\x4\x2\x2"+
		"hi\a\r\x2\x2ij\x5&\x14\x2jk\x5\x16\f\x2ku\x3\x2\x2\x2lm\a\x4\x2\x2mn\a"+
		"\r\x2\x2nu\x5\"\x12\x2op\a\x4\x2\x2pq\a\r\x2\x2qr\x5\"\x12\x2rs\x5\x16"+
		"\f\x2su\x3\x2\x2\x2tU\x3\x2\x2\x2tW\x3\x2\x2\x2tZ\x3\x2\x2\x2t]\x3\x2"+
		"\x2\x2t\x62\x3\x2\x2\x2t\x64\x3\x2\x2\x2tg\x3\x2\x2\x2tl\x3\x2\x2\x2t"+
		"o\x3\x2\x2\x2u\v\x3\x2\x2\x2vw\a\x18\x2\x2w\x96\a\x5\x2\x2xy\a\x18\x2"+
		"\x2yz\a\x5\x2\x2z\x96\x5\x18\r\x2{|\a\x18\x2\x2|}\a\x5\x2\x2}\x96\x5\x1A"+
		"\xE\x2~\x7F\a\x18\x2\x2\x7F\x80\a\x5\x2\x2\x80\x81\x5\x1A\xE\x2\x81\x82"+
		"\x5\x18\r\x2\x82\x96\x3\x2\x2\x2\x83\x84\a\x18\x2\x2\x84\x96\a\f\x2\x2"+
		"\x85\x86\a\x18\x2\x2\x86\x87\a\r\x2\x2\x87\x96\x5&\x14\x2\x88\x89\a\x18"+
		"\x2\x2\x89\x8A\a\r\x2\x2\x8A\x8B\x5&\x14\x2\x8B\x8C\x5\x18\r\x2\x8C\x96"+
		"\x3\x2\x2\x2\x8D\x8E\a\x18\x2\x2\x8E\x8F\a\r\x2\x2\x8F\x96\x5\"\x12\x2"+
		"\x90\x91\a\x18\x2\x2\x91\x92\a\r\x2\x2\x92\x93\x5\"\x12\x2\x93\x94\x5"+
		"\x18\r\x2\x94\x96\x3\x2\x2\x2\x95v\x3\x2\x2\x2\x95x\x3\x2\x2\x2\x95{\x3"+
		"\x2\x2\x2\x95~\x3\x2\x2\x2\x95\x83\x3\x2\x2\x2\x95\x85\x3\x2\x2\x2\x95"+
		"\x88\x3\x2\x2\x2\x95\x8D\x3\x2\x2\x2\x95\x90\x3\x2\x2\x2\x96\r\x3\x2\x2"+
		"\x2\x97\x98\a\x16\x2\x2\x98\x99\a\b\x2\x2\x99\x9A\x5\x4\x3\x2\x9A\x9B"+
		"\a\r\x2\x2\x9B\x9C\x5&\x14\x2\x9C\xA0\x3\x2\x2\x2\x9D\x9E\a\x16\x2\x2"+
		"\x9E\xA0\a\f\x2\x2\x9F\x97\x3\x2\x2\x2\x9F\x9D\x3\x2\x2\x2\xA0\xF\x3\x2"+
		"\x2\x2\xA1\xA2\a\x17\x2\x2\xA2\xA3\x5\"\x12\x2\xA3\xA4\a\r\x2\x2\xA4\xA5"+
		"\x5&\x14\x2\xA5\xAB\x3\x2\x2\x2\xA6\xA7\a\x17\x2\x2\xA7\xA8\x5\"\x12\x2"+
		"\xA8\xA9\a\f\x2\x2\xA9\xAB\x3\x2\x2\x2\xAA\xA1\x3\x2\x2\x2\xAA\xA6\x3"+
		"\x2\x2\x2\xAB\x11\x3\x2\x2\x2\xAC\xAD\a\x15\x2\x2\xAD\xBB\a\x5\x2\x2\xAE"+
		"\xAF\a\x15\x2\x2\xAF\xB0\a\r\x2\x2\xB0\xBB\x5&\x14\x2\xB1\xB2\a\x15\x2"+
		"\x2\xB2\xB3\a\x5\x2\x2\xB3\xBB\x5\x1A\xE\x2\xB4\xB5\a\x15\x2\x2\xB5\xB6"+
		"\a\r\x2\x2\xB6\xBB\a\x1A\x2\x2\xB7\xB8\a\x15\x2\x2\xB8\xB9\a\r\x2\x2\xB9"+
		"\xBB\a\f\x2\x2\xBA\xAC\x3\x2\x2\x2\xBA\xAE\x3\x2\x2\x2\xBA\xB1\x3\x2\x2"+
		"\x2\xBA\xB4\x3\x2\x2\x2\xBA\xB7\x3\x2\x2\x2\xBB\x13\x3\x2\x2\x2\xBC\xBD"+
		"\a\x19\x2\x2\xBD\xBE\a\x1C\x2\x2\xBE\xBF\x5\x4\x3\x2\xBF\xC0\a&\x2\x2"+
		"\xC0\x15\x3\x2\x2\x2\xC1\xC2\a\x4\x2\x2\xC2\xC3\a\x1C\x2\x2\xC3\xC4\a"+
		")\x2\x2\xC4\x17\x3\x2\x2\x2\xC5\xC6\a\x18\x2\x2\xC6\xC7\a\x1C\x2\x2\xC7"+
		"\xC8\a)\x2\x2\xC8\x19\x3\x2\x2\x2\xC9\xCA\a\x3\x2\x2\xCA\xCB\a\x1C\x2"+
		"\x2\xCB\xCC\a)\x2\x2\xCC\x1B\x3\x2\x2\x2\xCD\xCE\a\v\x2\x2\xCE\xCF\a!"+
		"\x2\x2\xCF\xD0\x5,\x17\x2\xD0\xD1\a\"\x2\x2\xD1\xD2\x5 \x11\x2\xD2\x1D"+
		"\x3\x2\x2\x2\xD3\xD4\a\x12\x2\x2\xD4\xD5\a!\x2\x2\xD5\xD6\x5,\x17\x2\xD6"+
		"\xD7\a\"\x2\x2\xD7\xD8\x5 \x11\x2\xD8\x1F\x3\x2\x2\x2\xD9\xDD\a#\x2\x2"+
		"\xDA\xDC\x5\b\x5\x2\xDB\xDA\x3\x2\x2\x2\xDC\xDF\x3\x2\x2\x2\xDD\xDB\x3"+
		"\x2\x2\x2\xDD\xDE\x3\x2\x2\x2\xDE\xE0\x3\x2\x2\x2\xDF\xDD\x3\x2\x2\x2"+
		"\xE0\xE1\a#\x2\x2\xE1!\x3\x2\x2\x2\xE2\xE3\t\x2\x2\x2\xE3#\x3\x2\x2\x2"+
		"\xE4\xEE\a\x13\x2\x2\xE5\xE6\a\xE\x2\x2\xE6\xE7\a\'\x2\x2\xE7\xEE\a,\x2"+
		"\x2\xE8\xE9\a\xE\x2\x2\xE9\xEA\a\'\x2\x2\xEA\xEE\a-\x2\x2\xEB\xEE\a\x4"+
		"\x2\x2\xEC\xEE\a\x18\x2\x2\xED\xE4\x3\x2\x2\x2\xED\xE5\x3\x2\x2\x2\xED"+
		"\xE8\x3\x2\x2\x2\xED\xEB\x3\x2\x2\x2\xED\xEC\x3\x2\x2\x2\xEE%\x3\x2\x2"+
		"\x2\xEF\xF0\x5(\x15\x2\xF0\xF1\a(\x2\x2\xF1\xF2\x5*\x16\x2\xF2\'\x3\x2"+
		"\x2\x2\xF3\xF4\a)\x2\x2\xF4)\x3\x2\x2\x2\xF5\xF6\a)\x2\x2\xF6+\x3\x2\x2"+
		"\x2\xF7\xF8\b\x17\x1\x2\xF8\xF9\a!\x2\x2\xF9\xFA\x5,\x17\x2\xFA\xFB\a"+
		"\"\x2\x2\xFB\x104\x3\x2\x2\x2\xFC\xFD\a\x1D\x2\x2\xFD\xFE\x5,\x17\x2\xFE"+
		"\xFF\a\x1D\x2\x2\xFF\x104\x3\x2\x2\x2\x100\x104\x5.\x18\x2\x101\x102\a"+
		".\x2\x2\x102\x104\x5,\x17\x3\x103\xF7\x3\x2\x2\x2\x103\xFC\x3\x2\x2\x2"+
		"\x103\x100\x3\x2\x2\x2\x103\x101\x3\x2\x2\x2\x104\x10B\x3\x2\x2\x2\x105"+
		"\x106\f\a\x2\x2\x106\x107\x5\x30\x19\x2\x107\x108\x5,\x17\b\x108\x10A"+
		"\x3\x2\x2\x2\x109\x105\x3\x2\x2\x2\x10A\x10D\x3\x2\x2\x2\x10B\x109\x3"+
		"\x2\x2\x2\x10B\x10C\x3\x2\x2\x2\x10C-\x3\x2\x2\x2\x10D\x10B\x3\x2\x2\x2"+
		"\x10E\x114\x5\"\x12\x2\x10F\x114\a)\x2\x2\x110\x114\a\t\x2\x2\x111\x114"+
		"\x5$\x13\x2\x112\x114\a/\x2\x2\x113\x10E\x3\x2\x2\x2\x113\x10F\x3\x2\x2"+
		"\x2\x113\x110\x3\x2\x2\x2\x113\x111\x3\x2\x2\x2\x113\x112\x3\x2\x2\x2"+
		"\x114/\x3\x2\x2\x2\x115\x11D\a\'\x2\x2\x116\x11D\a\x30\x2\x2\x117\x11D"+
		"\a\x31\x2\x2\x118\x11D\a\x1F\x2\x2\x119\x11D\a\x14\x2\x2\x11A\x11B\a\x10"+
		"\x2\x2\x11B\x11D\a\xF\x2\x2\x11C\x115\x3\x2\x2\x2\x11C\x116\x3\x2\x2\x2"+
		"\x11C\x117\x3\x2\x2\x2\x11C\x118\x3\x2\x2\x2\x11C\x119\x3\x2\x2\x2\x11C"+
		"\x11A\x3\x2\x2\x2\x11D\x31\x3\x2\x2\x2\x10\x35>St\x95\x9F\xAA\xBA\xDD"+
		"\xED\x103\x10B\x113\x11C";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LabWork1github
