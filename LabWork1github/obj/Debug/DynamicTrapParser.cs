//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Dana\Source\Repos\LabWork1github\LabWork1github\G4 files\DynamicTrap.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LabWork1github {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DynamicTrapParser : Parser {
	public const int
		TELEPORT_PLACE=1, SPAWN_PLACE=2, DISTANCE=3, DAMAGE=4, DIRECTION=5, IN=6, 
		TRAP=7, MONSTER=8, ROUND=9, ME=10, IF=11, RANDOM=12, TO=13, PLACE_T=14, 
		NEAR=15, IS=16, ON=17, WHILE=18, HEALTH=19, ALIVE=20, MOVE=21, SPAWN=22, 
		TELEPORT_T=23, HEAL=24, NAME_T=25, PLAYER=26, EFFECT_T=27, EQUALS=28, 
		ABSOLUTE=29, EXPRESSIONCONNECTER=30, COMPARE=31, NUMOPERATION=32, PARENTHESISSTART=33, 
		PARENTHESISCLOSE=34, BRACKETCLOSE=35, BRACKETSTART=36, COLON=37, SEMI=38, 
		ATTRIBUTE=39, COMMA=40, NUMBER=41, ID=42, WS=43, X=44, Y=45, NEGATE=46, 
		NOTHING=47, NUMCONNECTER=48, BOOLCONNECTER=49;
	public const int
		RULE_definition = 0, RULE_name = 1, RULE_statementList = 2, RULE_statement = 3, 
		RULE_nameDeclaration = 4, RULE_damageAmountDeclaration = 5, RULE_healAmountDeclaration = 6, 
		RULE_teleportDeclare = 7, RULE_spawnDeclare = 8, RULE_damageDeclaration = 9, 
		RULE_healDeclaration = 10, RULE_spawnDeclaration = 11, RULE_teleport = 12, 
		RULE_moveDeclaration = 13, RULE_distanceDeclare = 14, RULE_ifexpression = 15, 
		RULE_whileexpression = 16, RULE_block = 17, RULE_character = 18, RULE_possibleAttributes = 19, 
		RULE_place = 20, RULE_x = 21, RULE_y = 22, RULE_expression = 23, RULE_something = 24, 
		RULE_operation = 25;
	public static readonly string[] ruleNames = {
		"definition", "name", "statementList", "statement", "nameDeclaration", 
		"damageAmountDeclaration", "healAmountDeclaration", "teleportDeclare", 
		"spawnDeclare", "damageDeclaration", "healDeclaration", "spawnDeclaration", 
		"teleport", "moveDeclaration", "distanceDeclare", "ifexpression", "whileexpression", 
		"block", "character", "possibleAttributes", "place", "x", "y", "expression", 
		"something", "operation"
	};

	private static readonly string[] _LiteralNames = {
		null, "'teleport_place'", "'spawn_place'", "'distance'", "'damage'", null, 
		"'in'", "'trap'", "'monster'", "'round'", "'me'", "'if'", "'random'", 
		"'to'", "'place'", "'near'", "'is'", "'ON'", "'while'", "'HP'", "'alive'", 
		"'move'", "'spawn'", "'teleport'", "'heal'", "'name'", "'player'", "'effect'", 
		"'='", "'|'", null, null, null, "'('", "')'", "'}'", "'{'", "':'", "';'", 
		"'.'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TELEPORT_PLACE", "SPAWN_PLACE", "DISTANCE", "DAMAGE", "DIRECTION", 
		"IN", "TRAP", "MONSTER", "ROUND", "ME", "IF", "RANDOM", "TO", "PLACE_T", 
		"NEAR", "IS", "ON", "WHILE", "HEALTH", "ALIVE", "MOVE", "SPAWN", "TELEPORT_T", 
		"HEAL", "NAME_T", "PLAYER", "EFFECT_T", "EQUALS", "ABSOLUTE", "EXPRESSIONCONNECTER", 
		"COMPARE", "NUMOPERATION", "PARENTHESISSTART", "PARENTHESISCLOSE", "BRACKETCLOSE", 
		"BRACKETSTART", "COLON", "SEMI", "ATTRIBUTE", "COMMA", "NUMBER", "ID", 
		"WS", "X", "Y", "NEGATE", "NOTHING", "NUMCONNECTER", "BOOLCONNECTER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DynamicTrap.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public DynamicTrapParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DefinitionContext : ParserRuleContext {
		public StatementListContext[] statementList() {
			return GetRuleContexts<StatementListContext>();
		}
		public StatementListContext statementList(int i) {
			return GetRuleContext<StatementListContext>(i);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NAME_T) {
				{
				{
				State = 52; statementList();
				}
				}
				State = 57;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(DynamicTrapParser.ID, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public NameDeclarationContext nameDeclaration() {
			return GetRuleContext<NameDeclarationContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; nameDeclaration();
			State = 64;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TELEPORT_PLACE) | (1L << SPAWN_PLACE) | (1L << DAMAGE) | (1L << IF) | (1L << WHILE) | (1L << MOVE) | (1L << HEAL))) != 0)) {
				{
				{
				State = 61; statement();
				}
				}
				State = 66;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DamageDeclarationContext damageDeclaration() {
			return GetRuleContext<DamageDeclarationContext>(0);
		}
		public MoveDeclarationContext moveDeclaration() {
			return GetRuleContext<MoveDeclarationContext>(0);
		}
		public IfexpressionContext ifexpression() {
			return GetRuleContext<IfexpressionContext>(0);
		}
		public WhileexpressionContext whileexpression() {
			return GetRuleContext<WhileexpressionContext>(0);
		}
		public DamageAmountDeclarationContext damageAmountDeclaration() {
			return GetRuleContext<DamageAmountDeclarationContext>(0);
		}
		public HealAmountDeclarationContext healAmountDeclaration() {
			return GetRuleContext<HealAmountDeclarationContext>(0);
		}
		public TeleportDeclareContext teleportDeclare() {
			return GetRuleContext<TeleportDeclareContext>(0);
		}
		public SpawnDeclareContext spawnDeclare() {
			return GetRuleContext<SpawnDeclareContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 91;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 67; damageDeclaration();
				State = 68; Match(SEMI);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 70; moveDeclaration();
				State = 71; Match(SEMI);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 73; ifexpression();
				State = 74; Match(SEMI);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 76; whileexpression();
				State = 77; Match(SEMI);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 79; damageAmountDeclaration();
				State = 80; Match(SEMI);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 82; healAmountDeclaration();
				State = 83; Match(SEMI);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 85; teleportDeclare();
				State = 86; Match(SEMI);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 88; spawnDeclare();
				State = 89; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameDeclarationContext : ParserRuleContext {
		public ITerminalNode NAME_T() { return GetToken(DynamicTrapParser.NAME_T, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicTrapParser.EQUALS, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NameDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterNameDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitNameDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameDeclarationContext nameDeclaration() {
		NameDeclarationContext _localctx = new NameDeclarationContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_nameDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(NAME_T);
			State = 94; Match(EQUALS);
			State = 95; name();
			State = 96; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DamageAmountDeclarationContext : ParserRuleContext {
		public ITerminalNode DAMAGE() { return GetToken(DynamicTrapParser.DAMAGE, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicTrapParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicTrapParser.NUMBER, 0); }
		public DamageAmountDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_damageAmountDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterDamageAmountDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitDamageAmountDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDamageAmountDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DamageAmountDeclarationContext damageAmountDeclaration() {
		DamageAmountDeclarationContext _localctx = new DamageAmountDeclarationContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_damageAmountDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(DAMAGE);
			State = 99; Match(EQUALS);
			State = 100; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HealAmountDeclarationContext : ParserRuleContext {
		public ITerminalNode HEAL() { return GetToken(DynamicTrapParser.HEAL, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicTrapParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicTrapParser.NUMBER, 0); }
		public HealAmountDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_healAmountDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterHealAmountDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitHealAmountDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHealAmountDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HealAmountDeclarationContext healAmountDeclaration() {
		HealAmountDeclarationContext _localctx = new HealAmountDeclarationContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_healAmountDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(HEAL);
			State = 103; Match(EQUALS);
			State = 104; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeleportDeclareContext : ParserRuleContext {
		public ITerminalNode TELEPORT_PLACE() { return GetToken(DynamicTrapParser.TELEPORT_PLACE, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicTrapParser.EQUALS, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public TeleportDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teleportDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterTeleportDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitTeleportDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTeleportDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TeleportDeclareContext teleportDeclare() {
		TeleportDeclareContext _localctx = new TeleportDeclareContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_teleportDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; Match(TELEPORT_PLACE);
			State = 107; Match(EQUALS);
			State = 108; place();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpawnDeclareContext : ParserRuleContext {
		public ITerminalNode SPAWN_PLACE() { return GetToken(DynamicTrapParser.SPAWN_PLACE, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicTrapParser.EQUALS, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public SpawnDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spawnDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterSpawnDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitSpawnDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpawnDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpawnDeclareContext spawnDeclare() {
		SpawnDeclareContext _localctx = new SpawnDeclareContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_spawnDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(SPAWN_PLACE);
			State = 111; Match(EQUALS);
			State = 112; place();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DamageDeclarationContext : ParserRuleContext {
		public ITerminalNode DAMAGE() { return GetToken(DynamicTrapParser.DAMAGE, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DynamicTrapParser.DIRECTION, 0); }
		public DamageAmountDeclarationContext damageAmountDeclaration() {
			return GetRuleContext<DamageAmountDeclarationContext>(0);
		}
		public DistanceDeclareContext distanceDeclare() {
			return GetRuleContext<DistanceDeclareContext>(0);
		}
		public ITerminalNode RANDOM() { return GetToken(DynamicTrapParser.RANDOM, 0); }
		public ITerminalNode TO() { return GetToken(DynamicTrapParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public DamageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_damageDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterDamageDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitDamageDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDamageDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DamageDeclarationContext damageDeclaration() {
		DamageDeclarationContext _localctx = new DamageDeclarationContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_damageDeclaration);
		try {
			State = 145;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 114; Match(DAMAGE);
				State = 115; Match(DIRECTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116; Match(DAMAGE);
				State = 117; Match(DIRECTION);
				State = 118; damageAmountDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 119; Match(DAMAGE);
				State = 120; Match(DIRECTION);
				State = 121; distanceDeclare();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 122; Match(DAMAGE);
				State = 123; Match(DIRECTION);
				State = 124; distanceDeclare();
				State = 125; damageAmountDeclaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 127; Match(DAMAGE);
				State = 128; Match(RANDOM);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 129; Match(DAMAGE);
				State = 130; Match(TO);
				State = 131; place();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 132; Match(DAMAGE);
				State = 133; Match(TO);
				State = 134; place();
				State = 135; damageAmountDeclaration();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 137; Match(DAMAGE);
				State = 138; Match(TO);
				State = 139; character();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 140; Match(DAMAGE);
				State = 141; Match(TO);
				State = 142; character();
				State = 143; damageAmountDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HealDeclarationContext : ParserRuleContext {
		public ITerminalNode HEAL() { return GetToken(DynamicTrapParser.HEAL, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DynamicTrapParser.DIRECTION, 0); }
		public HealAmountDeclarationContext healAmountDeclaration() {
			return GetRuleContext<HealAmountDeclarationContext>(0);
		}
		public DistanceDeclareContext distanceDeclare() {
			return GetRuleContext<DistanceDeclareContext>(0);
		}
		public ITerminalNode RANDOM() { return GetToken(DynamicTrapParser.RANDOM, 0); }
		public ITerminalNode TO() { return GetToken(DynamicTrapParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public HealDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_healDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterHealDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitHealDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHealDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HealDeclarationContext healDeclaration() {
		HealDeclarationContext _localctx = new HealDeclarationContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_healDeclaration);
		try {
			State = 178;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 147; Match(HEAL);
				State = 148; Match(DIRECTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 149; Match(HEAL);
				State = 150; Match(DIRECTION);
				State = 151; healAmountDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 152; Match(HEAL);
				State = 153; Match(DIRECTION);
				State = 154; distanceDeclare();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 155; Match(HEAL);
				State = 156; Match(DIRECTION);
				State = 157; distanceDeclare();
				State = 158; healAmountDeclaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 160; Match(HEAL);
				State = 161; Match(RANDOM);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 162; Match(HEAL);
				State = 163; Match(TO);
				State = 164; place();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 165; Match(HEAL);
				State = 166; Match(TO);
				State = 167; place();
				State = 168; healAmountDeclaration();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 170; Match(HEAL);
				State = 171; Match(TO);
				State = 172; character();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 173; Match(HEAL);
				State = 174; Match(TO);
				State = 175; character();
				State = 176; healAmountDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpawnDeclarationContext : ParserRuleContext {
		public ITerminalNode SPAWN() { return GetToken(DynamicTrapParser.SPAWN, 0); }
		public ITerminalNode MONSTER() { return GetToken(DynamicTrapParser.MONSTER, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TO() { return GetToken(DynamicTrapParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public ITerminalNode RANDOM() { return GetToken(DynamicTrapParser.RANDOM, 0); }
		public SpawnDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spawnDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterSpawnDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitSpawnDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpawnDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpawnDeclarationContext spawnDeclaration() {
		SpawnDeclarationContext _localctx = new SpawnDeclarationContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_spawnDeclaration);
		try {
			State = 191;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 180; Match(SPAWN);
				State = 181; Match(MONSTER);
				State = 182; name();
				State = 183; Match(TO);
				State = 184; place();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 186; Match(SPAWN);
				State = 187; Match(RANDOM);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 188; Match(SPAWN);
				State = 189; Match(MONSTER);
				State = 190; name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeleportContext : ParserRuleContext {
		public ITerminalNode TELEPORT_T() { return GetToken(DynamicTrapParser.TELEPORT_T, 0); }
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public ITerminalNode TO() { return GetToken(DynamicTrapParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public ITerminalNode RANDOM() { return GetToken(DynamicTrapParser.RANDOM, 0); }
		public TeleportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teleport; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterTeleport(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitTeleport(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTeleport(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TeleportContext teleport() {
		TeleportContext _localctx = new TeleportContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_teleport);
		try {
			State = 203;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 193; Match(TELEPORT_T);
				State = 194; character();
				State = 195; Match(TO);
				State = 196; place();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 198; Match(TELEPORT_T);
				State = 199; character();
				State = 200; Match(RANDOM);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 202; Match(TELEPORT_T);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveDeclarationContext : ParserRuleContext {
		public ITerminalNode MOVE() { return GetToken(DynamicTrapParser.MOVE, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DynamicTrapParser.DIRECTION, 0); }
		public ITerminalNode TO() { return GetToken(DynamicTrapParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public DistanceDeclareContext distanceDeclare() {
			return GetRuleContext<DistanceDeclareContext>(0);
		}
		public ITerminalNode PLAYER() { return GetToken(DynamicTrapParser.PLAYER, 0); }
		public ITerminalNode RANDOM() { return GetToken(DynamicTrapParser.RANDOM, 0); }
		public MoveDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterMoveDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitMoveDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoveDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveDeclarationContext moveDeclaration() {
		MoveDeclarationContext _localctx = new MoveDeclarationContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_moveDeclaration);
		try {
			State = 219;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 205; Match(MOVE);
				State = 206; Match(DIRECTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 207; Match(MOVE);
				State = 208; Match(TO);
				State = 209; place();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 210; Match(MOVE);
				State = 211; Match(DIRECTION);
				State = 212; distanceDeclare();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 213; Match(MOVE);
				State = 214; Match(TO);
				State = 215; Match(PLAYER);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 216; Match(MOVE);
				State = 217; Match(TO);
				State = 218; Match(RANDOM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistanceDeclareContext : ParserRuleContext {
		public ITerminalNode DISTANCE() { return GetToken(DynamicTrapParser.DISTANCE, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicTrapParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicTrapParser.NUMBER, 0); }
		public DistanceDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distanceDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterDistanceDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitDistanceDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDistanceDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DistanceDeclareContext distanceDeclare() {
		DistanceDeclareContext _localctx = new DistanceDeclareContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_distanceDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; Match(DISTANCE);
			State = 222; Match(EQUALS);
			State = 223; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfexpressionContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(DynamicTrapParser.IF, 0); }
		public ITerminalNode PARENTHESISSTART() { return GetToken(DynamicTrapParser.PARENTHESISSTART, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PARENTHESISCLOSE() { return GetToken(DynamicTrapParser.PARENTHESISCLOSE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterIfexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitIfexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfexpressionContext ifexpression() {
		IfexpressionContext _localctx = new IfexpressionContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_ifexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; Match(IF);
			State = 226; Match(PARENTHESISSTART);
			State = 227; expression(0);
			State = 228; Match(PARENTHESISCLOSE);
			State = 229; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileexpressionContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(DynamicTrapParser.WHILE, 0); }
		public ITerminalNode PARENTHESISSTART() { return GetToken(DynamicTrapParser.PARENTHESISSTART, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PARENTHESISCLOSE() { return GetToken(DynamicTrapParser.PARENTHESISCLOSE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterWhileexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitWhileexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileexpressionContext whileexpression() {
		WhileexpressionContext _localctx = new WhileexpressionContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_whileexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; Match(WHILE);
			State = 232; Match(PARENTHESISSTART);
			State = 233; expression(0);
			State = 234; Match(PARENTHESISCLOSE);
			State = 235; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode[] BRACKETCLOSE() { return GetTokens(DynamicTrapParser.BRACKETCLOSE); }
		public ITerminalNode BRACKETCLOSE(int i) {
			return GetToken(DynamicTrapParser.BRACKETCLOSE, i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; Match(BRACKETCLOSE);
			State = 241;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TELEPORT_PLACE) | (1L << SPAWN_PLACE) | (1L << DAMAGE) | (1L << IF) | (1L << WHILE) | (1L << MOVE) | (1L << HEAL))) != 0)) {
				{
				{
				State = 238; statement();
				}
				}
				State = 243;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 244; Match(BRACKETCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterContext : ParserRuleContext {
		public ITerminalNode PLAYER() { return GetToken(DynamicTrapParser.PLAYER, 0); }
		public ITerminalNode ME() { return GetToken(DynamicTrapParser.ME, 0); }
		public ITerminalNode MONSTER() { return GetToken(DynamicTrapParser.MONSTER, 0); }
		public ITerminalNode TRAP() { return GetToken(DynamicTrapParser.TRAP, 0); }
		public CharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterCharacter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitCharacter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterContext character() {
		CharacterContext _localctx = new CharacterContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_character);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRAP) | (1L << MONSTER) | (1L << ME) | (1L << PLAYER))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PossibleAttributesContext : ParserRuleContext {
		public ITerminalNode HEALTH() { return GetToken(DynamicTrapParser.HEALTH, 0); }
		public ITerminalNode PLACE_T() { return GetToken(DynamicTrapParser.PLACE_T, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(DynamicTrapParser.ATTRIBUTE, 0); }
		public ITerminalNode X() { return GetToken(DynamicTrapParser.X, 0); }
		public ITerminalNode Y() { return GetToken(DynamicTrapParser.Y, 0); }
		public ITerminalNode DAMAGE() { return GetToken(DynamicTrapParser.DAMAGE, 0); }
		public ITerminalNode HEAL() { return GetToken(DynamicTrapParser.HEAL, 0); }
		public ITerminalNode TELEPORT_PLACE() { return GetToken(DynamicTrapParser.TELEPORT_PLACE, 0); }
		public ITerminalNode SPAWN_PLACE() { return GetToken(DynamicTrapParser.SPAWN_PLACE, 0); }
		public PossibleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_possibleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterPossibleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitPossibleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPossibleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PossibleAttributesContext possibleAttributes() {
		PossibleAttributesContext _localctx = new PossibleAttributesContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_possibleAttributes);
		try {
			State = 269;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 248; Match(HEALTH);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 249; Match(PLACE_T);
				State = 250; Match(ATTRIBUTE);
				State = 251; Match(X);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 252; Match(PLACE_T);
				State = 253; Match(ATTRIBUTE);
				State = 254; Match(Y);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 255; Match(DAMAGE);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 256; Match(HEAL);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 257; Match(TELEPORT_PLACE);
				State = 258; Match(ATTRIBUTE);
				State = 259; Match(X);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 260; Match(TELEPORT_PLACE);
				State = 261; Match(ATTRIBUTE);
				State = 262; Match(Y);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 263; Match(SPAWN_PLACE);
				State = 264; Match(ATTRIBUTE);
				State = 265; Match(X);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 266; Match(SPAWN_PLACE);
				State = 267; Match(ATTRIBUTE);
				State = 268; Match(Y);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceContext : ParserRuleContext {
		public XContext x() {
			return GetRuleContext<XContext>(0);
		}
		public YContext y() {
			return GetRuleContext<YContext>(0);
		}
		public PlaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_place; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterPlace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitPlace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceContext place() {
		PlaceContext _localctx = new PlaceContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_place);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; x();
			State = 272; Match(COMMA);
			State = 273; y();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(DynamicTrapParser.NUMBER, 0); }
		public XContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_x; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterX(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitX(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitX(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XContext x() {
		XContext _localctx = new XContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_x);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(DynamicTrapParser.NUMBER, 0); }
		public YContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_y; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitY(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitY(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YContext y() {
		YContext _localctx = new YContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_y);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public ITerminalNode PARENTHESISSTART() { return GetToken(DynamicTrapParser.PARENTHESISSTART, 0); }
		public ITerminalNode PARENTHESISCLOSE() { return GetToken(DynamicTrapParser.PARENTHESISCLOSE, 0); }
		public ITerminalNode[] ABSOLUTE() { return GetTokens(DynamicTrapParser.ABSOLUTE); }
		public ITerminalNode ABSOLUTE(int i) {
			return GetToken(DynamicTrapParser.ABSOLUTE, i);
		}
		public SomethingContext something() {
			return GetRuleContext<SomethingContext>(0);
		}
		public ITerminalNode NEGATE() { return GetToken(DynamicTrapParser.NEGATE, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case PARENTHESISSTART:
				{
				State = 280; Match(PARENTHESISSTART);
				State = 281; expression(0);
				State = 282; Match(PARENTHESISCLOSE);
				}
				break;
			case ABSOLUTE:
				{
				State = 284; Match(ABSOLUTE);
				State = 285; expression(0);
				State = 286; Match(ABSOLUTE);
				}
				break;
			case TELEPORT_PLACE:
			case SPAWN_PLACE:
			case DAMAGE:
			case TRAP:
			case MONSTER:
			case ROUND:
			case ME:
			case PLACE_T:
			case HEALTH:
			case HEAL:
			case PLAYER:
			case NUMBER:
			case NOTHING:
				{
				State = 288; something();
				}
				break;
			case NEGATE:
				{
				State = 289; Match(NEGATE);
				State = 290; expression(1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 299;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 293;
					if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
					State = 294; operation();
					State = 295; expression(6);
					}
					} 
				}
				State = 301;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SomethingContext : ParserRuleContext {
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public ITerminalNode NUMBER() { return GetToken(DynamicTrapParser.NUMBER, 0); }
		public ITerminalNode ROUND() { return GetToken(DynamicTrapParser.ROUND, 0); }
		public PossibleAttributesContext possibleAttributes() {
			return GetRuleContext<PossibleAttributesContext>(0);
		}
		public ITerminalNode NOTHING() { return GetToken(DynamicTrapParser.NOTHING, 0); }
		public SomethingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_something; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterSomething(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitSomething(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSomething(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SomethingContext something() {
		SomethingContext _localctx = new SomethingContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_something);
		try {
			State = 307;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TRAP:
			case MONSTER:
			case ME:
			case PLAYER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 302; character();
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 303; Match(NUMBER);
				}
				break;
			case ROUND:
				EnterOuterAlt(_localctx, 3);
				{
				State = 304; Match(ROUND);
				}
				break;
			case TELEPORT_PLACE:
			case SPAWN_PLACE:
			case DAMAGE:
			case PLACE_T:
			case HEALTH:
			case HEAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 305; possibleAttributes();
				}
				break;
			case NOTHING:
				EnterOuterAlt(_localctx, 5);
				{
				State = 306; Match(NOTHING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public ITerminalNode ATTRIBUTE() { return GetToken(DynamicTrapParser.ATTRIBUTE, 0); }
		public ITerminalNode NUMCONNECTER() { return GetToken(DynamicTrapParser.NUMCONNECTER, 0); }
		public ITerminalNode BOOLCONNECTER() { return GetToken(DynamicTrapParser.BOOLCONNECTER, 0); }
		public ITerminalNode COMPARE() { return GetToken(DynamicTrapParser.COMPARE, 0); }
		public ITerminalNode ALIVE() { return GetToken(DynamicTrapParser.ALIVE, 0); }
		public ITerminalNode IS() { return GetToken(DynamicTrapParser.IS, 0); }
		public ITerminalNode NEAR() { return GetToken(DynamicTrapParser.NEAR, 0); }
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicTrapListener typedListener = listener as IDynamicTrapListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicTrapVisitor<TResult> typedVisitor = visitor as IDynamicTrapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_operation);
		try {
			State = 316;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ATTRIBUTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 309; Match(ATTRIBUTE);
				}
				break;
			case NUMCONNECTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 310; Match(NUMCONNECTER);
				}
				break;
			case BOOLCONNECTER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 311; Match(BOOLCONNECTER);
				}
				break;
			case COMPARE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 312; Match(COMPARE);
				}
				break;
			case ALIVE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 313; Match(ALIVE);
				}
				break;
			case IS:
				EnterOuterAlt(_localctx, 6);
				{
				State = 314; Match(IS);
				State = 315; Match(NEAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 23: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x33\x141\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x3\x2\a\x2\x38\n\x2\f\x2\xE\x2;\v\x2\x3\x3\x3\x3\x3\x4\x3\x4\a"+
		"\x4\x41\n\x4\f\x4\xE\x4\x44\v\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5^\n\x5\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t"+
		"\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\x94\n\v\x3\f\x3\f\x3\f\x3\f\x3"+
		"\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3"+
		"\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\xB5"+
		"\n\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\xC2\n"+
		"\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\xCE"+
		"\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x5\xF\xDE\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x13\x3\x13\a\x13\xF2\n\x13\f\x13\xE\x13\xF5\v\x13\x3\x13\x3\x13"+
		"\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\x3\x15\x5\x15\x110\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x126\n\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\a\x19\x12C\n\x19\f\x19\xE\x19\x12F\v\x19\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x136\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x5\x1B\x13F\n\x1B\x3\x1B\x2\x2\x3\x30\x1C\x2\x2\x4"+
		"\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A"+
		"\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2"+
		"\x2\x3\x5\x2\t\n\f\f\x1C\x1C\x15D\x2\x39\x3\x2\x2\x2\x4<\x3\x2\x2\x2\x6"+
		">\x3\x2\x2\x2\b]\x3\x2\x2\x2\n_\x3\x2\x2\x2\f\x64\x3\x2\x2\x2\xEh\x3\x2"+
		"\x2\x2\x10l\x3\x2\x2\x2\x12p\x3\x2\x2\x2\x14\x93\x3\x2\x2\x2\x16\xB4\x3"+
		"\x2\x2\x2\x18\xC1\x3\x2\x2\x2\x1A\xCD\x3\x2\x2\x2\x1C\xDD\x3\x2\x2\x2"+
		"\x1E\xDF\x3\x2\x2\x2 \xE3\x3\x2\x2\x2\"\xE9\x3\x2\x2\x2$\xEF\x3\x2\x2"+
		"\x2&\xF8\x3\x2\x2\x2(\x10F\x3\x2\x2\x2*\x111\x3\x2\x2\x2,\x115\x3\x2\x2"+
		"\x2.\x117\x3\x2\x2\x2\x30\x125\x3\x2\x2\x2\x32\x135\x3\x2\x2\x2\x34\x13E"+
		"\x3\x2\x2\x2\x36\x38\x5\x6\x4\x2\x37\x36\x3\x2\x2\x2\x38;\x3\x2\x2\x2"+
		"\x39\x37\x3\x2\x2\x2\x39:\x3\x2\x2\x2:\x3\x3\x2\x2\x2;\x39\x3\x2\x2\x2"+
		"<=\a,\x2\x2=\x5\x3\x2\x2\x2>\x42\x5\n\x6\x2?\x41\x5\b\x5\x2@?\x3\x2\x2"+
		"\x2\x41\x44\x3\x2\x2\x2\x42@\x3\x2\x2\x2\x42\x43\x3\x2\x2\x2\x43\a\x3"+
		"\x2\x2\x2\x44\x42\x3\x2\x2\x2\x45\x46\x5\x14\v\x2\x46G\a(\x2\x2G^\x3\x2"+
		"\x2\x2HI\x5\x1C\xF\x2IJ\a(\x2\x2J^\x3\x2\x2\x2KL\x5 \x11\x2LM\a(\x2\x2"+
		"M^\x3\x2\x2\x2NO\x5\"\x12\x2OP\a(\x2\x2P^\x3\x2\x2\x2QR\x5\f\a\x2RS\a"+
		"(\x2\x2S^\x3\x2\x2\x2TU\x5\xE\b\x2UV\a(\x2\x2V^\x3\x2\x2\x2WX\x5\x10\t"+
		"\x2XY\a(\x2\x2Y^\x3\x2\x2\x2Z[\x5\x12\n\x2[\\\a(\x2\x2\\^\x3\x2\x2\x2"+
		"]\x45\x3\x2\x2\x2]H\x3\x2\x2\x2]K\x3\x2\x2\x2]N\x3\x2\x2\x2]Q\x3\x2\x2"+
		"\x2]T\x3\x2\x2\x2]W\x3\x2\x2\x2]Z\x3\x2\x2\x2^\t\x3\x2\x2\x2_`\a\x1B\x2"+
		"\x2`\x61\a\x1E\x2\x2\x61\x62\x5\x4\x3\x2\x62\x63\a(\x2\x2\x63\v\x3\x2"+
		"\x2\x2\x64\x65\a\x6\x2\x2\x65\x66\a\x1E\x2\x2\x66g\a+\x2\x2g\r\x3\x2\x2"+
		"\x2hi\a\x1A\x2\x2ij\a\x1E\x2\x2jk\a+\x2\x2k\xF\x3\x2\x2\x2lm\a\x3\x2\x2"+
		"mn\a\x1E\x2\x2no\x5*\x16\x2o\x11\x3\x2\x2\x2pq\a\x4\x2\x2qr\a\x1E\x2\x2"+
		"rs\x5*\x16\x2s\x13\x3\x2\x2\x2tu\a\x6\x2\x2u\x94\a\a\x2\x2vw\a\x6\x2\x2"+
		"wx\a\a\x2\x2x\x94\x5\f\a\x2yz\a\x6\x2\x2z{\a\a\x2\x2{\x94\x5\x1E\x10\x2"+
		"|}\a\x6\x2\x2}~\a\a\x2\x2~\x7F\x5\x1E\x10\x2\x7F\x80\x5\f\a\x2\x80\x94"+
		"\x3\x2\x2\x2\x81\x82\a\x6\x2\x2\x82\x94\a\xE\x2\x2\x83\x84\a\x6\x2\x2"+
		"\x84\x85\a\xF\x2\x2\x85\x94\x5*\x16\x2\x86\x87\a\x6\x2\x2\x87\x88\a\xF"+
		"\x2\x2\x88\x89\x5*\x16\x2\x89\x8A\x5\f\a\x2\x8A\x94\x3\x2\x2\x2\x8B\x8C"+
		"\a\x6\x2\x2\x8C\x8D\a\xF\x2\x2\x8D\x94\x5&\x14\x2\x8E\x8F\a\x6\x2\x2\x8F"+
		"\x90\a\xF\x2\x2\x90\x91\x5&\x14\x2\x91\x92\x5\f\a\x2\x92\x94\x3\x2\x2"+
		"\x2\x93t\x3\x2\x2\x2\x93v\x3\x2\x2\x2\x93y\x3\x2\x2\x2\x93|\x3\x2\x2\x2"+
		"\x93\x81\x3\x2\x2\x2\x93\x83\x3\x2\x2\x2\x93\x86\x3\x2\x2\x2\x93\x8B\x3"+
		"\x2\x2\x2\x93\x8E\x3\x2\x2\x2\x94\x15\x3\x2\x2\x2\x95\x96\a\x1A\x2\x2"+
		"\x96\xB5\a\a\x2\x2\x97\x98\a\x1A\x2\x2\x98\x99\a\a\x2\x2\x99\xB5\x5\xE"+
		"\b\x2\x9A\x9B\a\x1A\x2\x2\x9B\x9C\a\a\x2\x2\x9C\xB5\x5\x1E\x10\x2\x9D"+
		"\x9E\a\x1A\x2\x2\x9E\x9F\a\a\x2\x2\x9F\xA0\x5\x1E\x10\x2\xA0\xA1\x5\xE"+
		"\b\x2\xA1\xB5\x3\x2\x2\x2\xA2\xA3\a\x1A\x2\x2\xA3\xB5\a\xE\x2\x2\xA4\xA5"+
		"\a\x1A\x2\x2\xA5\xA6\a\xF\x2\x2\xA6\xB5\x5*\x16\x2\xA7\xA8\a\x1A\x2\x2"+
		"\xA8\xA9\a\xF\x2\x2\xA9\xAA\x5*\x16\x2\xAA\xAB\x5\xE\b\x2\xAB\xB5\x3\x2"+
		"\x2\x2\xAC\xAD\a\x1A\x2\x2\xAD\xAE\a\xF\x2\x2\xAE\xB5\x5&\x14\x2\xAF\xB0"+
		"\a\x1A\x2\x2\xB0\xB1\a\xF\x2\x2\xB1\xB2\x5&\x14\x2\xB2\xB3\x5\xE\b\x2"+
		"\xB3\xB5\x3\x2\x2\x2\xB4\x95\x3\x2\x2\x2\xB4\x97\x3\x2\x2\x2\xB4\x9A\x3"+
		"\x2\x2\x2\xB4\x9D\x3\x2\x2\x2\xB4\xA2\x3\x2\x2\x2\xB4\xA4\x3\x2\x2\x2"+
		"\xB4\xA7\x3\x2\x2\x2\xB4\xAC\x3\x2\x2\x2\xB4\xAF\x3\x2\x2\x2\xB5\x17\x3"+
		"\x2\x2\x2\xB6\xB7\a\x18\x2\x2\xB7\xB8\a\n\x2\x2\xB8\xB9\x5\x4\x3\x2\xB9"+
		"\xBA\a\xF\x2\x2\xBA\xBB\x5*\x16\x2\xBB\xC2\x3\x2\x2\x2\xBC\xBD\a\x18\x2"+
		"\x2\xBD\xC2\a\xE\x2\x2\xBE\xBF\a\x18\x2\x2\xBF\xC0\a\n\x2\x2\xC0\xC2\x5"+
		"\x4\x3\x2\xC1\xB6\x3\x2\x2\x2\xC1\xBC\x3\x2\x2\x2\xC1\xBE\x3\x2\x2\x2"+
		"\xC2\x19\x3\x2\x2\x2\xC3\xC4\a\x19\x2\x2\xC4\xC5\x5&\x14\x2\xC5\xC6\a"+
		"\xF\x2\x2\xC6\xC7\x5*\x16\x2\xC7\xCE\x3\x2\x2\x2\xC8\xC9\a\x19\x2\x2\xC9"+
		"\xCA\x5&\x14\x2\xCA\xCB\a\xE\x2\x2\xCB\xCE\x3\x2\x2\x2\xCC\xCE\a\x19\x2"+
		"\x2\xCD\xC3\x3\x2\x2\x2\xCD\xC8\x3\x2\x2\x2\xCD\xCC\x3\x2\x2\x2\xCE\x1B"+
		"\x3\x2\x2\x2\xCF\xD0\a\x17\x2\x2\xD0\xDE\a\a\x2\x2\xD1\xD2\a\x17\x2\x2"+
		"\xD2\xD3\a\xF\x2\x2\xD3\xDE\x5*\x16\x2\xD4\xD5\a\x17\x2\x2\xD5\xD6\a\a"+
		"\x2\x2\xD6\xDE\x5\x1E\x10\x2\xD7\xD8\a\x17\x2\x2\xD8\xD9\a\xF\x2\x2\xD9"+
		"\xDE\a\x1C\x2\x2\xDA\xDB\a\x17\x2\x2\xDB\xDC\a\xF\x2\x2\xDC\xDE\a\xE\x2"+
		"\x2\xDD\xCF\x3\x2\x2\x2\xDD\xD1\x3\x2\x2\x2\xDD\xD4\x3\x2\x2\x2\xDD\xD7"+
		"\x3\x2\x2\x2\xDD\xDA\x3\x2\x2\x2\xDE\x1D\x3\x2\x2\x2\xDF\xE0\a\x5\x2\x2"+
		"\xE0\xE1\a\x1E\x2\x2\xE1\xE2\a+\x2\x2\xE2\x1F\x3\x2\x2\x2\xE3\xE4\a\r"+
		"\x2\x2\xE4\xE5\a#\x2\x2\xE5\xE6\x5\x30\x19\x2\xE6\xE7\a$\x2\x2\xE7\xE8"+
		"\x5$\x13\x2\xE8!\x3\x2\x2\x2\xE9\xEA\a\x14\x2\x2\xEA\xEB\a#\x2\x2\xEB"+
		"\xEC\x5\x30\x19\x2\xEC\xED\a$\x2\x2\xED\xEE\x5$\x13\x2\xEE#\x3\x2\x2\x2"+
		"\xEF\xF3\a%\x2\x2\xF0\xF2\x5\b\x5\x2\xF1\xF0\x3\x2\x2\x2\xF2\xF5\x3\x2"+
		"\x2\x2\xF3\xF1\x3\x2\x2\x2\xF3\xF4\x3\x2\x2\x2\xF4\xF6\x3\x2\x2\x2\xF5"+
		"\xF3\x3\x2\x2\x2\xF6\xF7\a%\x2\x2\xF7%\x3\x2\x2\x2\xF8\xF9\t\x2\x2\x2"+
		"\xF9\'\x3\x2\x2\x2\xFA\x110\a\x15\x2\x2\xFB\xFC\a\x10\x2\x2\xFC\xFD\a"+
		")\x2\x2\xFD\x110\a.\x2\x2\xFE\xFF\a\x10\x2\x2\xFF\x100\a)\x2\x2\x100\x110"+
		"\a/\x2\x2\x101\x110\a\x6\x2\x2\x102\x110\a\x1A\x2\x2\x103\x104\a\x3\x2"+
		"\x2\x104\x105\a)\x2\x2\x105\x110\a.\x2\x2\x106\x107\a\x3\x2\x2\x107\x108"+
		"\a)\x2\x2\x108\x110\a/\x2\x2\x109\x10A\a\x4\x2\x2\x10A\x10B\a)\x2\x2\x10B"+
		"\x110\a.\x2\x2\x10C\x10D\a\x4\x2\x2\x10D\x10E\a)\x2\x2\x10E\x110\a/\x2"+
		"\x2\x10F\xFA\x3\x2\x2\x2\x10F\xFB\x3\x2\x2\x2\x10F\xFE\x3\x2\x2\x2\x10F"+
		"\x101\x3\x2\x2\x2\x10F\x102\x3\x2\x2\x2\x10F\x103\x3\x2\x2\x2\x10F\x106"+
		"\x3\x2\x2\x2\x10F\x109\x3\x2\x2\x2\x10F\x10C\x3\x2\x2\x2\x110)\x3\x2\x2"+
		"\x2\x111\x112\x5,\x17\x2\x112\x113\a*\x2\x2\x113\x114\x5.\x18\x2\x114"+
		"+\x3\x2\x2\x2\x115\x116\a+\x2\x2\x116-\x3\x2\x2\x2\x117\x118\a+\x2\x2"+
		"\x118/\x3\x2\x2\x2\x119\x11A\b\x19\x1\x2\x11A\x11B\a#\x2\x2\x11B\x11C"+
		"\x5\x30\x19\x2\x11C\x11D\a$\x2\x2\x11D\x126\x3\x2\x2\x2\x11E\x11F\a\x1F"+
		"\x2\x2\x11F\x120\x5\x30\x19\x2\x120\x121\a\x1F\x2\x2\x121\x126\x3\x2\x2"+
		"\x2\x122\x126\x5\x32\x1A\x2\x123\x124\a\x30\x2\x2\x124\x126\x5\x30\x19"+
		"\x3\x125\x119\x3\x2\x2\x2\x125\x11E\x3\x2\x2\x2\x125\x122\x3\x2\x2\x2"+
		"\x125\x123\x3\x2\x2\x2\x126\x12D\x3\x2\x2\x2\x127\x128\f\a\x2\x2\x128"+
		"\x129\x5\x34\x1B\x2\x129\x12A\x5\x30\x19\b\x12A\x12C\x3\x2\x2\x2\x12B"+
		"\x127\x3\x2\x2\x2\x12C\x12F\x3\x2\x2\x2\x12D\x12B\x3\x2\x2\x2\x12D\x12E"+
		"\x3\x2\x2\x2\x12E\x31\x3\x2\x2\x2\x12F\x12D\x3\x2\x2\x2\x130\x136\x5&"+
		"\x14\x2\x131\x136\a+\x2\x2\x132\x136\a\v\x2\x2\x133\x136\x5(\x15\x2\x134"+
		"\x136\a\x31\x2\x2\x135\x130\x3\x2\x2\x2\x135\x131\x3\x2\x2\x2\x135\x132"+
		"\x3\x2\x2\x2\x135\x133\x3\x2\x2\x2\x135\x134\x3\x2\x2\x2\x136\x33\x3\x2"+
		"\x2\x2\x137\x13F\a)\x2\x2\x138\x13F\a\x32\x2\x2\x139\x13F\a\x33\x2\x2"+
		"\x13A\x13F\a!\x2\x2\x13B\x13F\a\x16\x2\x2\x13C\x13D\a\x12\x2\x2\x13D\x13F"+
		"\a\x11\x2\x2\x13E\x137\x3\x2\x2\x2\x13E\x138\x3\x2\x2\x2\x13E\x139\x3"+
		"\x2\x2\x2\x13E\x13A\x3\x2\x2\x2\x13E\x13B\x3\x2\x2\x2\x13E\x13C\x3\x2"+
		"\x2\x2\x13F\x35\x3\x2\x2\x2\x10\x39\x42]\x93\xB4\xC1\xCD\xDD\xF3\x10F"+
		"\x125\x12D\x135\x13E";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LabWork1github
