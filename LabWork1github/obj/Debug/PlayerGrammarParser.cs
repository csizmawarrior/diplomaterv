//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Dana\source\repos\LabWork1github\LabWork1github\PlayerGrammar.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LabWork1github {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class PlayerGrammarParser : Parser {
	public const int
		SEMI=1, COMMA=2, FORWARD=3, LEFT=4, RIGHT=5, BACKWARD=6, MOVE=7, SHOOT=8, 
		HEALTH=9, WS=10;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_direction = 2, RULE_movingStatement = 3, 
		RULE_shootingStatement = 4, RULE_healthCheckStatement = 5;
	public static readonly string[] ruleNames = {
		"program", "statement", "direction", "movingStatement", "shootingStatement", 
		"healthCheckStatement"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'F'", "'L'", "'R'", "'B'", "'move'", "'shoot'", "'health'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SEMI", "COMMA", "FORWARD", "LEFT", "RIGHT", "BACKWARD", "MOVE", 
		"SHOOT", "HEALTH", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PlayerGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PlayerGrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPlayerGrammarListener typedListener = listener as IPlayerGrammarListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlayerGrammarListener typedListener = listener as IPlayerGrammarListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlayerGrammarVisitor<TResult> typedVisitor = visitor as IPlayerGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public MovingStatementContext movingStatement() {
			return GetRuleContext<MovingStatementContext>(0);
		}
		public ShootingStatementContext shootingStatement() {
			return GetRuleContext<ShootingStatementContext>(0);
		}
		public HealthCheckStatementContext healthCheckStatement() {
			return GetRuleContext<HealthCheckStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPlayerGrammarListener typedListener = listener as IPlayerGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlayerGrammarListener typedListener = listener as IPlayerGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlayerGrammarVisitor<TResult> typedVisitor = visitor as IPlayerGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 17;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case MOVE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14; movingStatement();
				}
				break;
			case SHOOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 15; shootingStatement();
				}
				break;
			case HEALTH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 16; healthCheckStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionContext : ParserRuleContext {
		public DirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPlayerGrammarListener typedListener = listener as IPlayerGrammarListener;
			if (typedListener != null) typedListener.EnterDirection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlayerGrammarListener typedListener = listener as IPlayerGrammarListener;
			if (typedListener != null) typedListener.ExitDirection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlayerGrammarVisitor<TResult> typedVisitor = visitor as IPlayerGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectionContext direction() {
		DirectionContext _localctx = new DirectionContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_direction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FORWARD) | (1L << LEFT) | (1L << RIGHT) | (1L << BACKWARD))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MovingStatementContext : ParserRuleContext {
		public ITerminalNode MOVE() { return GetToken(PlayerGrammarParser.MOVE, 0); }
		public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public MovingStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_movingStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPlayerGrammarListener typedListener = listener as IPlayerGrammarListener;
			if (typedListener != null) typedListener.EnterMovingStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlayerGrammarListener typedListener = listener as IPlayerGrammarListener;
			if (typedListener != null) typedListener.ExitMovingStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlayerGrammarVisitor<TResult> typedVisitor = visitor as IPlayerGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMovingStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MovingStatementContext movingStatement() {
		MovingStatementContext _localctx = new MovingStatementContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_movingStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21; Match(MOVE);
			State = 22; direction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShootingStatementContext : ParserRuleContext {
		public ITerminalNode SHOOT() { return GetToken(PlayerGrammarParser.SHOOT, 0); }
		public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public ShootingStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shootingStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPlayerGrammarListener typedListener = listener as IPlayerGrammarListener;
			if (typedListener != null) typedListener.EnterShootingStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlayerGrammarListener typedListener = listener as IPlayerGrammarListener;
			if (typedListener != null) typedListener.ExitShootingStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlayerGrammarVisitor<TResult> typedVisitor = visitor as IPlayerGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShootingStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShootingStatementContext shootingStatement() {
		ShootingStatementContext _localctx = new ShootingStatementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_shootingStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24; Match(SHOOT);
			State = 25; direction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HealthCheckStatementContext : ParserRuleContext {
		public ITerminalNode HEALTH() { return GetToken(PlayerGrammarParser.HEALTH, 0); }
		public HealthCheckStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_healthCheckStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPlayerGrammarListener typedListener = listener as IPlayerGrammarListener;
			if (typedListener != null) typedListener.EnterHealthCheckStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlayerGrammarListener typedListener = listener as IPlayerGrammarListener;
			if (typedListener != null) typedListener.ExitHealthCheckStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlayerGrammarVisitor<TResult> typedVisitor = visitor as IPlayerGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHealthCheckStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HealthCheckStatementContext healthCheckStatement() {
		HealthCheckStatementContext _localctx = new HealthCheckStatementContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_healthCheckStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; Match(HEALTH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\f \x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x3\x2\x3\x2\x3\x3\x3"+
		"\x3\x3\x3\x5\x3\x14\n\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3"+
		"\x6\x3\a\x3\a\x3\a\x2\x2\x2\b\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\x2\x3\x3"+
		"\x2\x5\b\x1B\x2\xE\x3\x2\x2\x2\x4\x13\x3\x2\x2\x2\x6\x15\x3\x2\x2\x2\b"+
		"\x17\x3\x2\x2\x2\n\x1A\x3\x2\x2\x2\f\x1D\x3\x2\x2\x2\xE\xF\x5\x4\x3\x2"+
		"\xF\x3\x3\x2\x2\x2\x10\x14\x5\b\x5\x2\x11\x14\x5\n\x6\x2\x12\x14\x5\f"+
		"\a\x2\x13\x10\x3\x2\x2\x2\x13\x11\x3\x2\x2\x2\x13\x12\x3\x2\x2\x2\x14"+
		"\x5\x3\x2\x2\x2\x15\x16\t\x2\x2\x2\x16\a\x3\x2\x2\x2\x17\x18\a\t\x2\x2"+
		"\x18\x19\x5\x6\x4\x2\x19\t\x3\x2\x2\x2\x1A\x1B\a\n\x2\x2\x1B\x1C\x5\x6"+
		"\x4\x2\x1C\v\x3\x2\x2\x2\x1D\x1E\a\v\x2\x2\x1E\r\x3\x2\x2\x2\x3\x13";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LabWork1github
