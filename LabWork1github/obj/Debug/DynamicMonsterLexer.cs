//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Dana\source\repos\LabWork1github\LabWork1github\DynamicMonster.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LabWork1github {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DynamicMonsterLexer : Lexer {
	public const int
		RANDOM=1, DISTANCE=2, DAMAGE=3, DIRECTION=4, NAME_T=5, IN=6, TRAP=7, PLAYER=8, 
		PLACE_T=9, ROUND=10, NEAR=11, IS=12, ME=13, IF=14, TO=15, WHILE=16, HEALTH=17, 
		ALIVE=18, MOVE=19, SHOOT=20, EQUALS=21, ABSOLUTE=22, EXPRESSIONCONNECTER=23, 
		COMPARE=24, NUMOPERATION=25, PARENTHESISSTART=26, PARENTHESISCLOSE=27, 
		BRACKETCLOSE=28, BRACKETSTART=29, COLON=30, SEMI=31, COMMA=32, ATTRIBUTE=33, 
		NUMBER=34, ID=35, WS=36;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"RANDOM", "DISTANCE", "DAMAGE", "DIRECTION", "NAME_T", "IN", "TRAP", "PLAYER", 
		"PLACE_T", "ROUND", "NEAR", "IS", "ME", "IF", "TO", "WHILE", "HEALTH", 
		"ALIVE", "MOVE", "SHOOT", "EQUALS", "ABSOLUTE", "EXPRESSIONCONNECTER", 
		"COMPARE", "NUMOPERATION", "PARENTHESISSTART", "PARENTHESISCLOSE", "BRACKETCLOSE", 
		"BRACKETSTART", "COLON", "SEMI", "COMMA", "ATTRIBUTE", "NUMBER", "ID", 
		"WS"
	};


	public DynamicMonsterLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'random'", "'distance'", "'damage'", null, "'name'", "'in'", "'trap'", 
		"'player'", "'place'", "'round'", "'near'", "'is'", "'me'", "'if'", "'to'", 
		"'while'", "'HP'", "'alive'", "'move'", "'shoot'", "'='", "'|'", null, 
		null, null, "'('", "')'", "'}'", "'{'", "':'", "';'", "','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "RANDOM", "DISTANCE", "DAMAGE", "DIRECTION", "NAME_T", "IN", "TRAP", 
		"PLAYER", "PLACE_T", "ROUND", "NEAR", "IS", "ME", "IF", "TO", "WHILE", 
		"HEALTH", "ALIVE", "MOVE", "SHOOT", "EQUALS", "ABSOLUTE", "EXPRESSIONCONNECTER", 
		"COMPARE", "NUMOPERATION", "PARENTHESISSTART", "PARENTHESISCLOSE", "BRACKETCLOSE", 
		"BRACKETSTART", "COLON", "SEMI", "COMMA", "ATTRIBUTE", "NUMBER", "ID", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DynamicMonster.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2&\xE2\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF\x3"+
		"\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\xB8\n"+
		"\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\xBF\n\x19\x3\x1A\x3\x1A"+
		"\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F"+
		"\x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x6#\xD4\n#\r#\xE#\xD5\x3$\x3$\a$\xDA\n"+
		"$\f$\xE$\xDD\v$\x3%\x3%\x3%\x3%\x2\x2\x2&\x3\x2\x3\x5\x2\x4\a\x2\x5\t"+
		"\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2"+
		"\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)"+
		"\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C\x37\x2"+
		"\x1D\x39\x2\x1E;\x2\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x45\x2$G\x2%I\x2&\x3"+
		"\x2\t\x6\x2\x44\x44HHNNTT\x4\x2>>@@\x6\x2\'\',-//\x31\x31\x3\x2\x32;\x4"+
		"\x2\x43\\\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\x5\x2\v\f\xF\xF\"\"\xE6\x2"+
		"\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2"+
		"\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2"+
		"\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2"+
		"\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2"+
		"\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2"+
		"\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2"+
		"\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2"+
		"\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2"+
		"\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2"+
		"\x3K\x3\x2\x2\x2\x5R\x3\x2\x2\x2\a[\x3\x2\x2\x2\t\x62\x3\x2\x2\x2\v\x64"+
		"\x3\x2\x2\x2\ri\x3\x2\x2\x2\xFl\x3\x2\x2\x2\x11q\x3\x2\x2\x2\x13x\x3\x2"+
		"\x2\x2\x15~\x3\x2\x2\x2\x17\x84\x3\x2\x2\x2\x19\x89\x3\x2\x2\x2\x1B\x8C"+
		"\x3\x2\x2\x2\x1D\x8F\x3\x2\x2\x2\x1F\x92\x3\x2\x2\x2!\x95\x3\x2\x2\x2"+
		"#\x9B\x3\x2\x2\x2%\x9E\x3\x2\x2\x2\'\xA4\x3\x2\x2\x2)\xA9\x3\x2\x2\x2"+
		"+\xAF\x3\x2\x2\x2-\xB1\x3\x2\x2\x2/\xB7\x3\x2\x2\x2\x31\xBE\x3\x2\x2\x2"+
		"\x33\xC0\x3\x2\x2\x2\x35\xC2\x3\x2\x2\x2\x37\xC4\x3\x2\x2\x2\x39\xC6\x3"+
		"\x2\x2\x2;\xC8\x3\x2\x2\x2=\xCA\x3\x2\x2\x2?\xCC\x3\x2\x2\x2\x41\xCE\x3"+
		"\x2\x2\x2\x43\xD0\x3\x2\x2\x2\x45\xD3\x3\x2\x2\x2G\xD7\x3\x2\x2\x2I\xDE"+
		"\x3\x2\x2\x2KL\at\x2\x2LM\a\x63\x2\x2MN\ap\x2\x2NO\a\x66\x2\x2OP\aq\x2"+
		"\x2PQ\ao\x2\x2Q\x4\x3\x2\x2\x2RS\a\x66\x2\x2ST\ak\x2\x2TU\au\x2\x2UV\a"+
		"v\x2\x2VW\a\x63\x2\x2WX\ap\x2\x2XY\a\x65\x2\x2YZ\ag\x2\x2Z\x6\x3\x2\x2"+
		"\x2[\\\a\x66\x2\x2\\]\a\x63\x2\x2]^\ao\x2\x2^_\a\x63\x2\x2_`\ai\x2\x2"+
		"`\x61\ag\x2\x2\x61\b\x3\x2\x2\x2\x62\x63\t\x2\x2\x2\x63\n\x3\x2\x2\x2"+
		"\x64\x65\ap\x2\x2\x65\x66\a\x63\x2\x2\x66g\ao\x2\x2gh\ag\x2\x2h\f\x3\x2"+
		"\x2\x2ij\ak\x2\x2jk\ap\x2\x2k\xE\x3\x2\x2\x2lm\av\x2\x2mn\at\x2\x2no\a"+
		"\x63\x2\x2op\ar\x2\x2p\x10\x3\x2\x2\x2qr\ar\x2\x2rs\an\x2\x2st\a\x63\x2"+
		"\x2tu\a{\x2\x2uv\ag\x2\x2vw\at\x2\x2w\x12\x3\x2\x2\x2xy\ar\x2\x2yz\an"+
		"\x2\x2z{\a\x63\x2\x2{|\a\x65\x2\x2|}\ag\x2\x2}\x14\x3\x2\x2\x2~\x7F\a"+
		"t\x2\x2\x7F\x80\aq\x2\x2\x80\x81\aw\x2\x2\x81\x82\ap\x2\x2\x82\x83\a\x66"+
		"\x2\x2\x83\x16\x3\x2\x2\x2\x84\x85\ap\x2\x2\x85\x86\ag\x2\x2\x86\x87\a"+
		"\x63\x2\x2\x87\x88\at\x2\x2\x88\x18\x3\x2\x2\x2\x89\x8A\ak\x2\x2\x8A\x8B"+
		"\au\x2\x2\x8B\x1A\x3\x2\x2\x2\x8C\x8D\ao\x2\x2\x8D\x8E\ag\x2\x2\x8E\x1C"+
		"\x3\x2\x2\x2\x8F\x90\ak\x2\x2\x90\x91\ah\x2\x2\x91\x1E\x3\x2\x2\x2\x92"+
		"\x93\av\x2\x2\x93\x94\aq\x2\x2\x94 \x3\x2\x2\x2\x95\x96\ay\x2\x2\x96\x97"+
		"\aj\x2\x2\x97\x98\ak\x2\x2\x98\x99\an\x2\x2\x99\x9A\ag\x2\x2\x9A\"\x3"+
		"\x2\x2\x2\x9B\x9C\aJ\x2\x2\x9C\x9D\aR\x2\x2\x9D$\x3\x2\x2\x2\x9E\x9F\a"+
		"\x63\x2\x2\x9F\xA0\an\x2\x2\xA0\xA1\ak\x2\x2\xA1\xA2\ax\x2\x2\xA2\xA3"+
		"\ag\x2\x2\xA3&\x3\x2\x2\x2\xA4\xA5\ao\x2\x2\xA5\xA6\aq\x2\x2\xA6\xA7\a"+
		"x\x2\x2\xA7\xA8\ag\x2\x2\xA8(\x3\x2\x2\x2\xA9\xAA\au\x2\x2\xAA\xAB\aj"+
		"\x2\x2\xAB\xAC\aq\x2\x2\xAC\xAD\aq\x2\x2\xAD\xAE\av\x2\x2\xAE*\x3\x2\x2"+
		"\x2\xAF\xB0\a?\x2\x2\xB0,\x3\x2\x2\x2\xB1\xB2\a~\x2\x2\xB2.\x3\x2\x2\x2"+
		"\xB3\xB4\a~\x2\x2\xB4\xB8\a~\x2\x2\xB5\xB6\a(\x2\x2\xB6\xB8\a(\x2\x2\xB7"+
		"\xB3\x3\x2\x2\x2\xB7\xB5\x3\x2\x2\x2\xB8\x30\x3\x2\x2\x2\xB9\xBF\t\x3"+
		"\x2\x2\xBA\xBB\a?\x2\x2\xBB\xBF\a?\x2\x2\xBC\xBD\a#\x2\x2\xBD\xBF\a?\x2"+
		"\x2\xBE\xB9\x3\x2\x2\x2\xBE\xBA\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2\xBF\x32"+
		"\x3\x2\x2\x2\xC0\xC1\t\x4\x2\x2\xC1\x34\x3\x2\x2\x2\xC2\xC3\a*\x2\x2\xC3"+
		"\x36\x3\x2\x2\x2\xC4\xC5\a+\x2\x2\xC5\x38\x3\x2\x2\x2\xC6\xC7\a\x7F\x2"+
		"\x2\xC7:\x3\x2\x2\x2\xC8\xC9\a}\x2\x2\xC9<\x3\x2\x2\x2\xCA\xCB\a<\x2\x2"+
		"\xCB>\x3\x2\x2\x2\xCC\xCD\a=\x2\x2\xCD@\x3\x2\x2\x2\xCE\xCF\a.\x2\x2\xCF"+
		"\x42\x3\x2\x2\x2\xD0\xD1\a\x30\x2\x2\xD1\x44\x3\x2\x2\x2\xD2\xD4\t\x5"+
		"\x2\x2\xD3\xD2\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5\xD3\x3\x2\x2\x2\xD5"+
		"\xD6\x3\x2\x2\x2\xD6\x46\x3\x2\x2\x2\xD7\xDB\t\x6\x2\x2\xD8\xDA\t\a\x2"+
		"\x2\xD9\xD8\x3\x2\x2\x2\xDA\xDD\x3\x2\x2\x2\xDB\xD9\x3\x2\x2\x2\xDB\xDC"+
		"\x3\x2\x2\x2\xDCH\x3\x2\x2\x2\xDD\xDB\x3\x2\x2\x2\xDE\xDF\t\b\x2\x2\xDF"+
		"\xE0\x3\x2\x2\x2\xE0\xE1\b%\x2\x2\xE1J\x3\x2\x2\x2\a\x2\xB7\xBE\xD5\xDB"+
		"\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LabWork1github
