//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Dana\source\repos\LabWork1github\LabWork1github\DynamicMonster.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LabWork1github {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DynamicMonsterLexer : Lexer {
	public const int
		DISTANCE=1, DAMAGE=2, DIRECTION=3, NAME_T=4, RANGE_T=5, IN=6, MOVEROUNDS_T=7, 
		SHOOTROUNDS_T=8, PLAYER=9, ROUND=10, ME=11, IF=12, TO=13, WHILE=14, HEALTH=15, 
		ALIVE=16, NUMHOLDER=17, MOVE=18, SHOOT=19, EQUALS=20, EXPRESSIONCONNECTER=21, 
		COMPARE=22, NUMOPERATION=23, PARENTHESISSTART=24, PARENTHESISCLOSE=25, 
		BRACKETCLOSE=26, BRACKETSTART=27, COLON=28, SEMI=29, COMMA=30, NUMBER=31, 
		ID=32, WS=33;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"DISTANCE", "DAMAGE", "DIRECTION", "NAME_T", "RANGE_T", "IN", "MOVEROUNDS_T", 
		"SHOOTROUNDS_T", "PLAYER", "ROUND", "ME", "IF", "TO", "WHILE", "HEALTH", 
		"ALIVE", "NUMHOLDER", "MOVE", "SHOOT", "EQUALS", "EXPRESSIONCONNECTER", 
		"COMPARE", "NUMOPERATION", "PARENTHESISSTART", "PARENTHESISCLOSE", "BRACKETCLOSE", 
		"BRACKETSTART", "COLON", "SEMI", "COMMA", "NUMBER", "ID", "WS"
	};


	public DynamicMonsterLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'distance'", "'damage'", null, "'name'", "'range'", "'in'", "'moverounds'", 
		"'shootrounds'", "'player'", "'round'", "'me'", "'if'", "'to'", "'while'", 
		"'HP'", "'alive'", null, "'move'", "'shoot'", "'='", null, null, null, 
		"'('", "')'", "'}'", "'{'", "':'", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DISTANCE", "DAMAGE", "DIRECTION", "NAME_T", "RANGE_T", "IN", "MOVEROUNDS_T", 
		"SHOOTROUNDS_T", "PLAYER", "ROUND", "ME", "IF", "TO", "WHILE", "HEALTH", 
		"ALIVE", "NUMHOLDER", "MOVE", "SHOOT", "EQUALS", "EXPRESSIONCONNECTER", 
		"COMPARE", "NUMOPERATION", "PARENTHESISSTART", "PARENTHESISCLOSE", "BRACKETCLOSE", 
		"BRACKETSTART", "COLON", "SEMI", "COMMA", "NUMBER", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DynamicMonster.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2#\xE0\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3"+
		"\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x5\x12\xA5"+
		"\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\xB8\n"+
		"\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\xBF\n\x17\x3\x18\x3\x18"+
		"\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D"+
		"\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x6 \xD2\n \r \xE \xD3\x3!\x3!\a!\xD8"+
		"\n!\f!\xE!\xDB\v!\x3\"\x3\"\x3\"\x3\"\x2\x2\x2#\x3\x2\x3\x5\x2\x4\a\x2"+
		"\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r"+
		"\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2"+
		"\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C"+
		"\x37\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x3\x2\t\x6\x2"+
		"\x44\x44HHNNTT\x4\x2>>@@\x6\x2\'\',-//\x31\x31\x3\x2\x32;\x4\x2\x43\\"+
		"\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\x5\x2\v\f\xF\xF\"\"\xE6\x2\x3\x3\x2"+
		"\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2"+
		"\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3"+
		"\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2"+
		"\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2"+
		"\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+"+
		"\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33"+
		"\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2"+
		"\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2"+
		"\x43\x3\x2\x2\x2\x3\x45\x3\x2\x2\x2\x5N\x3\x2\x2\x2\aU\x3\x2\x2\x2\tW"+
		"\x3\x2\x2\x2\v\\\x3\x2\x2\x2\r\x62\x3\x2\x2\x2\xF\x65\x3\x2\x2\x2\x11"+
		"p\x3\x2\x2\x2\x13|\x3\x2\x2\x2\x15\x83\x3\x2\x2\x2\x17\x89\x3\x2\x2\x2"+
		"\x19\x8C\x3\x2\x2\x2\x1B\x8F\x3\x2\x2\x2\x1D\x92\x3\x2\x2\x2\x1F\x98\x3"+
		"\x2\x2\x2!\x9B\x3\x2\x2\x2#\xA4\x3\x2\x2\x2%\xA6\x3\x2\x2\x2\'\xAB\x3"+
		"\x2\x2\x2)\xB1\x3\x2\x2\x2+\xB7\x3\x2\x2\x2-\xBE\x3\x2\x2\x2/\xC0\x3\x2"+
		"\x2\x2\x31\xC2\x3\x2\x2\x2\x33\xC4\x3\x2\x2\x2\x35\xC6\x3\x2\x2\x2\x37"+
		"\xC8\x3\x2\x2\x2\x39\xCA\x3\x2\x2\x2;\xCC\x3\x2\x2\x2=\xCE\x3\x2\x2\x2"+
		"?\xD1\x3\x2\x2\x2\x41\xD5\x3\x2\x2\x2\x43\xDC\x3\x2\x2\x2\x45\x46\a\x66"+
		"\x2\x2\x46G\ak\x2\x2GH\au\x2\x2HI\av\x2\x2IJ\a\x63\x2\x2JK\ap\x2\x2KL"+
		"\a\x65\x2\x2LM\ag\x2\x2M\x4\x3\x2\x2\x2NO\a\x66\x2\x2OP\a\x63\x2\x2PQ"+
		"\ao\x2\x2QR\a\x63\x2\x2RS\ai\x2\x2ST\ag\x2\x2T\x6\x3\x2\x2\x2UV\t\x2\x2"+
		"\x2V\b\x3\x2\x2\x2WX\ap\x2\x2XY\a\x63\x2\x2YZ\ao\x2\x2Z[\ag\x2\x2[\n\x3"+
		"\x2\x2\x2\\]\at\x2\x2]^\a\x63\x2\x2^_\ap\x2\x2_`\ai\x2\x2`\x61\ag\x2\x2"+
		"\x61\f\x3\x2\x2\x2\x62\x63\ak\x2\x2\x63\x64\ap\x2\x2\x64\xE\x3\x2\x2\x2"+
		"\x65\x66\ao\x2\x2\x66g\aq\x2\x2gh\ax\x2\x2hi\ag\x2\x2ij\at\x2\x2jk\aq"+
		"\x2\x2kl\aw\x2\x2lm\ap\x2\x2mn\a\x66\x2\x2no\au\x2\x2o\x10\x3\x2\x2\x2"+
		"pq\au\x2\x2qr\aj\x2\x2rs\aq\x2\x2st\aq\x2\x2tu\av\x2\x2uv\at\x2\x2vw\a"+
		"q\x2\x2wx\aw\x2\x2xy\ap\x2\x2yz\a\x66\x2\x2z{\au\x2\x2{\x12\x3\x2\x2\x2"+
		"|}\ar\x2\x2}~\an\x2\x2~\x7F\a\x63\x2\x2\x7F\x80\a{\x2\x2\x80\x81\ag\x2"+
		"\x2\x81\x82\at\x2\x2\x82\x14\x3\x2\x2\x2\x83\x84\at\x2\x2\x84\x85\aq\x2"+
		"\x2\x85\x86\aw\x2\x2\x86\x87\ap\x2\x2\x87\x88\a\x66\x2\x2\x88\x16\x3\x2"+
		"\x2\x2\x89\x8A\ao\x2\x2\x8A\x8B\ag\x2\x2\x8B\x18\x3\x2\x2\x2\x8C\x8D\a"+
		"k\x2\x2\x8D\x8E\ah\x2\x2\x8E\x1A\x3\x2\x2\x2\x8F\x90\av\x2\x2\x90\x91"+
		"\aq\x2\x2\x91\x1C\x3\x2\x2\x2\x92\x93\ay\x2\x2\x93\x94\aj\x2\x2\x94\x95"+
		"\ak\x2\x2\x95\x96\an\x2\x2\x96\x97\ag\x2\x2\x97\x1E\x3\x2\x2\x2\x98\x99"+
		"\aJ\x2\x2\x99\x9A\aR\x2\x2\x9A \x3\x2\x2\x2\x9B\x9C\a\x63\x2\x2\x9C\x9D"+
		"\an\x2\x2\x9D\x9E\ak\x2\x2\x9E\x9F\ax\x2\x2\x9F\xA0\ag\x2\x2\xA0\"\x3"+
		"\x2\x2\x2\xA1\xA5\x5\x1F\x10\x2\xA2\xA5\x5\x15\v\x2\xA3\xA5\x5? \x2\xA4"+
		"\xA1\x3\x2\x2\x2\xA4\xA2\x3\x2\x2\x2\xA4\xA3\x3\x2\x2\x2\xA5$\x3\x2\x2"+
		"\x2\xA6\xA7\ao\x2\x2\xA7\xA8\aq\x2\x2\xA8\xA9\ax\x2\x2\xA9\xAA\ag\x2\x2"+
		"\xAA&\x3\x2\x2\x2\xAB\xAC\au\x2\x2\xAC\xAD\aj\x2\x2\xAD\xAE\aq\x2\x2\xAE"+
		"\xAF\aq\x2\x2\xAF\xB0\av\x2\x2\xB0(\x3\x2\x2\x2\xB1\xB2\a?\x2\x2\xB2*"+
		"\x3\x2\x2\x2\xB3\xB4\a~\x2\x2\xB4\xB8\a~\x2\x2\xB5\xB6\a(\x2\x2\xB6\xB8"+
		"\a(\x2\x2\xB7\xB3\x3\x2\x2\x2\xB7\xB5\x3\x2\x2\x2\xB8,\x3\x2\x2\x2\xB9"+
		"\xBF\t\x3\x2\x2\xBA\xBB\a?\x2\x2\xBB\xBF\a?\x2\x2\xBC\xBD\a#\x2\x2\xBD"+
		"\xBF\a?\x2\x2\xBE\xB9\x3\x2\x2\x2\xBE\xBA\x3\x2\x2\x2\xBE\xBC\x3\x2\x2"+
		"\x2\xBF.\x3\x2\x2\x2\xC0\xC1\t\x4\x2\x2\xC1\x30\x3\x2\x2\x2\xC2\xC3\a"+
		"*\x2\x2\xC3\x32\x3\x2\x2\x2\xC4\xC5\a+\x2\x2\xC5\x34\x3\x2\x2\x2\xC6\xC7"+
		"\a\x7F\x2\x2\xC7\x36\x3\x2\x2\x2\xC8\xC9\a}\x2\x2\xC9\x38\x3\x2\x2\x2"+
		"\xCA\xCB\a<\x2\x2\xCB:\x3\x2\x2\x2\xCC\xCD\a=\x2\x2\xCD<\x3\x2\x2\x2\xCE"+
		"\xCF\a.\x2\x2\xCF>\x3\x2\x2\x2\xD0\xD2\t\x5\x2\x2\xD1\xD0\x3\x2\x2\x2"+
		"\xD2\xD3\x3\x2\x2\x2\xD3\xD1\x3\x2\x2\x2\xD3\xD4\x3\x2\x2\x2\xD4@\x3\x2"+
		"\x2\x2\xD5\xD9\t\x6\x2\x2\xD6\xD8\t\a\x2\x2\xD7\xD6\x3\x2\x2\x2\xD8\xDB"+
		"\x3\x2\x2\x2\xD9\xD7\x3\x2\x2\x2\xD9\xDA\x3\x2\x2\x2\xDA\x42\x3\x2\x2"+
		"\x2\xDB\xD9\x3\x2\x2\x2\xDC\xDD\t\b\x2\x2\xDD\xDE\x3\x2\x2\x2\xDE\xDF"+
		"\b\"\x2\x2\xDF\x44\x3\x2\x2\x2\b\x2\xA4\xB7\xBE\xD3\xD9\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LabWork1github
