//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Dana\source\repos\LabWork1github\LabWork1github\DynamicMonster.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LabWork1github {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DynamicMonsterLexer : Lexer {
	public const int
		RANDOM=1, DISTANCE=2, DAMAGE=3, DIRECTION=4, NAME_T=5, RANGE_T=6, IN=7, 
		TRAP=8, PLAYER=9, PLACE_T=10, ROUND=11, NEAR=12, IS=13, ME=14, IF=15, 
		TO=16, WHILE=17, HEALTH=18, ALIVE=19, MOVE=20, SHOOT=21, EQUALS=22, ABSOLUTE=23, 
		EXPRESSIONCONNECTER=24, COMPARE=25, NUMOPERATION=26, PARENTHESISSTART=27, 
		PARENTHESISCLOSE=28, BRACKETCLOSE=29, BRACKETSTART=30, COLON=31, SEMI=32, 
		COMMA=33, ATTRIBUTE=34, NUMBER=35, ID=36, WS=37;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"RANDOM", "DISTANCE", "DAMAGE", "DIRECTION", "NAME_T", "RANGE_T", "IN", 
		"TRAP", "PLAYER", "PLACE_T", "ROUND", "NEAR", "IS", "ME", "IF", "TO", 
		"WHILE", "HEALTH", "ALIVE", "MOVE", "SHOOT", "EQUALS", "ABSOLUTE", "EXPRESSIONCONNECTER", 
		"COMPARE", "NUMOPERATION", "PARENTHESISSTART", "PARENTHESISCLOSE", "BRACKETCLOSE", 
		"BRACKETSTART", "COLON", "SEMI", "COMMA", "ATTRIBUTE", "NUMBER", "ID", 
		"WS"
	};


	public DynamicMonsterLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'random'", "'distance'", "'damage'", null, "'name'", "'range'", 
		"'in'", "'trap'", "'player'", "'place'", "'round'", "'near'", "'is'", 
		"'me'", "'if'", "'to'", "'while'", "'HP'", "'alive'", "'move'", "'shoot'", 
		"'='", "'|'", null, null, null, "'('", "')'", "'}'", "'{'", "':'", "';'", 
		"','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "RANDOM", "DISTANCE", "DAMAGE", "DIRECTION", "NAME_T", "RANGE_T", 
		"IN", "TRAP", "PLAYER", "PLACE_T", "ROUND", "NEAR", "IS", "ME", "IF", 
		"TO", "WHILE", "HEALTH", "ALIVE", "MOVE", "SHOOT", "EQUALS", "ABSOLUTE", 
		"EXPRESSIONCONNECTER", "COMPARE", "NUMOPERATION", "PARENTHESISSTART", 
		"PARENTHESISCLOSE", "BRACKETCLOSE", "BRACKETSTART", "COLON", "SEMI", "COMMA", 
		"ATTRIBUTE", "NUMBER", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DynamicMonster.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\'\xEA\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3"+
		"\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\xC0\n\x19\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x5\x1A\xC7\n\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D"+
		"\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x3$\x6"+
		"$\xDC\n$\r$\xE$\xDD\x3%\x3%\a%\xE2\n%\f%\xE%\xE5\v%\x3&\x3&\x3&\x3&\x2"+
		"\x2\x2\'\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2"+
		"\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11"+
		"!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31"+
		"\x2\x1A\x33\x2\x1B\x35\x2\x1C\x37\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 ?\x2!"+
		"\x41\x2\"\x43\x2#\x45\x2$G\x2%I\x2&K\x2\'\x3\x2\t\x6\x2\x44\x44HHNNTT"+
		"\x4\x2>>@@\x6\x2\'\',-//\x31\x31\x3\x2\x32;\x4\x2\x43\\\x63|\x6\x2\x32"+
		";\x43\\\x61\x61\x63|\x5\x2\v\f\xF\xF\"\"\xEE\x2\x3\x3\x2\x2\x2\x2\x5\x3"+
		"\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2"+
		"\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15"+
		"\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2"+
		"\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2"+
		"\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-"+
		"\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2"+
		"\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2"+
		"\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2"+
		"\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x3"+
		"M\x3\x2\x2\x2\x5T\x3\x2\x2\x2\a]\x3\x2\x2\x2\t\x64\x3\x2\x2\x2\v\x66\x3"+
		"\x2\x2\x2\rk\x3\x2\x2\x2\xFq\x3\x2\x2\x2\x11t\x3\x2\x2\x2\x13y\x3\x2\x2"+
		"\x2\x15\x80\x3\x2\x2\x2\x17\x86\x3\x2\x2\x2\x19\x8C\x3\x2\x2\x2\x1B\x91"+
		"\x3\x2\x2\x2\x1D\x94\x3\x2\x2\x2\x1F\x97\x3\x2\x2\x2!\x9A\x3\x2\x2\x2"+
		"#\x9D\x3\x2\x2\x2%\xA3\x3\x2\x2\x2\'\xA6\x3\x2\x2\x2)\xAC\x3\x2\x2\x2"+
		"+\xB1\x3\x2\x2\x2-\xB7\x3\x2\x2\x2/\xB9\x3\x2\x2\x2\x31\xBF\x3\x2\x2\x2"+
		"\x33\xC6\x3\x2\x2\x2\x35\xC8\x3\x2\x2\x2\x37\xCA\x3\x2\x2\x2\x39\xCC\x3"+
		"\x2\x2\x2;\xCE\x3\x2\x2\x2=\xD0\x3\x2\x2\x2?\xD2\x3\x2\x2\x2\x41\xD4\x3"+
		"\x2\x2\x2\x43\xD6\x3\x2\x2\x2\x45\xD8\x3\x2\x2\x2G\xDB\x3\x2\x2\x2I\xDF"+
		"\x3\x2\x2\x2K\xE6\x3\x2\x2\x2MN\at\x2\x2NO\a\x63\x2\x2OP\ap\x2\x2PQ\a"+
		"\x66\x2\x2QR\aq\x2\x2RS\ao\x2\x2S\x4\x3\x2\x2\x2TU\a\x66\x2\x2UV\ak\x2"+
		"\x2VW\au\x2\x2WX\av\x2\x2XY\a\x63\x2\x2YZ\ap\x2\x2Z[\a\x65\x2\x2[\\\a"+
		"g\x2\x2\\\x6\x3\x2\x2\x2]^\a\x66\x2\x2^_\a\x63\x2\x2_`\ao\x2\x2`\x61\a"+
		"\x63\x2\x2\x61\x62\ai\x2\x2\x62\x63\ag\x2\x2\x63\b\x3\x2\x2\x2\x64\x65"+
		"\t\x2\x2\x2\x65\n\x3\x2\x2\x2\x66g\ap\x2\x2gh\a\x63\x2\x2hi\ao\x2\x2i"+
		"j\ag\x2\x2j\f\x3\x2\x2\x2kl\at\x2\x2lm\a\x63\x2\x2mn\ap\x2\x2no\ai\x2"+
		"\x2op\ag\x2\x2p\xE\x3\x2\x2\x2qr\ak\x2\x2rs\ap\x2\x2s\x10\x3\x2\x2\x2"+
		"tu\av\x2\x2uv\at\x2\x2vw\a\x63\x2\x2wx\ar\x2\x2x\x12\x3\x2\x2\x2yz\ar"+
		"\x2\x2z{\an\x2\x2{|\a\x63\x2\x2|}\a{\x2\x2}~\ag\x2\x2~\x7F\at\x2\x2\x7F"+
		"\x14\x3\x2\x2\x2\x80\x81\ar\x2\x2\x81\x82\an\x2\x2\x82\x83\a\x63\x2\x2"+
		"\x83\x84\a\x65\x2\x2\x84\x85\ag\x2\x2\x85\x16\x3\x2\x2\x2\x86\x87\at\x2"+
		"\x2\x87\x88\aq\x2\x2\x88\x89\aw\x2\x2\x89\x8A\ap\x2\x2\x8A\x8B\a\x66\x2"+
		"\x2\x8B\x18\x3\x2\x2\x2\x8C\x8D\ap\x2\x2\x8D\x8E\ag\x2\x2\x8E\x8F\a\x63"+
		"\x2\x2\x8F\x90\at\x2\x2\x90\x1A\x3\x2\x2\x2\x91\x92\ak\x2\x2\x92\x93\a"+
		"u\x2\x2\x93\x1C\x3\x2\x2\x2\x94\x95\ao\x2\x2\x95\x96\ag\x2\x2\x96\x1E"+
		"\x3\x2\x2\x2\x97\x98\ak\x2\x2\x98\x99\ah\x2\x2\x99 \x3\x2\x2\x2\x9A\x9B"+
		"\av\x2\x2\x9B\x9C\aq\x2\x2\x9C\"\x3\x2\x2\x2\x9D\x9E\ay\x2\x2\x9E\x9F"+
		"\aj\x2\x2\x9F\xA0\ak\x2\x2\xA0\xA1\an\x2\x2\xA1\xA2\ag\x2\x2\xA2$\x3\x2"+
		"\x2\x2\xA3\xA4\aJ\x2\x2\xA4\xA5\aR\x2\x2\xA5&\x3\x2\x2\x2\xA6\xA7\a\x63"+
		"\x2\x2\xA7\xA8\an\x2\x2\xA8\xA9\ak\x2\x2\xA9\xAA\ax\x2\x2\xAA\xAB\ag\x2"+
		"\x2\xAB(\x3\x2\x2\x2\xAC\xAD\ao\x2\x2\xAD\xAE\aq\x2\x2\xAE\xAF\ax\x2\x2"+
		"\xAF\xB0\ag\x2\x2\xB0*\x3\x2\x2\x2\xB1\xB2\au\x2\x2\xB2\xB3\aj\x2\x2\xB3"+
		"\xB4\aq\x2\x2\xB4\xB5\aq\x2\x2\xB5\xB6\av\x2\x2\xB6,\x3\x2\x2\x2\xB7\xB8"+
		"\a?\x2\x2\xB8.\x3\x2\x2\x2\xB9\xBA\a~\x2\x2\xBA\x30\x3\x2\x2\x2\xBB\xBC"+
		"\a~\x2\x2\xBC\xC0\a~\x2\x2\xBD\xBE\a(\x2\x2\xBE\xC0\a(\x2\x2\xBF\xBB\x3"+
		"\x2\x2\x2\xBF\xBD\x3\x2\x2\x2\xC0\x32\x3\x2\x2\x2\xC1\xC7\t\x3\x2\x2\xC2"+
		"\xC3\a?\x2\x2\xC3\xC7\a?\x2\x2\xC4\xC5\a#\x2\x2\xC5\xC7\a?\x2\x2\xC6\xC1"+
		"\x3\x2\x2\x2\xC6\xC2\x3\x2\x2\x2\xC6\xC4\x3\x2\x2\x2\xC7\x34\x3\x2\x2"+
		"\x2\xC8\xC9\t\x4\x2\x2\xC9\x36\x3\x2\x2\x2\xCA\xCB\a*\x2\x2\xCB\x38\x3"+
		"\x2\x2\x2\xCC\xCD\a+\x2\x2\xCD:\x3\x2\x2\x2\xCE\xCF\a\x7F\x2\x2\xCF<\x3"+
		"\x2\x2\x2\xD0\xD1\a}\x2\x2\xD1>\x3\x2\x2\x2\xD2\xD3\a<\x2\x2\xD3@\x3\x2"+
		"\x2\x2\xD4\xD5\a=\x2\x2\xD5\x42\x3\x2\x2\x2\xD6\xD7\a.\x2\x2\xD7\x44\x3"+
		"\x2\x2\x2\xD8\xD9\a\x30\x2\x2\xD9\x46\x3\x2\x2\x2\xDA\xDC\t\x5\x2\x2\xDB"+
		"\xDA\x3\x2\x2\x2\xDC\xDD\x3\x2\x2\x2\xDD\xDB\x3\x2\x2\x2\xDD\xDE\x3\x2"+
		"\x2\x2\xDEH\x3\x2\x2\x2\xDF\xE3\t\x6\x2\x2\xE0\xE2\t\a\x2\x2\xE1\xE0\x3"+
		"\x2\x2\x2\xE2\xE5\x3\x2\x2\x2\xE3\xE1\x3\x2\x2\x2\xE3\xE4\x3\x2\x2\x2"+
		"\xE4J\x3\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE6\xE7\t\b\x2\x2\xE7\xE8\x3\x2"+
		"\x2\x2\xE8\xE9\b&\x2\x2\xE9L\x3\x2\x2\x2\a\x2\xBF\xC6\xDD\xE3\x3\b\x2"+
		"\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LabWork1github
