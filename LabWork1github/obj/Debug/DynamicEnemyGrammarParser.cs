//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Dana\source\repos\LabWork1github\LabWork1github\g4 files\DynamicEnemyGrammar.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LabWork1github {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DynamicEnemyGrammarParser : Parser {
	public const int
		TELEPORT_PLACE=1, SPAWN_PLACE=2, SPAWN_TYPE=3, NOTHING=4, RANDOM=5, DISTANCE=6, 
		DAMAGE=7, DIRECTION=8, NAME_T=9, TRAP=10, MONSTER=11, PLAYER=12, PLACE_T=13, 
		ROUND=14, NEAR=15, IS=16, ME=17, IF=18, TO=19, WHILE=20, HEALTH=21, ALIVE=22, 
		MOVE=23, ON=24, SHOOT=25, SPAWN=26, TELEPORT_T=27, HEAL=28, EQUALS=29, 
		ABSOLUTE=30, NEGATE=31, BOOLCONNECTER=32, COMPARE=33, NUMCOMPARE=34, NUMCONNECTER=35, 
		PARENTHESISSTART=36, PARENTHESISCLOSE=37, BRACKETCLOSE=38, BRACKETSTART=39, 
		COLON=40, SEMI=41, COMMA=42, DOT=43, NUMBER=44, ID=45, WS=46, ATTRIBUTE=47;
	public const int
		RULE_definition = 0, RULE_name = 1, RULE_statementList = 2, RULE_statement = 3, 
		RULE_nameDeclaration = 4, RULE_trapNameDeclaration = 5, RULE_monsterNameDeclaration = 6, 
		RULE_healthDeclaration = 7, RULE_healAmountDeclaration = 8, RULE_damageAmountDeclaration = 9, 
		RULE_teleportPointDeclaration = 10, RULE_spawnPointDeclaration = 11, RULE_spawnTypeDeclaration = 12, 
		RULE_distanceDeclare = 13, RULE_moveDeclaration = 14, RULE_shootDeclaration = 15, 
		RULE_damageDeclaration = 16, RULE_healDeclaration = 17, RULE_spawnDeclaration = 18, 
		RULE_teleportDeclaration = 19, RULE_ifexpression = 20, RULE_whileexpression = 21, 
		RULE_block = 22, RULE_character = 23, RULE_possibleAttributes = 24, RULE_attributeReference = 25, 
		RULE_place = 26, RULE_x = 27, RULE_y = 28, RULE_expression = 29, RULE_something = 30, 
		RULE_operation = 31;
	public static readonly string[] ruleNames = {
		"definition", "name", "statementList", "statement", "nameDeclaration", 
		"trapNameDeclaration", "monsterNameDeclaration", "healthDeclaration", 
		"healAmountDeclaration", "damageAmountDeclaration", "teleportPointDeclaration", 
		"spawnPointDeclaration", "spawnTypeDeclaration", "distanceDeclare", "moveDeclaration", 
		"shootDeclaration", "damageDeclaration", "healDeclaration", "spawnDeclaration", 
		"teleportDeclaration", "ifexpression", "whileexpression", "block", "character", 
		"possibleAttributes", "attributeReference", "place", "x", "y", "expression", 
		"something", "operation"
	};

	private static readonly string[] _LiteralNames = {
		null, "'teleport_place'", "'spawn_place'", "'spawn_type'", "'nothing'", 
		"'random'", "'distance'", "'damage'", null, "'name'", "'trap'", "'monster'", 
		"'player'", "'place'", "'round'", "'near'", "'is'", "'me'", "'if'", "'to'", 
		"'while'", "'health'", "'alive'", "'move'", "'on'", "'shoot'", "'spawn'", 
		"'teleport'", "'heal'", "'='", "'|'", "'!'", null, null, null, null, "'('", 
		"')'", "'}'", "'{'", "':'", "';'", "','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TELEPORT_PLACE", "SPAWN_PLACE", "SPAWN_TYPE", "NOTHING", "RANDOM", 
		"DISTANCE", "DAMAGE", "DIRECTION", "NAME_T", "TRAP", "MONSTER", "PLAYER", 
		"PLACE_T", "ROUND", "NEAR", "IS", "ME", "IF", "TO", "WHILE", "HEALTH", 
		"ALIVE", "MOVE", "ON", "SHOOT", "SPAWN", "TELEPORT_T", "HEAL", "EQUALS", 
		"ABSOLUTE", "NEGATE", "BOOLCONNECTER", "COMPARE", "NUMCOMPARE", "NUMCONNECTER", 
		"PARENTHESISSTART", "PARENTHESISCLOSE", "BRACKETCLOSE", "BRACKETSTART", 
		"COLON", "SEMI", "COMMA", "DOT", "NUMBER", "ID", "WS", "ATTRIBUTE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DynamicEnemyGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public DynamicEnemyGrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DefinitionContext : ParserRuleContext {
		public StatementListContext[] statementList() {
			return GetRuleContexts<StatementListContext>();
		}
		public StatementListContext statementList(int i) {
			return GetRuleContext<StatementListContext>(i);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TRAP || _la==MONSTER) {
				{
				{
				State = 64; statementList();
				}
				}
				State = 69;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(DynamicEnemyGrammarParser.ID, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public NameDeclarationContext nameDeclaration() {
			return GetRuleContext<NameDeclarationContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; nameDeclaration();
			State = 76;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TELEPORT_PLACE) | (1L << SPAWN_PLACE) | (1L << SPAWN_TYPE) | (1L << DAMAGE) | (1L << IF) | (1L << WHILE) | (1L << HEALTH) | (1L << MOVE) | (1L << SHOOT) | (1L << SPAWN) | (1L << TELEPORT_T) | (1L << HEAL))) != 0)) {
				{
				{
				State = 73; statement();
				}
				}
				State = 78;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DamageAmountDeclarationContext damageAmountDeclaration() {
			return GetRuleContext<DamageAmountDeclarationContext>(0);
		}
		public HealAmountDeclarationContext healAmountDeclaration() {
			return GetRuleContext<HealAmountDeclarationContext>(0);
		}
		public TeleportPointDeclarationContext teleportPointDeclaration() {
			return GetRuleContext<TeleportPointDeclarationContext>(0);
		}
		public SpawnPointDeclarationContext spawnPointDeclaration() {
			return GetRuleContext<SpawnPointDeclarationContext>(0);
		}
		public SpawnTypeDeclarationContext spawnTypeDeclaration() {
			return GetRuleContext<SpawnTypeDeclarationContext>(0);
		}
		public HealthDeclarationContext healthDeclaration() {
			return GetRuleContext<HealthDeclarationContext>(0);
		}
		public HealDeclarationContext healDeclaration() {
			return GetRuleContext<HealDeclarationContext>(0);
		}
		public MoveDeclarationContext moveDeclaration() {
			return GetRuleContext<MoveDeclarationContext>(0);
		}
		public ShootDeclarationContext shootDeclaration() {
			return GetRuleContext<ShootDeclarationContext>(0);
		}
		public IfexpressionContext ifexpression() {
			return GetRuleContext<IfexpressionContext>(0);
		}
		public WhileexpressionContext whileexpression() {
			return GetRuleContext<WhileexpressionContext>(0);
		}
		public DamageDeclarationContext damageDeclaration() {
			return GetRuleContext<DamageDeclarationContext>(0);
		}
		public TeleportDeclarationContext teleportDeclaration() {
			return GetRuleContext<TeleportDeclarationContext>(0);
		}
		public SpawnDeclarationContext spawnDeclaration() {
			return GetRuleContext<SpawnDeclarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 121;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 79; damageAmountDeclaration();
				State = 80; Match(SEMI);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 82; healAmountDeclaration();
				State = 83; Match(SEMI);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 85; teleportPointDeclaration();
				State = 86; Match(SEMI);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 88; spawnPointDeclaration();
				State = 89; Match(SEMI);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 91; spawnTypeDeclaration();
				State = 92; Match(SEMI);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 94; healthDeclaration();
				State = 95; Match(SEMI);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 97; healDeclaration();
				State = 98; Match(SEMI);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 100; moveDeclaration();
				State = 101; Match(SEMI);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 103; shootDeclaration();
				State = 104; Match(SEMI);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 106; ifexpression();
				State = 107; Match(SEMI);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 109; whileexpression();
				State = 110; Match(SEMI);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 112; damageDeclaration();
				State = 113; Match(SEMI);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 115; teleportDeclaration();
				State = 116; Match(SEMI);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 118; spawnDeclaration();
				State = 119; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameDeclarationContext : ParserRuleContext {
		public TrapNameDeclarationContext trapNameDeclaration() {
			return GetRuleContext<TrapNameDeclarationContext>(0);
		}
		public MonsterNameDeclarationContext monsterNameDeclaration() {
			return GetRuleContext<MonsterNameDeclarationContext>(0);
		}
		public NameDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterNameDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitNameDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameDeclarationContext nameDeclaration() {
		NameDeclarationContext _localctx = new NameDeclarationContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_nameDeclaration);
		try {
			State = 125;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TRAP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 123; trapNameDeclaration();
				}
				break;
			case MONSTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 124; monsterNameDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrapNameDeclarationContext : ParserRuleContext {
		public ITerminalNode TRAP() { return GetToken(DynamicEnemyGrammarParser.TRAP, 0); }
		public ITerminalNode NAME_T() { return GetToken(DynamicEnemyGrammarParser.NAME_T, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicEnemyGrammarParser.EQUALS, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public TrapNameDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trapNameDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterTrapNameDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitTrapNameDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrapNameDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrapNameDeclarationContext trapNameDeclaration() {
		TrapNameDeclarationContext _localctx = new TrapNameDeclarationContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_trapNameDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(TRAP);
			State = 128; Match(NAME_T);
			State = 129; Match(EQUALS);
			State = 130; name();
			State = 131; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonsterNameDeclarationContext : ParserRuleContext {
		public ITerminalNode MONSTER() { return GetToken(DynamicEnemyGrammarParser.MONSTER, 0); }
		public ITerminalNode NAME_T() { return GetToken(DynamicEnemyGrammarParser.NAME_T, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicEnemyGrammarParser.EQUALS, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public MonsterNameDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_monsterNameDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterMonsterNameDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitMonsterNameDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonsterNameDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonsterNameDeclarationContext monsterNameDeclaration() {
		MonsterNameDeclarationContext _localctx = new MonsterNameDeclarationContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_monsterNameDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(MONSTER);
			State = 134; Match(NAME_T);
			State = 135; Match(EQUALS);
			State = 136; name();
			State = 137; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HealthDeclarationContext : ParserRuleContext {
		public ITerminalNode HEALTH() { return GetToken(DynamicEnemyGrammarParser.HEALTH, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicEnemyGrammarParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicEnemyGrammarParser.NUMBER, 0); }
		public HealthDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_healthDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterHealthDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitHealthDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHealthDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HealthDeclarationContext healthDeclaration() {
		HealthDeclarationContext _localctx = new HealthDeclarationContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_healthDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; Match(HEALTH);
			State = 140; Match(EQUALS);
			State = 141; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HealAmountDeclarationContext : ParserRuleContext {
		public ITerminalNode HEAL() { return GetToken(DynamicEnemyGrammarParser.HEAL, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicEnemyGrammarParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicEnemyGrammarParser.NUMBER, 0); }
		public HealAmountDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_healAmountDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterHealAmountDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitHealAmountDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHealAmountDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HealAmountDeclarationContext healAmountDeclaration() {
		HealAmountDeclarationContext _localctx = new HealAmountDeclarationContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_healAmountDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(HEAL);
			State = 144; Match(EQUALS);
			State = 145; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DamageAmountDeclarationContext : ParserRuleContext {
		public ITerminalNode DAMAGE() { return GetToken(DynamicEnemyGrammarParser.DAMAGE, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicEnemyGrammarParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicEnemyGrammarParser.NUMBER, 0); }
		public DamageAmountDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_damageAmountDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterDamageAmountDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitDamageAmountDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDamageAmountDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DamageAmountDeclarationContext damageAmountDeclaration() {
		DamageAmountDeclarationContext _localctx = new DamageAmountDeclarationContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_damageAmountDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; Match(DAMAGE);
			State = 148; Match(EQUALS);
			State = 149; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeleportPointDeclarationContext : ParserRuleContext {
		public ITerminalNode TELEPORT_PLACE() { return GetToken(DynamicEnemyGrammarParser.TELEPORT_PLACE, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicEnemyGrammarParser.EQUALS, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public TeleportPointDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teleportPointDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterTeleportPointDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitTeleportPointDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTeleportPointDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TeleportPointDeclarationContext teleportPointDeclaration() {
		TeleportPointDeclarationContext _localctx = new TeleportPointDeclarationContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_teleportPointDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; Match(TELEPORT_PLACE);
			State = 152; Match(EQUALS);
			State = 153; place();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpawnPointDeclarationContext : ParserRuleContext {
		public ITerminalNode SPAWN_PLACE() { return GetToken(DynamicEnemyGrammarParser.SPAWN_PLACE, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicEnemyGrammarParser.EQUALS, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public SpawnPointDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spawnPointDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterSpawnPointDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitSpawnPointDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpawnPointDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpawnPointDeclarationContext spawnPointDeclaration() {
		SpawnPointDeclarationContext _localctx = new SpawnPointDeclarationContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_spawnPointDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(SPAWN_PLACE);
			State = 156; Match(EQUALS);
			State = 157; place();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpawnTypeDeclarationContext : ParserRuleContext {
		public ITerminalNode SPAWN_TYPE() { return GetToken(DynamicEnemyGrammarParser.SPAWN_TYPE, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicEnemyGrammarParser.EQUALS, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public SpawnTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spawnTypeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterSpawnTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitSpawnTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpawnTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpawnTypeDeclarationContext spawnTypeDeclaration() {
		SpawnTypeDeclarationContext _localctx = new SpawnTypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_spawnTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; Match(SPAWN_TYPE);
			State = 160; Match(EQUALS);
			State = 161; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistanceDeclareContext : ParserRuleContext {
		public ITerminalNode DISTANCE() { return GetToken(DynamicEnemyGrammarParser.DISTANCE, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicEnemyGrammarParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicEnemyGrammarParser.NUMBER, 0); }
		public DistanceDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distanceDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterDistanceDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitDistanceDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDistanceDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DistanceDeclareContext distanceDeclare() {
		DistanceDeclareContext _localctx = new DistanceDeclareContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_distanceDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; Match(DISTANCE);
			State = 164; Match(EQUALS);
			State = 165; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveDeclarationContext : ParserRuleContext {
		public ITerminalNode MOVE() { return GetToken(DynamicEnemyGrammarParser.MOVE, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DynamicEnemyGrammarParser.DIRECTION, 0); }
		public ITerminalNode TO() { return GetToken(DynamicEnemyGrammarParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public DistanceDeclareContext distanceDeclare() {
			return GetRuleContext<DistanceDeclareContext>(0);
		}
		public ITerminalNode PLAYER() { return GetToken(DynamicEnemyGrammarParser.PLAYER, 0); }
		public ITerminalNode RANDOM() { return GetToken(DynamicEnemyGrammarParser.RANDOM, 0); }
		public MoveDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterMoveDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitMoveDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoveDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveDeclarationContext moveDeclaration() {
		MoveDeclarationContext _localctx = new MoveDeclarationContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_moveDeclaration);
		try {
			State = 181;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 167; Match(MOVE);
				State = 168; Match(DIRECTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 169; Match(MOVE);
				State = 170; Match(TO);
				State = 171; place();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 172; Match(MOVE);
				State = 173; Match(DIRECTION);
				State = 174; distanceDeclare();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 175; Match(MOVE);
				State = 176; Match(TO);
				State = 177; Match(PLAYER);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 178; Match(MOVE);
				State = 179; Match(TO);
				State = 180; Match(RANDOM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShootDeclarationContext : ParserRuleContext {
		public ITerminalNode SHOOT() { return GetToken(DynamicEnemyGrammarParser.SHOOT, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DynamicEnemyGrammarParser.DIRECTION, 0); }
		public ITerminalNode TO() { return GetToken(DynamicEnemyGrammarParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public DistanceDeclareContext distanceDeclare() {
			return GetRuleContext<DistanceDeclareContext>(0);
		}
		public DamageDeclarationContext damageDeclaration() {
			return GetRuleContext<DamageDeclarationContext>(0);
		}
		public ITerminalNode RANDOM() { return GetToken(DynamicEnemyGrammarParser.RANDOM, 0); }
		public ITerminalNode PLAYER() { return GetToken(DynamicEnemyGrammarParser.PLAYER, 0); }
		public ShootDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shootDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterShootDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitShootDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShootDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShootDeclarationContext shootDeclaration() {
		ShootDeclarationContext _localctx = new ShootDeclarationContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_shootDeclaration);
		try {
			State = 213;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 183; Match(SHOOT);
				State = 184; Match(DIRECTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 185; Match(SHOOT);
				State = 186; Match(TO);
				State = 187; place();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 188; Match(SHOOT);
				State = 189; Match(DIRECTION);
				State = 190; distanceDeclare();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 191; Match(SHOOT);
				State = 192; Match(DIRECTION);
				State = 193; damageDeclaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 194; Match(SHOOT);
				State = 195; Match(RANDOM);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 196; Match(SHOOT);
				State = 197; Match(TO);
				State = 198; Match(PLAYER);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 199; Match(SHOOT);
				State = 200; Match(TO);
				State = 201; Match(PLAYER);
				State = 202; damageDeclaration();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 203; Match(SHOOT);
				State = 204; Match(DIRECTION);
				State = 205; distanceDeclare();
				State = 206; damageDeclaration();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 208; Match(SHOOT);
				State = 209; Match(TO);
				State = 210; place();
				State = 211; damageDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DamageDeclarationContext : ParserRuleContext {
		public ITerminalNode DAMAGE() { return GetToken(DynamicEnemyGrammarParser.DAMAGE, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DynamicEnemyGrammarParser.DIRECTION, 0); }
		public DamageAmountDeclarationContext damageAmountDeclaration() {
			return GetRuleContext<DamageAmountDeclarationContext>(0);
		}
		public DistanceDeclareContext distanceDeclare() {
			return GetRuleContext<DistanceDeclareContext>(0);
		}
		public ITerminalNode RANDOM() { return GetToken(DynamicEnemyGrammarParser.RANDOM, 0); }
		public ITerminalNode TO() { return GetToken(DynamicEnemyGrammarParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public DamageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_damageDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterDamageDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitDamageDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDamageDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DamageDeclarationContext damageDeclaration() {
		DamageDeclarationContext _localctx = new DamageDeclarationContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_damageDeclaration);
		try {
			State = 246;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 215; Match(DAMAGE);
				State = 216; Match(DIRECTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 217; Match(DAMAGE);
				State = 218; Match(DIRECTION);
				State = 219; damageAmountDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 220; Match(DAMAGE);
				State = 221; Match(DIRECTION);
				State = 222; distanceDeclare();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 223; Match(DAMAGE);
				State = 224; Match(DIRECTION);
				State = 225; distanceDeclare();
				State = 226; damageAmountDeclaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 228; Match(DAMAGE);
				State = 229; Match(RANDOM);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 230; Match(DAMAGE);
				State = 231; Match(TO);
				State = 232; place();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 233; Match(DAMAGE);
				State = 234; Match(TO);
				State = 235; place();
				State = 236; damageAmountDeclaration();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 238; Match(DAMAGE);
				State = 239; Match(TO);
				State = 240; character();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 241; Match(DAMAGE);
				State = 242; Match(TO);
				State = 243; character();
				State = 244; damageAmountDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HealDeclarationContext : ParserRuleContext {
		public ITerminalNode HEAL() { return GetToken(DynamicEnemyGrammarParser.HEAL, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DynamicEnemyGrammarParser.DIRECTION, 0); }
		public HealAmountDeclarationContext healAmountDeclaration() {
			return GetRuleContext<HealAmountDeclarationContext>(0);
		}
		public DistanceDeclareContext distanceDeclare() {
			return GetRuleContext<DistanceDeclareContext>(0);
		}
		public ITerminalNode RANDOM() { return GetToken(DynamicEnemyGrammarParser.RANDOM, 0); }
		public ITerminalNode TO() { return GetToken(DynamicEnemyGrammarParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public HealDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_healDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterHealDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitHealDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHealDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HealDeclarationContext healDeclaration() {
		HealDeclarationContext _localctx = new HealDeclarationContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_healDeclaration);
		try {
			State = 279;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 248; Match(HEAL);
				State = 249; Match(DIRECTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 250; Match(HEAL);
				State = 251; Match(DIRECTION);
				State = 252; healAmountDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 253; Match(HEAL);
				State = 254; Match(DIRECTION);
				State = 255; distanceDeclare();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 256; Match(HEAL);
				State = 257; Match(DIRECTION);
				State = 258; distanceDeclare();
				State = 259; healAmountDeclaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 261; Match(HEAL);
				State = 262; Match(RANDOM);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 263; Match(HEAL);
				State = 264; Match(TO);
				State = 265; place();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 266; Match(HEAL);
				State = 267; Match(TO);
				State = 268; place();
				State = 269; healAmountDeclaration();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 271; Match(HEAL);
				State = 272; Match(TO);
				State = 273; character();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 274; Match(HEAL);
				State = 275; Match(TO);
				State = 276; character();
				State = 277; healAmountDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpawnDeclarationContext : ParserRuleContext {
		public ITerminalNode SPAWN() { return GetToken(DynamicEnemyGrammarParser.SPAWN, 0); }
		public ITerminalNode MONSTER() { return GetToken(DynamicEnemyGrammarParser.MONSTER, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TO() { return GetToken(DynamicEnemyGrammarParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public ITerminalNode RANDOM() { return GetToken(DynamicEnemyGrammarParser.RANDOM, 0); }
		public SpawnDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spawnDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterSpawnDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitSpawnDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpawnDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpawnDeclarationContext spawnDeclaration() {
		SpawnDeclarationContext _localctx = new SpawnDeclarationContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_spawnDeclaration);
		try {
			State = 296;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 281; Match(SPAWN);
				State = 282; Match(MONSTER);
				State = 283; name();
				State = 284; Match(TO);
				State = 285; place();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 287; Match(SPAWN);
				State = 288; Match(RANDOM);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 289; Match(SPAWN);
				State = 290; Match(MONSTER);
				State = 291; name();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 292; Match(SPAWN);
				State = 293; Match(TO);
				State = 294; place();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 295; Match(SPAWN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeleportDeclarationContext : ParserRuleContext {
		public ITerminalNode TELEPORT_T() { return GetToken(DynamicEnemyGrammarParser.TELEPORT_T, 0); }
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public ITerminalNode TO() { return GetToken(DynamicEnemyGrammarParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public ITerminalNode RANDOM() { return GetToken(DynamicEnemyGrammarParser.RANDOM, 0); }
		public TeleportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teleportDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterTeleportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitTeleportDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTeleportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TeleportDeclarationContext teleportDeclaration() {
		TeleportDeclarationContext _localctx = new TeleportDeclarationContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_teleportDeclaration);
		try {
			State = 307;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 298; Match(TELEPORT_T);
				State = 299; character();
				State = 300; Match(TO);
				State = 301; place();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 303; Match(TELEPORT_T);
				State = 304; character();
				State = 305; Match(RANDOM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfexpressionContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(DynamicEnemyGrammarParser.IF, 0); }
		public ITerminalNode PARENTHESISSTART() { return GetToken(DynamicEnemyGrammarParser.PARENTHESISSTART, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PARENTHESISCLOSE() { return GetToken(DynamicEnemyGrammarParser.PARENTHESISCLOSE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterIfexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitIfexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfexpressionContext ifexpression() {
		IfexpressionContext _localctx = new IfexpressionContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_ifexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309; Match(IF);
			State = 310; Match(PARENTHESISSTART);
			State = 311; expression(0);
			State = 312; Match(PARENTHESISCLOSE);
			State = 313; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileexpressionContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(DynamicEnemyGrammarParser.WHILE, 0); }
		public ITerminalNode PARENTHESISSTART() { return GetToken(DynamicEnemyGrammarParser.PARENTHESISSTART, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PARENTHESISCLOSE() { return GetToken(DynamicEnemyGrammarParser.PARENTHESISCLOSE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterWhileexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitWhileexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileexpressionContext whileexpression() {
		WhileexpressionContext _localctx = new WhileexpressionContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_whileexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315; Match(WHILE);
			State = 316; Match(PARENTHESISSTART);
			State = 317; expression(0);
			State = 318; Match(PARENTHESISCLOSE);
			State = 319; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode BRACKETSTART() { return GetToken(DynamicEnemyGrammarParser.BRACKETSTART, 0); }
		public ITerminalNode BRACKETCLOSE() { return GetToken(DynamicEnemyGrammarParser.BRACKETCLOSE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321; Match(BRACKETSTART);
			State = 325;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TELEPORT_PLACE) | (1L << SPAWN_PLACE) | (1L << SPAWN_TYPE) | (1L << DAMAGE) | (1L << IF) | (1L << WHILE) | (1L << HEALTH) | (1L << MOVE) | (1L << SHOOT) | (1L << SPAWN) | (1L << TELEPORT_T) | (1L << HEAL))) != 0)) {
				{
				{
				State = 322; statement();
				}
				}
				State = 327;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 328; Match(BRACKETCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterContext : ParserRuleContext {
		public ITerminalNode PLAYER() { return GetToken(DynamicEnemyGrammarParser.PLAYER, 0); }
		public ITerminalNode ME() { return GetToken(DynamicEnemyGrammarParser.ME, 0); }
		public ITerminalNode TRAP() { return GetToken(DynamicEnemyGrammarParser.TRAP, 0); }
		public ITerminalNode MONSTER() { return GetToken(DynamicEnemyGrammarParser.MONSTER, 0); }
		public CharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterCharacter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitCharacter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterContext character() {
		CharacterContext _localctx = new CharacterContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_character);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRAP) | (1L << MONSTER) | (1L << PLAYER) | (1L << ME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PossibleAttributesContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public PossibleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_possibleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterPossibleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitPossibleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPossibleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PossibleAttributesContext possibleAttributes() {
		PossibleAttributesContext _localctx = new PossibleAttributesContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_possibleAttributes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeReferenceContext : ParserRuleContext {
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public ITerminalNode ATTRIBUTE() { return GetToken(DynamicEnemyGrammarParser.ATTRIBUTE, 0); }
		public PossibleAttributesContext possibleAttributes() {
			return GetRuleContext<PossibleAttributesContext>(0);
		}
		public AttributeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterAttributeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitAttributeReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeReferenceContext attributeReference() {
		AttributeReferenceContext _localctx = new AttributeReferenceContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_attributeReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334; character();
			State = 335; Match(ATTRIBUTE);
			State = 336; possibleAttributes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceContext : ParserRuleContext {
		public XContext x() {
			return GetRuleContext<XContext>(0);
		}
		public YContext y() {
			return GetRuleContext<YContext>(0);
		}
		public PlaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_place; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterPlace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitPlace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceContext place() {
		PlaceContext _localctx = new PlaceContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_place);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338; x();
			State = 339; Match(COMMA);
			State = 340; y();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(DynamicEnemyGrammarParser.NUMBER, 0); }
		public XContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_x; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterX(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitX(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitX(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XContext x() {
		XContext _localctx = new XContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_x);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(DynamicEnemyGrammarParser.NUMBER, 0); }
		public YContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_y; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitY(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitY(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YContext y() {
		YContext _localctx = new YContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_y);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public ITerminalNode PARENTHESISSTART() { return GetToken(DynamicEnemyGrammarParser.PARENTHESISSTART, 0); }
		public ITerminalNode PARENTHESISCLOSE() { return GetToken(DynamicEnemyGrammarParser.PARENTHESISCLOSE, 0); }
		public ITerminalNode[] ABSOLUTE() { return GetTokens(DynamicEnemyGrammarParser.ABSOLUTE); }
		public ITerminalNode ABSOLUTE(int i) {
			return GetToken(DynamicEnemyGrammarParser.ABSOLUTE, i);
		}
		public SomethingContext something() {
			return GetRuleContext<SomethingContext>(0);
		}
		public ITerminalNode NEGATE() { return GetToken(DynamicEnemyGrammarParser.NEGATE, 0); }
		public AttributeReferenceContext attributeReference() {
			return GetRuleContext<AttributeReferenceContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				State = 347; Match(PARENTHESISSTART);
				State = 348; expression(0);
				State = 349; Match(PARENTHESISCLOSE);
				}
				break;

			case 2:
				{
				State = 351; Match(ABSOLUTE);
				State = 352; expression(0);
				State = 353; Match(ABSOLUTE);
				}
				break;

			case 3:
				{
				State = 355; something();
				}
				break;

			case 4:
				{
				State = 356; Match(NEGATE);
				State = 357; expression(2);
				}
				break;

			case 5:
				{
				State = 358; attributeReference();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 367;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 361;
					if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
					State = 362; operation();
					State = 363; expression(7);
					}
					} 
				}
				State = 369;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SomethingContext : ParserRuleContext {
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public ITerminalNode NUMBER() { return GetToken(DynamicEnemyGrammarParser.NUMBER, 0); }
		public ITerminalNode ROUND() { return GetToken(DynamicEnemyGrammarParser.ROUND, 0); }
		public ITerminalNode NOTHING() { return GetToken(DynamicEnemyGrammarParser.NOTHING, 0); }
		public SomethingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_something; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterSomething(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitSomething(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSomething(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SomethingContext something() {
		SomethingContext _localctx = new SomethingContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_something);
		try {
			State = 374;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TRAP:
			case MONSTER:
			case PLAYER:
			case ME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 370; character();
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 371; Match(NUMBER);
				}
				break;
			case ROUND:
				EnterOuterAlt(_localctx, 3);
				{
				State = 372; Match(ROUND);
				}
				break;
			case NOTHING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 373; Match(NOTHING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public ITerminalNode NUMCONNECTER() { return GetToken(DynamicEnemyGrammarParser.NUMCONNECTER, 0); }
		public ITerminalNode BOOLCONNECTER() { return GetToken(DynamicEnemyGrammarParser.BOOLCONNECTER, 0); }
		public ITerminalNode COMPARE() { return GetToken(DynamicEnemyGrammarParser.COMPARE, 0); }
		public ITerminalNode ALIVE() { return GetToken(DynamicEnemyGrammarParser.ALIVE, 0); }
		public ITerminalNode IS() { return GetToken(DynamicEnemyGrammarParser.IS, 0); }
		public ITerminalNode NEAR() { return GetToken(DynamicEnemyGrammarParser.NEAR, 0); }
		public ITerminalNode NUMCOMPARE() { return GetToken(DynamicEnemyGrammarParser.NUMCOMPARE, 0); }
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_operation);
		try {
			State = 383;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUMCONNECTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 376; Match(NUMCONNECTER);
				}
				break;
			case BOOLCONNECTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 377; Match(BOOLCONNECTER);
				}
				break;
			case COMPARE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 378; Match(COMPARE);
				}
				break;
			case ALIVE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 379; Match(ALIVE);
				}
				break;
			case IS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 380; Match(IS);
				State = 381; Match(NEAR);
				}
				break;
			case NUMCOMPARE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 382; Match(NUMCOMPARE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 29: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 6);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x31\x184\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x3\x2\a\x2\x44\n\x2\f\x2\xE\x2G\v\x2\x3\x3\x3\x3\x3\x4\x3\x4\a\x4"+
		"M\n\x4\f\x4\xE\x4P\v\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5"+
		"\x5|\n\x5\x3\x6\x3\x6\x5\x6\x80\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3"+
		"\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10"+
		"\xB8\n\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x5\x11\xD8\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\xF9\n\x12\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\x11A"+
		"\n\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x12B\n\x14\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x136\n\x15"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x18\x3\x18\a\x18\x146\n\x18\f\x18\xE\x18\x149\v\x18"+
		"\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x5\x1F\x16A\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x170\n\x1F"+
		"\f\x1F\xE\x1F\x173\v\x1F\x3 \x3 \x3 \x3 \x5 \x179\n \x3!\x3!\x3!\x3!\x3"+
		"!\x3!\x3!\x5!\x182\n!\x3!\x2\x2\x3<\"\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2"+
		"\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2"+
		"$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2"+
		"@\x2\x2\x3\x4\x2\f\xE\x13\x13\x1A2\x2\x45\x3\x2\x2\x2\x4H\x3\x2\x2\x2"+
		"\x6J\x3\x2\x2\x2\b{\x3\x2\x2\x2\n\x7F\x3\x2\x2\x2\f\x81\x3\x2\x2\x2\xE"+
		"\x87\x3\x2\x2\x2\x10\x8D\x3\x2\x2\x2\x12\x91\x3\x2\x2\x2\x14\x95\x3\x2"+
		"\x2\x2\x16\x99\x3\x2\x2\x2\x18\x9D\x3\x2\x2\x2\x1A\xA1\x3\x2\x2\x2\x1C"+
		"\xA5\x3\x2\x2\x2\x1E\xB7\x3\x2\x2\x2 \xD7\x3\x2\x2\x2\"\xF8\x3\x2\x2\x2"+
		"$\x119\x3\x2\x2\x2&\x12A\x3\x2\x2\x2(\x135\x3\x2\x2\x2*\x137\x3\x2\x2"+
		"\x2,\x13D\x3\x2\x2\x2.\x143\x3\x2\x2\x2\x30\x14C\x3\x2\x2\x2\x32\x14E"+
		"\x3\x2\x2\x2\x34\x150\x3\x2\x2\x2\x36\x154\x3\x2\x2\x2\x38\x158\x3\x2"+
		"\x2\x2:\x15A\x3\x2\x2\x2<\x169\x3\x2\x2\x2>\x178\x3\x2\x2\x2@\x181\x3"+
		"\x2\x2\x2\x42\x44\x5\x6\x4\x2\x43\x42\x3\x2\x2\x2\x44G\x3\x2\x2\x2\x45"+
		"\x43\x3\x2\x2\x2\x45\x46\x3\x2\x2\x2\x46\x3\x3\x2\x2\x2G\x45\x3\x2\x2"+
		"\x2HI\a/\x2\x2I\x5\x3\x2\x2\x2JN\x5\n\x6\x2KM\x5\b\x5\x2LK\x3\x2\x2\x2"+
		"MP\x3\x2\x2\x2NL\x3\x2\x2\x2NO\x3\x2\x2\x2O\a\x3\x2\x2\x2PN\x3\x2\x2\x2"+
		"QR\x5\x14\v\x2RS\a+\x2\x2S|\x3\x2\x2\x2TU\x5\x12\n\x2UV\a+\x2\x2V|\x3"+
		"\x2\x2\x2WX\x5\x16\f\x2XY\a+\x2\x2Y|\x3\x2\x2\x2Z[\x5\x18\r\x2[\\\a+\x2"+
		"\x2\\|\x3\x2\x2\x2]^\x5\x1A\xE\x2^_\a+\x2\x2_|\x3\x2\x2\x2`\x61\x5\x10"+
		"\t\x2\x61\x62\a+\x2\x2\x62|\x3\x2\x2\x2\x63\x64\x5$\x13\x2\x64\x65\a+"+
		"\x2\x2\x65|\x3\x2\x2\x2\x66g\x5\x1E\x10\x2gh\a+\x2\x2h|\x3\x2\x2\x2ij"+
		"\x5 \x11\x2jk\a+\x2\x2k|\x3\x2\x2\x2lm\x5*\x16\x2mn\a+\x2\x2n|\x3\x2\x2"+
		"\x2op\x5,\x17\x2pq\a+\x2\x2q|\x3\x2\x2\x2rs\x5\"\x12\x2st\a+\x2\x2t|\x3"+
		"\x2\x2\x2uv\x5(\x15\x2vw\a+\x2\x2w|\x3\x2\x2\x2xy\x5&\x14\x2yz\a+\x2\x2"+
		"z|\x3\x2\x2\x2{Q\x3\x2\x2\x2{T\x3\x2\x2\x2{W\x3\x2\x2\x2{Z\x3\x2\x2\x2"+
		"{]\x3\x2\x2\x2{`\x3\x2\x2\x2{\x63\x3\x2\x2\x2{\x66\x3\x2\x2\x2{i\x3\x2"+
		"\x2\x2{l\x3\x2\x2\x2{o\x3\x2\x2\x2{r\x3\x2\x2\x2{u\x3\x2\x2\x2{x\x3\x2"+
		"\x2\x2|\t\x3\x2\x2\x2}\x80\x5\f\a\x2~\x80\x5\xE\b\x2\x7F}\x3\x2\x2\x2"+
		"\x7F~\x3\x2\x2\x2\x80\v\x3\x2\x2\x2\x81\x82\a\f\x2\x2\x82\x83\a\v\x2\x2"+
		"\x83\x84\a\x1F\x2\x2\x84\x85\x5\x4\x3\x2\x85\x86\a+\x2\x2\x86\r\x3\x2"+
		"\x2\x2\x87\x88\a\r\x2\x2\x88\x89\a\v\x2\x2\x89\x8A\a\x1F\x2\x2\x8A\x8B"+
		"\x5\x4\x3\x2\x8B\x8C\a+\x2\x2\x8C\xF\x3\x2\x2\x2\x8D\x8E\a\x17\x2\x2\x8E"+
		"\x8F\a\x1F\x2\x2\x8F\x90\a.\x2\x2\x90\x11\x3\x2\x2\x2\x91\x92\a\x1E\x2"+
		"\x2\x92\x93\a\x1F\x2\x2\x93\x94\a.\x2\x2\x94\x13\x3\x2\x2\x2\x95\x96\a"+
		"\t\x2\x2\x96\x97\a\x1F\x2\x2\x97\x98\a.\x2\x2\x98\x15\x3\x2\x2\x2\x99"+
		"\x9A\a\x3\x2\x2\x9A\x9B\a\x1F\x2\x2\x9B\x9C\x5\x36\x1C\x2\x9C\x17\x3\x2"+
		"\x2\x2\x9D\x9E\a\x4\x2\x2\x9E\x9F\a\x1F\x2\x2\x9F\xA0\x5\x36\x1C\x2\xA0"+
		"\x19\x3\x2\x2\x2\xA1\xA2\a\x5\x2\x2\xA2\xA3\a\x1F\x2\x2\xA3\xA4\x5\x4"+
		"\x3\x2\xA4\x1B\x3\x2\x2\x2\xA5\xA6\a\b\x2\x2\xA6\xA7\a\x1F\x2\x2\xA7\xA8"+
		"\a.\x2\x2\xA8\x1D\x3\x2\x2\x2\xA9\xAA\a\x19\x2\x2\xAA\xB8\a\n\x2\x2\xAB"+
		"\xAC\a\x19\x2\x2\xAC\xAD\a\x15\x2\x2\xAD\xB8\x5\x36\x1C\x2\xAE\xAF\a\x19"+
		"\x2\x2\xAF\xB0\a\n\x2\x2\xB0\xB8\x5\x1C\xF\x2\xB1\xB2\a\x19\x2\x2\xB2"+
		"\xB3\a\x15\x2\x2\xB3\xB8\a\xE\x2\x2\xB4\xB5\a\x19\x2\x2\xB5\xB6\a\x15"+
		"\x2\x2\xB6\xB8\a\a\x2\x2\xB7\xA9\x3\x2\x2\x2\xB7\xAB\x3\x2\x2\x2\xB7\xAE"+
		"\x3\x2\x2\x2\xB7\xB1\x3\x2\x2\x2\xB7\xB4\x3\x2\x2\x2\xB8\x1F\x3\x2\x2"+
		"\x2\xB9\xBA\a\x1B\x2\x2\xBA\xD8\a\n\x2\x2\xBB\xBC\a\x1B\x2\x2\xBC\xBD"+
		"\a\x15\x2\x2\xBD\xD8\x5\x36\x1C\x2\xBE\xBF\a\x1B\x2\x2\xBF\xC0\a\n\x2"+
		"\x2\xC0\xD8\x5\x1C\xF\x2\xC1\xC2\a\x1B\x2\x2\xC2\xC3\a\n\x2\x2\xC3\xD8"+
		"\x5\"\x12\x2\xC4\xC5\a\x1B\x2\x2\xC5\xD8\a\a\x2\x2\xC6\xC7\a\x1B\x2\x2"+
		"\xC7\xC8\a\x15\x2\x2\xC8\xD8\a\xE\x2\x2\xC9\xCA\a\x1B\x2\x2\xCA\xCB\a"+
		"\x15\x2\x2\xCB\xCC\a\xE\x2\x2\xCC\xD8\x5\"\x12\x2\xCD\xCE\a\x1B\x2\x2"+
		"\xCE\xCF\a\n\x2\x2\xCF\xD0\x5\x1C\xF\x2\xD0\xD1\x5\"\x12\x2\xD1\xD8\x3"+
		"\x2\x2\x2\xD2\xD3\a\x1B\x2\x2\xD3\xD4\a\x15\x2\x2\xD4\xD5\x5\x36\x1C\x2"+
		"\xD5\xD6\x5\"\x12\x2\xD6\xD8\x3\x2\x2\x2\xD7\xB9\x3\x2\x2\x2\xD7\xBB\x3"+
		"\x2\x2\x2\xD7\xBE\x3\x2\x2\x2\xD7\xC1\x3\x2\x2\x2\xD7\xC4\x3\x2\x2\x2"+
		"\xD7\xC6\x3\x2\x2\x2\xD7\xC9\x3\x2\x2\x2\xD7\xCD\x3\x2\x2\x2\xD7\xD2\x3"+
		"\x2\x2\x2\xD8!\x3\x2\x2\x2\xD9\xDA\a\t\x2\x2\xDA\xF9\a\n\x2\x2\xDB\xDC"+
		"\a\t\x2\x2\xDC\xDD\a\n\x2\x2\xDD\xF9\x5\x14\v\x2\xDE\xDF\a\t\x2\x2\xDF"+
		"\xE0\a\n\x2\x2\xE0\xF9\x5\x1C\xF\x2\xE1\xE2\a\t\x2\x2\xE2\xE3\a\n\x2\x2"+
		"\xE3\xE4\x5\x1C\xF\x2\xE4\xE5\x5\x14\v\x2\xE5\xF9\x3\x2\x2\x2\xE6\xE7"+
		"\a\t\x2\x2\xE7\xF9\a\a\x2\x2\xE8\xE9\a\t\x2\x2\xE9\xEA\a\x15\x2\x2\xEA"+
		"\xF9\x5\x36\x1C\x2\xEB\xEC\a\t\x2\x2\xEC\xED\a\x15\x2\x2\xED\xEE\x5\x36"+
		"\x1C\x2\xEE\xEF\x5\x14\v\x2\xEF\xF9\x3\x2\x2\x2\xF0\xF1\a\t\x2\x2\xF1"+
		"\xF2\a\x15\x2\x2\xF2\xF9\x5\x30\x19\x2\xF3\xF4\a\t\x2\x2\xF4\xF5\a\x15"+
		"\x2\x2\xF5\xF6\x5\x30\x19\x2\xF6\xF7\x5\x14\v\x2\xF7\xF9\x3\x2\x2\x2\xF8"+
		"\xD9\x3\x2\x2\x2\xF8\xDB\x3\x2\x2\x2\xF8\xDE\x3\x2\x2\x2\xF8\xE1\x3\x2"+
		"\x2\x2\xF8\xE6\x3\x2\x2\x2\xF8\xE8\x3\x2\x2\x2\xF8\xEB\x3\x2\x2\x2\xF8"+
		"\xF0\x3\x2\x2\x2\xF8\xF3\x3\x2\x2\x2\xF9#\x3\x2\x2\x2\xFA\xFB\a\x1E\x2"+
		"\x2\xFB\x11A\a\n\x2\x2\xFC\xFD\a\x1E\x2\x2\xFD\xFE\a\n\x2\x2\xFE\x11A"+
		"\x5\x12\n\x2\xFF\x100\a\x1E\x2\x2\x100\x101\a\n\x2\x2\x101\x11A\x5\x1C"+
		"\xF\x2\x102\x103\a\x1E\x2\x2\x103\x104\a\n\x2\x2\x104\x105\x5\x1C\xF\x2"+
		"\x105\x106\x5\x12\n\x2\x106\x11A\x3\x2\x2\x2\x107\x108\a\x1E\x2\x2\x108"+
		"\x11A\a\a\x2\x2\x109\x10A\a\x1E\x2\x2\x10A\x10B\a\x15\x2\x2\x10B\x11A"+
		"\x5\x36\x1C\x2\x10C\x10D\a\x1E\x2\x2\x10D\x10E\a\x15\x2\x2\x10E\x10F\x5"+
		"\x36\x1C\x2\x10F\x110\x5\x12\n\x2\x110\x11A\x3\x2\x2\x2\x111\x112\a\x1E"+
		"\x2\x2\x112\x113\a\x15\x2\x2\x113\x11A\x5\x30\x19\x2\x114\x115\a\x1E\x2"+
		"\x2\x115\x116\a\x15\x2\x2\x116\x117\x5\x30\x19\x2\x117\x118\x5\x12\n\x2"+
		"\x118\x11A\x3\x2\x2\x2\x119\xFA\x3\x2\x2\x2\x119\xFC\x3\x2\x2\x2\x119"+
		"\xFF\x3\x2\x2\x2\x119\x102\x3\x2\x2\x2\x119\x107\x3\x2\x2\x2\x119\x109"+
		"\x3\x2\x2\x2\x119\x10C\x3\x2\x2\x2\x119\x111\x3\x2\x2\x2\x119\x114\x3"+
		"\x2\x2\x2\x11A%\x3\x2\x2\x2\x11B\x11C\a\x1C\x2\x2\x11C\x11D\a\r\x2\x2"+
		"\x11D\x11E\x5\x4\x3\x2\x11E\x11F\a\x15\x2\x2\x11F\x120\x5\x36\x1C\x2\x120"+
		"\x12B\x3\x2\x2\x2\x121\x122\a\x1C\x2\x2\x122\x12B\a\a\x2\x2\x123\x124"+
		"\a\x1C\x2\x2\x124\x125\a\r\x2\x2\x125\x12B\x5\x4\x3\x2\x126\x127\a\x1C"+
		"\x2\x2\x127\x128\a\x15\x2\x2\x128\x12B\x5\x36\x1C\x2\x129\x12B\a\x1C\x2"+
		"\x2\x12A\x11B\x3\x2\x2\x2\x12A\x121\x3\x2\x2\x2\x12A\x123\x3\x2\x2\x2"+
		"\x12A\x126\x3\x2\x2\x2\x12A\x129\x3\x2\x2\x2\x12B\'\x3\x2\x2\x2\x12C\x12D"+
		"\a\x1D\x2\x2\x12D\x12E\x5\x30\x19\x2\x12E\x12F\a\x15\x2\x2\x12F\x130\x5"+
		"\x36\x1C\x2\x130\x136\x3\x2\x2\x2\x131\x132\a\x1D\x2\x2\x132\x133\x5\x30"+
		"\x19\x2\x133\x134\a\a\x2\x2\x134\x136\x3\x2\x2\x2\x135\x12C\x3\x2\x2\x2"+
		"\x135\x131\x3\x2\x2\x2\x136)\x3\x2\x2\x2\x137\x138\a\x14\x2\x2\x138\x139"+
		"\a&\x2\x2\x139\x13A\x5<\x1F\x2\x13A\x13B\a\'\x2\x2\x13B\x13C\x5.\x18\x2"+
		"\x13C+\x3\x2\x2\x2\x13D\x13E\a\x16\x2\x2\x13E\x13F\a&\x2\x2\x13F\x140"+
		"\x5<\x1F\x2\x140\x141\a\'\x2\x2\x141\x142\x5.\x18\x2\x142-\x3\x2\x2\x2"+
		"\x143\x147\a)\x2\x2\x144\x146\x5\b\x5\x2\x145\x144\x3\x2\x2\x2\x146\x149"+
		"\x3\x2\x2\x2\x147\x145\x3\x2\x2\x2\x147\x148\x3\x2\x2\x2\x148\x14A\x3"+
		"\x2\x2\x2\x149\x147\x3\x2\x2\x2\x14A\x14B\a(\x2\x2\x14B/\x3\x2\x2\x2\x14C"+
		"\x14D\t\x2\x2\x2\x14D\x31\x3\x2\x2\x2\x14E\x14F\x5\x4\x3\x2\x14F\x33\x3"+
		"\x2\x2\x2\x150\x151\x5\x30\x19\x2\x151\x152\a\x31\x2\x2\x152\x153\x5\x32"+
		"\x1A\x2\x153\x35\x3\x2\x2\x2\x154\x155\x5\x38\x1D\x2\x155\x156\a,\x2\x2"+
		"\x156\x157\x5:\x1E\x2\x157\x37\x3\x2\x2\x2\x158\x159\a.\x2\x2\x159\x39"+
		"\x3\x2\x2\x2\x15A\x15B\a.\x2\x2\x15B;\x3\x2\x2\x2\x15C\x15D\b\x1F\x1\x2"+
		"\x15D\x15E\a&\x2\x2\x15E\x15F\x5<\x1F\x2\x15F\x160\a\'\x2\x2\x160\x16A"+
		"\x3\x2\x2\x2\x161\x162\a \x2\x2\x162\x163\x5<\x1F\x2\x163\x164\a \x2\x2"+
		"\x164\x16A\x3\x2\x2\x2\x165\x16A\x5> \x2\x166\x167\a!\x2\x2\x167\x16A"+
		"\x5<\x1F\x4\x168\x16A\x5\x34\x1B\x2\x169\x15C\x3\x2\x2\x2\x169\x161\x3"+
		"\x2\x2\x2\x169\x165\x3\x2\x2\x2\x169\x166\x3\x2\x2\x2\x169\x168\x3\x2"+
		"\x2\x2\x16A\x171\x3\x2\x2\x2\x16B\x16C\f\b\x2\x2\x16C\x16D\x5@!\x2\x16D"+
		"\x16E\x5<\x1F\t\x16E\x170\x3\x2\x2\x2\x16F\x16B\x3\x2\x2\x2\x170\x173"+
		"\x3\x2\x2\x2\x171\x16F\x3\x2\x2\x2\x171\x172\x3\x2\x2\x2\x172=\x3\x2\x2"+
		"\x2\x173\x171\x3\x2\x2\x2\x174\x179\x5\x30\x19\x2\x175\x179\a.\x2\x2\x176"+
		"\x179\a\x10\x2\x2\x177\x179\a\x6\x2\x2\x178\x174\x3\x2\x2\x2\x178\x175"+
		"\x3\x2\x2\x2\x178\x176\x3\x2\x2\x2\x178\x177\x3\x2\x2\x2\x179?\x3\x2\x2"+
		"\x2\x17A\x182\a%\x2\x2\x17B\x182\a\"\x2\x2\x17C\x182\a#\x2\x2\x17D\x182"+
		"\a\x18\x2\x2\x17E\x17F\a\x12\x2\x2\x17F\x182\a\x11\x2\x2\x180\x182\a$"+
		"\x2\x2\x181\x17A\x3\x2\x2\x2\x181\x17B\x3\x2\x2\x2\x181\x17C\x3\x2\x2"+
		"\x2\x181\x17D\x3\x2\x2\x2\x181\x17E\x3\x2\x2\x2\x181\x180\x3\x2\x2\x2"+
		"\x182\x41\x3\x2\x2\x2\x11\x45N{\x7F\xB7\xD7\xF8\x119\x12A\x135\x147\x169"+
		"\x171\x178\x181";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LabWork1github
