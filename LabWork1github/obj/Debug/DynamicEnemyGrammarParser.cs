//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Dana\source\repos\LabWork1github\LabWork1github\g4 files\DynamicEnemyGrammar.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LabWork1github {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DynamicEnemyGrammarParser : Parser {
	public const int
		TELEPORT_PLACE=1, SPAWN_PLACE=2, SPAWN_TYPE=3, RANDOM=4, DISTANCE=5, DAMAGE=6, 
		DIRECTION=7, NAME_T=8, TRAP=9, MONSTER=10, PLAYER=11, PLACE_T=12, ROUND=13, 
		NEAR=14, IS=15, ME=16, IF=17, TO=18, WHILE=19, HEALTH=20, ALIVE=21, MOVE=22, 
		ON=23, SHOOT=24, SPAWN=25, TELEPORT_T=26, HEAL=27, EQUALS=28, ABSOLUTE=29, 
		NEGATE=30, BOOLCONNECTER=31, COMPARE=32, NUMCOMPARE=33, NUMCONNECTERMULTIP=34, 
		NUMCONNECTERADD=35, PARENTHESISSTART=36, PARENTHESISCLOSE=37, BRACKETCLOSE=38, 
		BRACKETSTART=39, COLON=40, SEMI=41, COMMA=42, NUMBER=43, DOT=44, ID=45, 
		WS=46;
	public const int
		RULE_definition = 0, RULE_name = 1, RULE_statementList = 2, RULE_statement = 3, 
		RULE_nameDeclaration = 4, RULE_trapNameDeclaration = 5, RULE_monsterNameDeclaration = 6, 
		RULE_healthDeclaration = 7, RULE_healAmountDeclaration = 8, RULE_damageAmountDeclaration = 9, 
		RULE_teleportPointDeclaration = 10, RULE_spawnPointDeclaration = 11, RULE_spawnTypeDeclaration = 12, 
		RULE_distanceDeclare = 13, RULE_moveDeclaration = 14, RULE_shootDeclaration = 15, 
		RULE_damageDeclaration = 16, RULE_healDeclaration = 17, RULE_spawnDeclaration = 18, 
		RULE_teleportDeclaration = 19, RULE_ifexpression = 20, RULE_whileexpression = 21, 
		RULE_block = 22, RULE_character = 23, RULE_possibleAttributes = 24, RULE_place = 25, 
		RULE_x = 26, RULE_y = 27, RULE_boolExpression = 28, RULE_nextBoolExpression = 29, 
		RULE_numberExpression = 30, RULE_numberMultipExpression = 31, RULE_numberFirstExpression = 32, 
		RULE_functionExpression = 33, RULE_something = 34, RULE_attribute = 35, 
		RULE_numToBoolOperation = 36, RULE_function = 37;
	public static readonly string[] ruleNames = {
		"definition", "name", "statementList", "statement", "nameDeclaration", 
		"trapNameDeclaration", "monsterNameDeclaration", "healthDeclaration", 
		"healAmountDeclaration", "damageAmountDeclaration", "teleportPointDeclaration", 
		"spawnPointDeclaration", "spawnTypeDeclaration", "distanceDeclare", "moveDeclaration", 
		"shootDeclaration", "damageDeclaration", "healDeclaration", "spawnDeclaration", 
		"teleportDeclaration", "ifexpression", "whileexpression", "block", "character", 
		"possibleAttributes", "place", "x", "y", "boolExpression", "nextBoolExpression", 
		"numberExpression", "numberMultipExpression", "numberFirstExpression", 
		"functionExpression", "something", "attribute", "numToBoolOperation", 
		"function"
	};

	private static readonly string[] _LiteralNames = {
		null, "'teleport_place'", "'spawn_place'", "'spawn_type'", "'random'", 
		"'distance'", "'damage'", null, "'name'", "'trap'", "'monster'", "'player'", 
		"'place'", "'round'", "'near'", "'is'", "'me'", "'if'", "'to'", "'while'", 
		"'health'", "'alive'", "'move'", "'on'", "'shoot'", "'spawn'", "'teleport'", 
		"'heal'", "'='", "'|'", "'!'", null, null, null, null, null, "'('", "')'", 
		"'}'", "'{'", "':'", "';'", "','", null, "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TELEPORT_PLACE", "SPAWN_PLACE", "SPAWN_TYPE", "RANDOM", "DISTANCE", 
		"DAMAGE", "DIRECTION", "NAME_T", "TRAP", "MONSTER", "PLAYER", "PLACE_T", 
		"ROUND", "NEAR", "IS", "ME", "IF", "TO", "WHILE", "HEALTH", "ALIVE", "MOVE", 
		"ON", "SHOOT", "SPAWN", "TELEPORT_T", "HEAL", "EQUALS", "ABSOLUTE", "NEGATE", 
		"BOOLCONNECTER", "COMPARE", "NUMCOMPARE", "NUMCONNECTERMULTIP", "NUMCONNECTERADD", 
		"PARENTHESISSTART", "PARENTHESISCLOSE", "BRACKETCLOSE", "BRACKETSTART", 
		"COLON", "SEMI", "COMMA", "NUMBER", "DOT", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DynamicEnemyGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public DynamicEnemyGrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DefinitionContext : ParserRuleContext {
		public StatementListContext[] statementList() {
			return GetRuleContexts<StatementListContext>();
		}
		public StatementListContext statementList(int i) {
			return GetRuleContext<StatementListContext>(i);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TRAP || _la==MONSTER) {
				{
				{
				State = 76; statementList();
				}
				}
				State = 81;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(DynamicEnemyGrammarParser.ID, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public NameDeclarationContext nameDeclaration() {
			return GetRuleContext<NameDeclarationContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; nameDeclaration();
			State = 88;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TELEPORT_PLACE) | (1L << SPAWN_PLACE) | (1L << SPAWN_TYPE) | (1L << DAMAGE) | (1L << IF) | (1L << WHILE) | (1L << HEALTH) | (1L << MOVE) | (1L << SHOOT) | (1L << SPAWN) | (1L << TELEPORT_T) | (1L << HEAL))) != 0)) {
				{
				{
				State = 85; statement();
				}
				}
				State = 90;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DamageAmountDeclarationContext damageAmountDeclaration() {
			return GetRuleContext<DamageAmountDeclarationContext>(0);
		}
		public HealAmountDeclarationContext healAmountDeclaration() {
			return GetRuleContext<HealAmountDeclarationContext>(0);
		}
		public TeleportPointDeclarationContext teleportPointDeclaration() {
			return GetRuleContext<TeleportPointDeclarationContext>(0);
		}
		public SpawnPointDeclarationContext spawnPointDeclaration() {
			return GetRuleContext<SpawnPointDeclarationContext>(0);
		}
		public SpawnTypeDeclarationContext spawnTypeDeclaration() {
			return GetRuleContext<SpawnTypeDeclarationContext>(0);
		}
		public HealthDeclarationContext healthDeclaration() {
			return GetRuleContext<HealthDeclarationContext>(0);
		}
		public HealDeclarationContext healDeclaration() {
			return GetRuleContext<HealDeclarationContext>(0);
		}
		public MoveDeclarationContext moveDeclaration() {
			return GetRuleContext<MoveDeclarationContext>(0);
		}
		public ShootDeclarationContext shootDeclaration() {
			return GetRuleContext<ShootDeclarationContext>(0);
		}
		public IfexpressionContext ifexpression() {
			return GetRuleContext<IfexpressionContext>(0);
		}
		public WhileexpressionContext whileexpression() {
			return GetRuleContext<WhileexpressionContext>(0);
		}
		public DamageDeclarationContext damageDeclaration() {
			return GetRuleContext<DamageDeclarationContext>(0);
		}
		public TeleportDeclarationContext teleportDeclaration() {
			return GetRuleContext<TeleportDeclarationContext>(0);
		}
		public SpawnDeclarationContext spawnDeclaration() {
			return GetRuleContext<SpawnDeclarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 129;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 91; damageAmountDeclaration();
				State = 92; Match(SEMI);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94; healAmountDeclaration();
				State = 95; Match(SEMI);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 97; teleportPointDeclaration();
				State = 98; Match(SEMI);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 100; spawnPointDeclaration();
				State = 101; Match(SEMI);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 103; spawnTypeDeclaration();
				State = 104; Match(SEMI);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 106; healthDeclaration();
				State = 107; Match(SEMI);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 109; healDeclaration();
				State = 110; Match(SEMI);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 112; moveDeclaration();
				State = 113; Match(SEMI);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 115; shootDeclaration();
				State = 116; Match(SEMI);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 118; ifexpression();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 119; whileexpression();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 120; damageDeclaration();
				State = 121; Match(SEMI);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 123; teleportDeclaration();
				State = 124; Match(SEMI);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 126; spawnDeclaration();
				State = 127; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameDeclarationContext : ParserRuleContext {
		public TrapNameDeclarationContext trapNameDeclaration() {
			return GetRuleContext<TrapNameDeclarationContext>(0);
		}
		public MonsterNameDeclarationContext monsterNameDeclaration() {
			return GetRuleContext<MonsterNameDeclarationContext>(0);
		}
		public NameDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterNameDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitNameDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameDeclarationContext nameDeclaration() {
		NameDeclarationContext _localctx = new NameDeclarationContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_nameDeclaration);
		try {
			State = 133;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TRAP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131; trapNameDeclaration();
				}
				break;
			case MONSTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132; monsterNameDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrapNameDeclarationContext : ParserRuleContext {
		public ITerminalNode TRAP() { return GetToken(DynamicEnemyGrammarParser.TRAP, 0); }
		public ITerminalNode NAME_T() { return GetToken(DynamicEnemyGrammarParser.NAME_T, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicEnemyGrammarParser.EQUALS, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public TrapNameDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trapNameDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterTrapNameDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitTrapNameDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrapNameDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrapNameDeclarationContext trapNameDeclaration() {
		TrapNameDeclarationContext _localctx = new TrapNameDeclarationContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_trapNameDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; Match(TRAP);
			State = 136; Match(NAME_T);
			State = 137; Match(EQUALS);
			State = 138; name();
			State = 139; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonsterNameDeclarationContext : ParserRuleContext {
		public ITerminalNode MONSTER() { return GetToken(DynamicEnemyGrammarParser.MONSTER, 0); }
		public ITerminalNode NAME_T() { return GetToken(DynamicEnemyGrammarParser.NAME_T, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicEnemyGrammarParser.EQUALS, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public MonsterNameDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_monsterNameDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterMonsterNameDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitMonsterNameDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonsterNameDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonsterNameDeclarationContext monsterNameDeclaration() {
		MonsterNameDeclarationContext _localctx = new MonsterNameDeclarationContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_monsterNameDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(MONSTER);
			State = 142; Match(NAME_T);
			State = 143; Match(EQUALS);
			State = 144; name();
			State = 145; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HealthDeclarationContext : ParserRuleContext {
		public ITerminalNode HEALTH() { return GetToken(DynamicEnemyGrammarParser.HEALTH, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicEnemyGrammarParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicEnemyGrammarParser.NUMBER, 0); }
		public HealthDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_healthDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterHealthDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitHealthDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHealthDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HealthDeclarationContext healthDeclaration() {
		HealthDeclarationContext _localctx = new HealthDeclarationContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_healthDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; Match(HEALTH);
			State = 148; Match(EQUALS);
			State = 149; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HealAmountDeclarationContext : ParserRuleContext {
		public ITerminalNode HEAL() { return GetToken(DynamicEnemyGrammarParser.HEAL, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicEnemyGrammarParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicEnemyGrammarParser.NUMBER, 0); }
		public HealAmountDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_healAmountDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterHealAmountDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitHealAmountDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHealAmountDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HealAmountDeclarationContext healAmountDeclaration() {
		HealAmountDeclarationContext _localctx = new HealAmountDeclarationContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_healAmountDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; Match(HEAL);
			State = 152; Match(EQUALS);
			State = 153; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DamageAmountDeclarationContext : ParserRuleContext {
		public ITerminalNode DAMAGE() { return GetToken(DynamicEnemyGrammarParser.DAMAGE, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicEnemyGrammarParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicEnemyGrammarParser.NUMBER, 0); }
		public DamageAmountDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_damageAmountDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterDamageAmountDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitDamageAmountDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDamageAmountDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DamageAmountDeclarationContext damageAmountDeclaration() {
		DamageAmountDeclarationContext _localctx = new DamageAmountDeclarationContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_damageAmountDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(DAMAGE);
			State = 156; Match(EQUALS);
			State = 157; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeleportPointDeclarationContext : ParserRuleContext {
		public ITerminalNode TELEPORT_PLACE() { return GetToken(DynamicEnemyGrammarParser.TELEPORT_PLACE, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicEnemyGrammarParser.EQUALS, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public TeleportPointDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teleportPointDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterTeleportPointDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitTeleportPointDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTeleportPointDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TeleportPointDeclarationContext teleportPointDeclaration() {
		TeleportPointDeclarationContext _localctx = new TeleportPointDeclarationContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_teleportPointDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; Match(TELEPORT_PLACE);
			State = 160; Match(EQUALS);
			State = 161; place();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpawnPointDeclarationContext : ParserRuleContext {
		public ITerminalNode SPAWN_PLACE() { return GetToken(DynamicEnemyGrammarParser.SPAWN_PLACE, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicEnemyGrammarParser.EQUALS, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public SpawnPointDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spawnPointDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterSpawnPointDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitSpawnPointDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpawnPointDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpawnPointDeclarationContext spawnPointDeclaration() {
		SpawnPointDeclarationContext _localctx = new SpawnPointDeclarationContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_spawnPointDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; Match(SPAWN_PLACE);
			State = 164; Match(EQUALS);
			State = 165; place();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpawnTypeDeclarationContext : ParserRuleContext {
		public ITerminalNode SPAWN_TYPE() { return GetToken(DynamicEnemyGrammarParser.SPAWN_TYPE, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicEnemyGrammarParser.EQUALS, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public SpawnTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spawnTypeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterSpawnTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitSpawnTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpawnTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpawnTypeDeclarationContext spawnTypeDeclaration() {
		SpawnTypeDeclarationContext _localctx = new SpawnTypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_spawnTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; Match(SPAWN_TYPE);
			State = 168; Match(EQUALS);
			State = 169; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistanceDeclareContext : ParserRuleContext {
		public ITerminalNode DISTANCE() { return GetToken(DynamicEnemyGrammarParser.DISTANCE, 0); }
		public ITerminalNode EQUALS() { return GetToken(DynamicEnemyGrammarParser.EQUALS, 0); }
		public ITerminalNode NUMBER() { return GetToken(DynamicEnemyGrammarParser.NUMBER, 0); }
		public DistanceDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distanceDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterDistanceDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitDistanceDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDistanceDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DistanceDeclareContext distanceDeclare() {
		DistanceDeclareContext _localctx = new DistanceDeclareContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_distanceDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; Match(DISTANCE);
			State = 172; Match(EQUALS);
			State = 173; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveDeclarationContext : ParserRuleContext {
		public ITerminalNode MOVE() { return GetToken(DynamicEnemyGrammarParser.MOVE, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DynamicEnemyGrammarParser.DIRECTION, 0); }
		public ITerminalNode TO() { return GetToken(DynamicEnemyGrammarParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public DistanceDeclareContext distanceDeclare() {
			return GetRuleContext<DistanceDeclareContext>(0);
		}
		public ITerminalNode PLAYER() { return GetToken(DynamicEnemyGrammarParser.PLAYER, 0); }
		public ITerminalNode RANDOM() { return GetToken(DynamicEnemyGrammarParser.RANDOM, 0); }
		public MoveDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterMoveDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitMoveDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoveDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveDeclarationContext moveDeclaration() {
		MoveDeclarationContext _localctx = new MoveDeclarationContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_moveDeclaration);
		try {
			State = 189;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175; Match(MOVE);
				State = 176; Match(DIRECTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177; Match(MOVE);
				State = 178; Match(TO);
				State = 179; place();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 180; Match(MOVE);
				State = 181; Match(DIRECTION);
				State = 182; distanceDeclare();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 183; Match(MOVE);
				State = 184; Match(TO);
				State = 185; Match(PLAYER);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 186; Match(MOVE);
				State = 187; Match(TO);
				State = 188; Match(RANDOM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShootDeclarationContext : ParserRuleContext {
		public ITerminalNode SHOOT() { return GetToken(DynamicEnemyGrammarParser.SHOOT, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DynamicEnemyGrammarParser.DIRECTION, 0); }
		public ITerminalNode TO() { return GetToken(DynamicEnemyGrammarParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public DistanceDeclareContext distanceDeclare() {
			return GetRuleContext<DistanceDeclareContext>(0);
		}
		public DamageAmountDeclarationContext damageAmountDeclaration() {
			return GetRuleContext<DamageAmountDeclarationContext>(0);
		}
		public ITerminalNode RANDOM() { return GetToken(DynamicEnemyGrammarParser.RANDOM, 0); }
		public ITerminalNode PLAYER() { return GetToken(DynamicEnemyGrammarParser.PLAYER, 0); }
		public ShootDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shootDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterShootDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitShootDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShootDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShootDeclarationContext shootDeclaration() {
		ShootDeclarationContext _localctx = new ShootDeclarationContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_shootDeclaration);
		try {
			State = 221;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 191; Match(SHOOT);
				State = 192; Match(DIRECTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 193; Match(SHOOT);
				State = 194; Match(TO);
				State = 195; place();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 196; Match(SHOOT);
				State = 197; Match(DIRECTION);
				State = 198; distanceDeclare();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 199; Match(SHOOT);
				State = 200; Match(DIRECTION);
				State = 201; damageAmountDeclaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 202; Match(SHOOT);
				State = 203; Match(RANDOM);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 204; Match(SHOOT);
				State = 205; Match(TO);
				State = 206; Match(PLAYER);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 207; Match(SHOOT);
				State = 208; Match(TO);
				State = 209; Match(PLAYER);
				State = 210; damageAmountDeclaration();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 211; Match(SHOOT);
				State = 212; Match(DIRECTION);
				State = 213; distanceDeclare();
				State = 214; damageAmountDeclaration();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 216; Match(SHOOT);
				State = 217; Match(TO);
				State = 218; place();
				State = 219; damageAmountDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DamageDeclarationContext : ParserRuleContext {
		public ITerminalNode DAMAGE() { return GetToken(DynamicEnemyGrammarParser.DAMAGE, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DynamicEnemyGrammarParser.DIRECTION, 0); }
		public DamageAmountDeclarationContext damageAmountDeclaration() {
			return GetRuleContext<DamageAmountDeclarationContext>(0);
		}
		public DistanceDeclareContext distanceDeclare() {
			return GetRuleContext<DistanceDeclareContext>(0);
		}
		public ITerminalNode RANDOM() { return GetToken(DynamicEnemyGrammarParser.RANDOM, 0); }
		public ITerminalNode TO() { return GetToken(DynamicEnemyGrammarParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public DamageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_damageDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterDamageDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitDamageDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDamageDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DamageDeclarationContext damageDeclaration() {
		DamageDeclarationContext _localctx = new DamageDeclarationContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_damageDeclaration);
		try {
			State = 254;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223; Match(DAMAGE);
				State = 224; Match(DIRECTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 225; Match(DAMAGE);
				State = 226; Match(DIRECTION);
				State = 227; damageAmountDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 228; Match(DAMAGE);
				State = 229; Match(DIRECTION);
				State = 230; distanceDeclare();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 231; Match(DAMAGE);
				State = 232; Match(DIRECTION);
				State = 233; distanceDeclare();
				State = 234; damageAmountDeclaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 236; Match(DAMAGE);
				State = 237; Match(RANDOM);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 238; Match(DAMAGE);
				State = 239; Match(TO);
				State = 240; place();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 241; Match(DAMAGE);
				State = 242; Match(TO);
				State = 243; place();
				State = 244; damageAmountDeclaration();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 246; Match(DAMAGE);
				State = 247; Match(TO);
				State = 248; character();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 249; Match(DAMAGE);
				State = 250; Match(TO);
				State = 251; character();
				State = 252; damageAmountDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HealDeclarationContext : ParserRuleContext {
		public ITerminalNode HEAL() { return GetToken(DynamicEnemyGrammarParser.HEAL, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DynamicEnemyGrammarParser.DIRECTION, 0); }
		public HealAmountDeclarationContext healAmountDeclaration() {
			return GetRuleContext<HealAmountDeclarationContext>(0);
		}
		public DistanceDeclareContext distanceDeclare() {
			return GetRuleContext<DistanceDeclareContext>(0);
		}
		public ITerminalNode RANDOM() { return GetToken(DynamicEnemyGrammarParser.RANDOM, 0); }
		public ITerminalNode TO() { return GetToken(DynamicEnemyGrammarParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public HealDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_healDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterHealDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitHealDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHealDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HealDeclarationContext healDeclaration() {
		HealDeclarationContext _localctx = new HealDeclarationContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_healDeclaration);
		try {
			State = 287;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 256; Match(HEAL);
				State = 257; Match(DIRECTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 258; Match(HEAL);
				State = 259; Match(DIRECTION);
				State = 260; healAmountDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 261; Match(HEAL);
				State = 262; Match(DIRECTION);
				State = 263; distanceDeclare();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 264; Match(HEAL);
				State = 265; Match(DIRECTION);
				State = 266; distanceDeclare();
				State = 267; healAmountDeclaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 269; Match(HEAL);
				State = 270; Match(RANDOM);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 271; Match(HEAL);
				State = 272; Match(TO);
				State = 273; place();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 274; Match(HEAL);
				State = 275; Match(TO);
				State = 276; place();
				State = 277; healAmountDeclaration();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 279; Match(HEAL);
				State = 280; Match(TO);
				State = 281; character();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 282; Match(HEAL);
				State = 283; Match(TO);
				State = 284; character();
				State = 285; healAmountDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpawnDeclarationContext : ParserRuleContext {
		public ITerminalNode SPAWN() { return GetToken(DynamicEnemyGrammarParser.SPAWN, 0); }
		public ITerminalNode MONSTER() { return GetToken(DynamicEnemyGrammarParser.MONSTER, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TO() { return GetToken(DynamicEnemyGrammarParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public ITerminalNode RANDOM() { return GetToken(DynamicEnemyGrammarParser.RANDOM, 0); }
		public SpawnDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spawnDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterSpawnDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitSpawnDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpawnDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpawnDeclarationContext spawnDeclaration() {
		SpawnDeclarationContext _localctx = new SpawnDeclarationContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_spawnDeclaration);
		try {
			State = 304;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 289; Match(SPAWN);
				State = 290; Match(MONSTER);
				State = 291; name();
				State = 292; Match(TO);
				State = 293; place();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 295; Match(SPAWN);
				State = 296; Match(RANDOM);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 297; Match(SPAWN);
				State = 298; Match(MONSTER);
				State = 299; name();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 300; Match(SPAWN);
				State = 301; Match(TO);
				State = 302; place();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 303; Match(SPAWN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeleportDeclarationContext : ParserRuleContext {
		public ITerminalNode TELEPORT_T() { return GetToken(DynamicEnemyGrammarParser.TELEPORT_T, 0); }
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public ITerminalNode TO() { return GetToken(DynamicEnemyGrammarParser.TO, 0); }
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public ITerminalNode RANDOM() { return GetToken(DynamicEnemyGrammarParser.RANDOM, 0); }
		public TeleportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teleportDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterTeleportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitTeleportDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTeleportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TeleportDeclarationContext teleportDeclaration() {
		TeleportDeclarationContext _localctx = new TeleportDeclarationContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_teleportDeclaration);
		try {
			State = 315;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 306; Match(TELEPORT_T);
				State = 307; character();
				State = 308; Match(TO);
				State = 309; place();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 311; Match(TELEPORT_T);
				State = 312; character();
				State = 313; Match(RANDOM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfexpressionContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(DynamicEnemyGrammarParser.IF, 0); }
		public ITerminalNode PARENTHESISSTART() { return GetToken(DynamicEnemyGrammarParser.PARENTHESISSTART, 0); }
		public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public ITerminalNode PARENTHESISCLOSE() { return GetToken(DynamicEnemyGrammarParser.PARENTHESISCLOSE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterIfexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitIfexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfexpressionContext ifexpression() {
		IfexpressionContext _localctx = new IfexpressionContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_ifexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317; Match(IF);
			State = 318; Match(PARENTHESISSTART);
			State = 319; boolExpression();
			State = 320; Match(PARENTHESISCLOSE);
			State = 321; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileexpressionContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(DynamicEnemyGrammarParser.WHILE, 0); }
		public ITerminalNode PARENTHESISSTART() { return GetToken(DynamicEnemyGrammarParser.PARENTHESISSTART, 0); }
		public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public ITerminalNode PARENTHESISCLOSE() { return GetToken(DynamicEnemyGrammarParser.PARENTHESISCLOSE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterWhileexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitWhileexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileexpressionContext whileexpression() {
		WhileexpressionContext _localctx = new WhileexpressionContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_whileexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323; Match(WHILE);
			State = 324; Match(PARENTHESISSTART);
			State = 325; boolExpression();
			State = 326; Match(PARENTHESISCLOSE);
			State = 327; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode BRACKETSTART() { return GetToken(DynamicEnemyGrammarParser.BRACKETSTART, 0); }
		public ITerminalNode BRACKETCLOSE() { return GetToken(DynamicEnemyGrammarParser.BRACKETCLOSE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329; Match(BRACKETSTART);
			State = 333;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TELEPORT_PLACE) | (1L << SPAWN_PLACE) | (1L << SPAWN_TYPE) | (1L << DAMAGE) | (1L << IF) | (1L << WHILE) | (1L << HEALTH) | (1L << MOVE) | (1L << SHOOT) | (1L << SPAWN) | (1L << TELEPORT_T) | (1L << HEAL))) != 0)) {
				{
				{
				State = 330; statement();
				}
				}
				State = 335;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 336; Match(BRACKETCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterContext : ParserRuleContext {
		public ITerminalNode PLAYER() { return GetToken(DynamicEnemyGrammarParser.PLAYER, 0); }
		public ITerminalNode ME() { return GetToken(DynamicEnemyGrammarParser.ME, 0); }
		public ITerminalNode TRAP() { return GetToken(DynamicEnemyGrammarParser.TRAP, 0); }
		public ITerminalNode MONSTER() { return GetToken(DynamicEnemyGrammarParser.MONSTER, 0); }
		public CharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterCharacter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitCharacter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterContext character() {
		CharacterContext _localctx = new CharacterContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_character);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRAP) | (1L << MONSTER) | (1L << PLAYER) | (1L << ME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PossibleAttributesContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public PossibleAttributesContext[] possibleAttributes() {
			return GetRuleContexts<PossibleAttributesContext>();
		}
		public PossibleAttributesContext possibleAttributes(int i) {
			return GetRuleContext<PossibleAttributesContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(DynamicEnemyGrammarParser.DOT, 0); }
		public ITerminalNode TELEPORT_PLACE() { return GetToken(DynamicEnemyGrammarParser.TELEPORT_PLACE, 0); }
		public ITerminalNode PLACE_T() { return GetToken(DynamicEnemyGrammarParser.PLACE_T, 0); }
		public ITerminalNode SPAWN_PLACE() { return GetToken(DynamicEnemyGrammarParser.SPAWN_PLACE, 0); }
		public ITerminalNode SPAWN_TYPE() { return GetToken(DynamicEnemyGrammarParser.SPAWN_TYPE, 0); }
		public ITerminalNode ROUND() { return GetToken(DynamicEnemyGrammarParser.ROUND, 0); }
		public ITerminalNode HEALTH() { return GetToken(DynamicEnemyGrammarParser.HEALTH, 0); }
		public ITerminalNode HEAL() { return GetToken(DynamicEnemyGrammarParser.HEAL, 0); }
		public ITerminalNode RANDOM() { return GetToken(DynamicEnemyGrammarParser.RANDOM, 0); }
		public ITerminalNode DAMAGE() { return GetToken(DynamicEnemyGrammarParser.DAMAGE, 0); }
		public ITerminalNode DISTANCE() { return GetToken(DynamicEnemyGrammarParser.DISTANCE, 0); }
		public ITerminalNode NAME_T() { return GetToken(DynamicEnemyGrammarParser.NAME_T, 0); }
		public ITerminalNode TRAP() { return GetToken(DynamicEnemyGrammarParser.TRAP, 0); }
		public ITerminalNode MONSTER() { return GetToken(DynamicEnemyGrammarParser.MONSTER, 0); }
		public ITerminalNode ME() { return GetToken(DynamicEnemyGrammarParser.ME, 0); }
		public ITerminalNode PLAYER() { return GetToken(DynamicEnemyGrammarParser.PLAYER, 0); }
		public PossibleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_possibleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterPossibleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitPossibleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPossibleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PossibleAttributesContext possibleAttributes() {
		return possibleAttributes(0);
	}

	private PossibleAttributesContext possibleAttributes(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		PossibleAttributesContext _localctx = new PossibleAttributesContext(_ctx, _parentState);
		PossibleAttributesContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_possibleAttributes, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				{
				State = 341; name();
				}
				break;
			case TELEPORT_PLACE:
				{
				State = 342; Match(TELEPORT_PLACE);
				}
				break;
			case PLACE_T:
				{
				State = 343; Match(PLACE_T);
				}
				break;
			case SPAWN_PLACE:
				{
				State = 344; Match(SPAWN_PLACE);
				}
				break;
			case SPAWN_TYPE:
				{
				State = 345; Match(SPAWN_TYPE);
				}
				break;
			case ROUND:
				{
				State = 346; Match(ROUND);
				}
				break;
			case HEALTH:
				{
				State = 347; Match(HEALTH);
				}
				break;
			case HEAL:
				{
				State = 348; Match(HEAL);
				}
				break;
			case RANDOM:
				{
				State = 349; Match(RANDOM);
				}
				break;
			case DAMAGE:
				{
				State = 350; Match(DAMAGE);
				}
				break;
			case DISTANCE:
				{
				State = 351; Match(DISTANCE);
				}
				break;
			case NAME_T:
				{
				State = 352; Match(NAME_T);
				}
				break;
			case TRAP:
				{
				State = 353; Match(TRAP);
				}
				break;
			case MONSTER:
				{
				State = 354; Match(MONSTER);
				}
				break;
			case ME:
				{
				State = 355; Match(ME);
				}
				break;
			case PLAYER:
				{
				State = 356; Match(PLAYER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 364;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PossibleAttributesContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_possibleAttributes);
					State = 359;
					if (!(Precpred(_ctx, 16))) throw new FailedPredicateException(this, "Precpred(_ctx, 16)");
					State = 360; Match(DOT);
					State = 361; possibleAttributes(17);
					}
					} 
				}
				State = 366;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PlaceContext : ParserRuleContext {
		public XContext x() {
			return GetRuleContext<XContext>(0);
		}
		public YContext y() {
			return GetRuleContext<YContext>(0);
		}
		public PlaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_place; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterPlace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitPlace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceContext place() {
		PlaceContext _localctx = new PlaceContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_place);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367; x();
			State = 368; Match(COMMA);
			State = 369; y();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(DynamicEnemyGrammarParser.NUMBER, 0); }
		public XContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_x; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterX(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitX(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitX(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XContext x() {
		XContext _localctx = new XContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_x);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(DynamicEnemyGrammarParser.NUMBER, 0); }
		public YContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_y; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitY(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitY(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YContext y() {
		YContext _localctx = new YContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_y);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExpressionContext : ParserRuleContext {
		public ITerminalNode PARENTHESISSTART() { return GetToken(DynamicEnemyGrammarParser.PARENTHESISSTART, 0); }
		public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public ITerminalNode PARENTHESISCLOSE() { return GetToken(DynamicEnemyGrammarParser.PARENTHESISCLOSE, 0); }
		public NextBoolExpressionContext nextBoolExpression() {
			return GetRuleContext<NextBoolExpressionContext>(0);
		}
		public ITerminalNode NEGATE() { return GetToken(DynamicEnemyGrammarParser.NEGATE, 0); }
		public NumberExpressionContext[] numberExpression() {
			return GetRuleContexts<NumberExpressionContext>();
		}
		public NumberExpressionContext numberExpression(int i) {
			return GetRuleContext<NumberExpressionContext>(i);
		}
		public NumToBoolOperationContext numToBoolOperation() {
			return GetRuleContext<NumToBoolOperationContext>(0);
		}
		public FunctionExpressionContext functionExpression() {
			return GetRuleContext<FunctionExpressionContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode COMPARE() { return GetToken(DynamicEnemyGrammarParser.COMPARE, 0); }
		public BoolExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterBoolExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitBoolExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolExpressionContext boolExpression() {
		BoolExpressionContext _localctx = new BoolExpressionContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_boolExpression);
		try {
			State = 402;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 375; Match(PARENTHESISSTART);
				State = 376; boolExpression();
				State = 377; Match(PARENTHESISCLOSE);
				State = 379;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
				case 1:
					{
					State = 378; nextBoolExpression();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 381; Match(NEGATE);
				State = 382; boolExpression();
				State = 384;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
				case 1:
					{
					State = 383; nextBoolExpression();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 386; numberExpression();
				State = 387; numToBoolOperation();
				State = 388; numberExpression();
				State = 390;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
				case 1:
					{
					State = 389; nextBoolExpression();
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 392; functionExpression();
				State = 394;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
				case 1:
					{
					State = 393; nextBoolExpression();
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 396; attribute();
				State = 397; Match(COMPARE);
				State = 398; attribute();
				State = 400;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
				case 1:
					{
					State = 399; nextBoolExpression();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NextBoolExpressionContext : ParserRuleContext {
		public ITerminalNode BOOLCONNECTER() { return GetToken(DynamicEnemyGrammarParser.BOOLCONNECTER, 0); }
		public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public NextBoolExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nextBoolExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterNextBoolExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitNextBoolExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNextBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NextBoolExpressionContext nextBoolExpression() {
		NextBoolExpressionContext _localctx = new NextBoolExpressionContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_nextBoolExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404; Match(BOOLCONNECTER);
			State = 405; boolExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberExpressionContext : ParserRuleContext {
		public NumberMultipExpressionContext[] numberMultipExpression() {
			return GetRuleContexts<NumberMultipExpressionContext>();
		}
		public NumberMultipExpressionContext numberMultipExpression(int i) {
			return GetRuleContext<NumberMultipExpressionContext>(i);
		}
		public ITerminalNode[] NUMCONNECTERADD() { return GetTokens(DynamicEnemyGrammarParser.NUMCONNECTERADD); }
		public ITerminalNode NUMCONNECTERADD(int i) {
			return GetToken(DynamicEnemyGrammarParser.NUMCONNECTERADD, i);
		}
		public NumberExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterNumberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitNumberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberExpressionContext numberExpression() {
		NumberExpressionContext _localctx = new NumberExpressionContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_numberExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407; numberMultipExpression();
			State = 412;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NUMCONNECTERADD) {
				{
				{
				State = 408; Match(NUMCONNECTERADD);
				State = 409; numberMultipExpression();
				}
				}
				State = 414;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberMultipExpressionContext : ParserRuleContext {
		public NumberFirstExpressionContext[] numberFirstExpression() {
			return GetRuleContexts<NumberFirstExpressionContext>();
		}
		public NumberFirstExpressionContext numberFirstExpression(int i) {
			return GetRuleContext<NumberFirstExpressionContext>(i);
		}
		public ITerminalNode[] NUMCONNECTERMULTIP() { return GetTokens(DynamicEnemyGrammarParser.NUMCONNECTERMULTIP); }
		public ITerminalNode NUMCONNECTERMULTIP(int i) {
			return GetToken(DynamicEnemyGrammarParser.NUMCONNECTERMULTIP, i);
		}
		public NumberMultipExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberMultipExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterNumberMultipExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitNumberMultipExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberMultipExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberMultipExpressionContext numberMultipExpression() {
		NumberMultipExpressionContext _localctx = new NumberMultipExpressionContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_numberMultipExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415; numberFirstExpression();
			State = 420;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NUMCONNECTERMULTIP) {
				{
				{
				State = 416; Match(NUMCONNECTERMULTIP);
				State = 417; numberFirstExpression();
				}
				}
				State = 422;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberFirstExpressionContext : ParserRuleContext {
		public ITerminalNode PARENTHESISSTART() { return GetToken(DynamicEnemyGrammarParser.PARENTHESISSTART, 0); }
		public NumberExpressionContext numberExpression() {
			return GetRuleContext<NumberExpressionContext>(0);
		}
		public ITerminalNode PARENTHESISCLOSE() { return GetToken(DynamicEnemyGrammarParser.PARENTHESISCLOSE, 0); }
		public ITerminalNode[] ABSOLUTE() { return GetTokens(DynamicEnemyGrammarParser.ABSOLUTE); }
		public ITerminalNode ABSOLUTE(int i) {
			return GetToken(DynamicEnemyGrammarParser.ABSOLUTE, i);
		}
		public SomethingContext something() {
			return GetRuleContext<SomethingContext>(0);
		}
		public NumberFirstExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberFirstExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterNumberFirstExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitNumberFirstExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberFirstExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberFirstExpressionContext numberFirstExpression() {
		NumberFirstExpressionContext _localctx = new NumberFirstExpressionContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_numberFirstExpression);
		try {
			State = 432;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case PARENTHESISSTART:
				EnterOuterAlt(_localctx, 1);
				{
				State = 423; Match(PARENTHESISSTART);
				State = 424; numberExpression();
				State = 425; Match(PARENTHESISCLOSE);
				}
				break;
			case ABSOLUTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 427; Match(ABSOLUTE);
				State = 428; numberExpression();
				State = 429; Match(ABSOLUTE);
				}
				break;
			case TRAP:
			case MONSTER:
			case PLAYER:
			case ROUND:
			case ME:
			case NUMBER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 431; something();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionExpressionContext : ParserRuleContext {
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public FunctionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterFunctionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitFunctionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionExpressionContext functionExpression() {
		FunctionExpressionContext _localctx = new FunctionExpressionContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_functionExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434; character();
			State = 435; function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SomethingContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(DynamicEnemyGrammarParser.NUMBER, 0); }
		public ITerminalNode ROUND() { return GetToken(DynamicEnemyGrammarParser.ROUND, 0); }
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public SomethingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_something; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterSomething(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitSomething(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSomething(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SomethingContext something() {
		SomethingContext _localctx = new SomethingContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_something);
		try {
			State = 440;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 437; Match(NUMBER);
				}
				break;
			case ROUND:
				EnterOuterAlt(_localctx, 2);
				{
				State = 438; Match(ROUND);
				}
				break;
			case TRAP:
			case MONSTER:
			case PLAYER:
			case ME:
				EnterOuterAlt(_localctx, 3);
				{
				State = 439; attribute();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(DynamicEnemyGrammarParser.DOT, 0); }
		public PossibleAttributesContext possibleAttributes() {
			return GetRuleContext<PossibleAttributesContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442; character();
			State = 443; Match(DOT);
			State = 444; possibleAttributes(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumToBoolOperationContext : ParserRuleContext {
		public ITerminalNode NUMCOMPARE() { return GetToken(DynamicEnemyGrammarParser.NUMCOMPARE, 0); }
		public ITerminalNode COMPARE() { return GetToken(DynamicEnemyGrammarParser.COMPARE, 0); }
		public NumToBoolOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numToBoolOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterNumToBoolOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitNumToBoolOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumToBoolOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumToBoolOperationContext numToBoolOperation() {
		NumToBoolOperationContext _localctx = new NumToBoolOperationContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_numToBoolOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			_la = _input.La(1);
			if ( !(_la==COMPARE || _la==NUMCOMPARE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public ITerminalNode IS() { return GetToken(DynamicEnemyGrammarParser.IS, 0); }
		public ITerminalNode ALIVE() { return GetToken(DynamicEnemyGrammarParser.ALIVE, 0); }
		public ITerminalNode NEAR() { return GetToken(DynamicEnemyGrammarParser.NEAR, 0); }
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDynamicEnemyGrammarListener typedListener = listener as IDynamicEnemyGrammarListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDynamicEnemyGrammarVisitor<TResult> typedVisitor = visitor as IDynamicEnemyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_function);
		try {
			State = 452;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 448; Match(IS);
				State = 449; Match(ALIVE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 450; Match(IS);
				State = 451; Match(NEAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 24: return possibleAttributes_sempred((PossibleAttributesContext)_localctx, predIndex);
		}
		return true;
	}
	private bool possibleAttributes_sempred(PossibleAttributesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 16);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x30\x1C9\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x3\x2\a\x2P\n\x2\f\x2"+
		"\xE\x2S\v\x2\x3\x3\x3\x3\x3\x4\x3\x4\a\x4Y\n\x4\f\x4\xE\x4\\\v\x4\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x5\x5\x84\n\x5\x3\x6\x3\x6\x5\x6\x88\n\x6\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3"+
		"\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3"+
		"\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x5\x10\xC0\n\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\xE0\n\x11\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x101\n"+
		"\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x5\x13\x122\n\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14"+
		"\x133\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x5\x15\x13E\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\a\x18\x14E\n\x18\f\x18"+
		"\xE\x18\x151\v\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x168\n\x1A\x3\x1A\x3\x1A\x3\x1A\a\x1A"+
		"\x16D\n\x1A\f\x1A\xE\x1A\x170\v\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C"+
		"\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x17E\n\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x5\x1E\x183\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E"+
		"\x189\n\x1E\x3\x1E\x3\x1E\x5\x1E\x18D\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x5\x1E\x193\n\x1E\x5\x1E\x195\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 "+
		"\a \x19D\n \f \xE \x1A0\v \x3!\x3!\x3!\a!\x1A5\n!\f!\xE!\x1A8\v!\x3\""+
		"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x5\"\x1B3\n\"\x3#\x3#\x3#\x3"+
		"$\x3$\x3$\x5$\x1BB\n$\x3%\x3%\x3%\x3%\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x5\'"+
		"\x1C7\n\'\x3\'\x2\x2\x3\x32(\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10"+
		"\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2"+
		"(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42"+
		"\x2\x44\x2\x46\x2H\x2J\x2L\x2\x2\x4\x4\x2\v\r\x12\x12\x3\x2\"#\x1F4\x2"+
		"Q\x3\x2\x2\x2\x4T\x3\x2\x2\x2\x6V\x3\x2\x2\x2\b\x83\x3\x2\x2\x2\n\x87"+
		"\x3\x2\x2\x2\f\x89\x3\x2\x2\x2\xE\x8F\x3\x2\x2\x2\x10\x95\x3\x2\x2\x2"+
		"\x12\x99\x3\x2\x2\x2\x14\x9D\x3\x2\x2\x2\x16\xA1\x3\x2\x2\x2\x18\xA5\x3"+
		"\x2\x2\x2\x1A\xA9\x3\x2\x2\x2\x1C\xAD\x3\x2\x2\x2\x1E\xBF\x3\x2\x2\x2"+
		" \xDF\x3\x2\x2\x2\"\x100\x3\x2\x2\x2$\x121\x3\x2\x2\x2&\x132\x3\x2\x2"+
		"\x2(\x13D\x3\x2\x2\x2*\x13F\x3\x2\x2\x2,\x145\x3\x2\x2\x2.\x14B\x3\x2"+
		"\x2\x2\x30\x154\x3\x2\x2\x2\x32\x167\x3\x2\x2\x2\x34\x171\x3\x2\x2\x2"+
		"\x36\x175\x3\x2\x2\x2\x38\x177\x3\x2\x2\x2:\x194\x3\x2\x2\x2<\x196\x3"+
		"\x2\x2\x2>\x199\x3\x2\x2\x2@\x1A1\x3\x2\x2\x2\x42\x1B2\x3\x2\x2\x2\x44"+
		"\x1B4\x3\x2\x2\x2\x46\x1BA\x3\x2\x2\x2H\x1BC\x3\x2\x2\x2J\x1C0\x3\x2\x2"+
		"\x2L\x1C6\x3\x2\x2\x2NP\x5\x6\x4\x2ON\x3\x2\x2\x2PS\x3\x2\x2\x2QO\x3\x2"+
		"\x2\x2QR\x3\x2\x2\x2R\x3\x3\x2\x2\x2SQ\x3\x2\x2\x2TU\a/\x2\x2U\x5\x3\x2"+
		"\x2\x2VZ\x5\n\x6\x2WY\x5\b\x5\x2XW\x3\x2\x2\x2Y\\\x3\x2\x2\x2ZX\x3\x2"+
		"\x2\x2Z[\x3\x2\x2\x2[\a\x3\x2\x2\x2\\Z\x3\x2\x2\x2]^\x5\x14\v\x2^_\a+"+
		"\x2\x2_\x84\x3\x2\x2\x2`\x61\x5\x12\n\x2\x61\x62\a+\x2\x2\x62\x84\x3\x2"+
		"\x2\x2\x63\x64\x5\x16\f\x2\x64\x65\a+\x2\x2\x65\x84\x3\x2\x2\x2\x66g\x5"+
		"\x18\r\x2gh\a+\x2\x2h\x84\x3\x2\x2\x2ij\x5\x1A\xE\x2jk\a+\x2\x2k\x84\x3"+
		"\x2\x2\x2lm\x5\x10\t\x2mn\a+\x2\x2n\x84\x3\x2\x2\x2op\x5$\x13\x2pq\a+"+
		"\x2\x2q\x84\x3\x2\x2\x2rs\x5\x1E\x10\x2st\a+\x2\x2t\x84\x3\x2\x2\x2uv"+
		"\x5 \x11\x2vw\a+\x2\x2w\x84\x3\x2\x2\x2x\x84\x5*\x16\x2y\x84\x5,\x17\x2"+
		"z{\x5\"\x12\x2{|\a+\x2\x2|\x84\x3\x2\x2\x2}~\x5(\x15\x2~\x7F\a+\x2\x2"+
		"\x7F\x84\x3\x2\x2\x2\x80\x81\x5&\x14\x2\x81\x82\a+\x2\x2\x82\x84\x3\x2"+
		"\x2\x2\x83]\x3\x2\x2\x2\x83`\x3\x2\x2\x2\x83\x63\x3\x2\x2\x2\x83\x66\x3"+
		"\x2\x2\x2\x83i\x3\x2\x2\x2\x83l\x3\x2\x2\x2\x83o\x3\x2\x2\x2\x83r\x3\x2"+
		"\x2\x2\x83u\x3\x2\x2\x2\x83x\x3\x2\x2\x2\x83y\x3\x2\x2\x2\x83z\x3\x2\x2"+
		"\x2\x83}\x3\x2\x2\x2\x83\x80\x3\x2\x2\x2\x84\t\x3\x2\x2\x2\x85\x88\x5"+
		"\f\a\x2\x86\x88\x5\xE\b\x2\x87\x85\x3\x2\x2\x2\x87\x86\x3\x2\x2\x2\x88"+
		"\v\x3\x2\x2\x2\x89\x8A\a\v\x2\x2\x8A\x8B\a\n\x2\x2\x8B\x8C\a\x1E\x2\x2"+
		"\x8C\x8D\x5\x4\x3\x2\x8D\x8E\a+\x2\x2\x8E\r\x3\x2\x2\x2\x8F\x90\a\f\x2"+
		"\x2\x90\x91\a\n\x2\x2\x91\x92\a\x1E\x2\x2\x92\x93\x5\x4\x3\x2\x93\x94"+
		"\a+\x2\x2\x94\xF\x3\x2\x2\x2\x95\x96\a\x16\x2\x2\x96\x97\a\x1E\x2\x2\x97"+
		"\x98\a-\x2\x2\x98\x11\x3\x2\x2\x2\x99\x9A\a\x1D\x2\x2\x9A\x9B\a\x1E\x2"+
		"\x2\x9B\x9C\a-\x2\x2\x9C\x13\x3\x2\x2\x2\x9D\x9E\a\b\x2\x2\x9E\x9F\a\x1E"+
		"\x2\x2\x9F\xA0\a-\x2\x2\xA0\x15\x3\x2\x2\x2\xA1\xA2\a\x3\x2\x2\xA2\xA3"+
		"\a\x1E\x2\x2\xA3\xA4\x5\x34\x1B\x2\xA4\x17\x3\x2\x2\x2\xA5\xA6\a\x4\x2"+
		"\x2\xA6\xA7\a\x1E\x2\x2\xA7\xA8\x5\x34\x1B\x2\xA8\x19\x3\x2\x2\x2\xA9"+
		"\xAA\a\x5\x2\x2\xAA\xAB\a\x1E\x2\x2\xAB\xAC\x5\x4\x3\x2\xAC\x1B\x3\x2"+
		"\x2\x2\xAD\xAE\a\a\x2\x2\xAE\xAF\a\x1E\x2\x2\xAF\xB0\a-\x2\x2\xB0\x1D"+
		"\x3\x2\x2\x2\xB1\xB2\a\x18\x2\x2\xB2\xC0\a\t\x2\x2\xB3\xB4\a\x18\x2\x2"+
		"\xB4\xB5\a\x14\x2\x2\xB5\xC0\x5\x34\x1B\x2\xB6\xB7\a\x18\x2\x2\xB7\xB8"+
		"\a\t\x2\x2\xB8\xC0\x5\x1C\xF\x2\xB9\xBA\a\x18\x2\x2\xBA\xBB\a\x14\x2\x2"+
		"\xBB\xC0\a\r\x2\x2\xBC\xBD\a\x18\x2\x2\xBD\xBE\a\x14\x2\x2\xBE\xC0\a\x6"+
		"\x2\x2\xBF\xB1\x3\x2\x2\x2\xBF\xB3\x3\x2\x2\x2\xBF\xB6\x3\x2\x2\x2\xBF"+
		"\xB9\x3\x2\x2\x2\xBF\xBC\x3\x2\x2\x2\xC0\x1F\x3\x2\x2\x2\xC1\xC2\a\x1A"+
		"\x2\x2\xC2\xE0\a\t\x2\x2\xC3\xC4\a\x1A\x2\x2\xC4\xC5\a\x14\x2\x2\xC5\xE0"+
		"\x5\x34\x1B\x2\xC6\xC7\a\x1A\x2\x2\xC7\xC8\a\t\x2\x2\xC8\xE0\x5\x1C\xF"+
		"\x2\xC9\xCA\a\x1A\x2\x2\xCA\xCB\a\t\x2\x2\xCB\xE0\x5\x14\v\x2\xCC\xCD"+
		"\a\x1A\x2\x2\xCD\xE0\a\x6\x2\x2\xCE\xCF\a\x1A\x2\x2\xCF\xD0\a\x14\x2\x2"+
		"\xD0\xE0\a\r\x2\x2\xD1\xD2\a\x1A\x2\x2\xD2\xD3\a\x14\x2\x2\xD3\xD4\a\r"+
		"\x2\x2\xD4\xE0\x5\x14\v\x2\xD5\xD6\a\x1A\x2\x2\xD6\xD7\a\t\x2\x2\xD7\xD8"+
		"\x5\x1C\xF\x2\xD8\xD9\x5\x14\v\x2\xD9\xE0\x3\x2\x2\x2\xDA\xDB\a\x1A\x2"+
		"\x2\xDB\xDC\a\x14\x2\x2\xDC\xDD\x5\x34\x1B\x2\xDD\xDE\x5\x14\v\x2\xDE"+
		"\xE0\x3\x2\x2\x2\xDF\xC1\x3\x2\x2\x2\xDF\xC3\x3\x2\x2\x2\xDF\xC6\x3\x2"+
		"\x2\x2\xDF\xC9\x3\x2\x2\x2\xDF\xCC\x3\x2\x2\x2\xDF\xCE\x3\x2\x2\x2\xDF"+
		"\xD1\x3\x2\x2\x2\xDF\xD5\x3\x2\x2\x2\xDF\xDA\x3\x2\x2\x2\xE0!\x3\x2\x2"+
		"\x2\xE1\xE2\a\b\x2\x2\xE2\x101\a\t\x2\x2\xE3\xE4\a\b\x2\x2\xE4\xE5\a\t"+
		"\x2\x2\xE5\x101\x5\x14\v\x2\xE6\xE7\a\b\x2\x2\xE7\xE8\a\t\x2\x2\xE8\x101"+
		"\x5\x1C\xF\x2\xE9\xEA\a\b\x2\x2\xEA\xEB\a\t\x2\x2\xEB\xEC\x5\x1C\xF\x2"+
		"\xEC\xED\x5\x14\v\x2\xED\x101\x3\x2\x2\x2\xEE\xEF\a\b\x2\x2\xEF\x101\a"+
		"\x6\x2\x2\xF0\xF1\a\b\x2\x2\xF1\xF2\a\x14\x2\x2\xF2\x101\x5\x34\x1B\x2"+
		"\xF3\xF4\a\b\x2\x2\xF4\xF5\a\x14\x2\x2\xF5\xF6\x5\x34\x1B\x2\xF6\xF7\x5"+
		"\x14\v\x2\xF7\x101\x3\x2\x2\x2\xF8\xF9\a\b\x2\x2\xF9\xFA\a\x14\x2\x2\xFA"+
		"\x101\x5\x30\x19\x2\xFB\xFC\a\b\x2\x2\xFC\xFD\a\x14\x2\x2\xFD\xFE\x5\x30"+
		"\x19\x2\xFE\xFF\x5\x14\v\x2\xFF\x101\x3\x2\x2\x2\x100\xE1\x3\x2\x2\x2"+
		"\x100\xE3\x3\x2\x2\x2\x100\xE6\x3\x2\x2\x2\x100\xE9\x3\x2\x2\x2\x100\xEE"+
		"\x3\x2\x2\x2\x100\xF0\x3\x2\x2\x2\x100\xF3\x3\x2\x2\x2\x100\xF8\x3\x2"+
		"\x2\x2\x100\xFB\x3\x2\x2\x2\x101#\x3\x2\x2\x2\x102\x103\a\x1D\x2\x2\x103"+
		"\x122\a\t\x2\x2\x104\x105\a\x1D\x2\x2\x105\x106\a\t\x2\x2\x106\x122\x5"+
		"\x12\n\x2\x107\x108\a\x1D\x2\x2\x108\x109\a\t\x2\x2\x109\x122\x5\x1C\xF"+
		"\x2\x10A\x10B\a\x1D\x2\x2\x10B\x10C\a\t\x2\x2\x10C\x10D\x5\x1C\xF\x2\x10D"+
		"\x10E\x5\x12\n\x2\x10E\x122\x3\x2\x2\x2\x10F\x110\a\x1D\x2\x2\x110\x122"+
		"\a\x6\x2\x2\x111\x112\a\x1D\x2\x2\x112\x113\a\x14\x2\x2\x113\x122\x5\x34"+
		"\x1B\x2\x114\x115\a\x1D\x2\x2\x115\x116\a\x14\x2\x2\x116\x117\x5\x34\x1B"+
		"\x2\x117\x118\x5\x12\n\x2\x118\x122\x3\x2\x2\x2\x119\x11A\a\x1D\x2\x2"+
		"\x11A\x11B\a\x14\x2\x2\x11B\x122\x5\x30\x19\x2\x11C\x11D\a\x1D\x2\x2\x11D"+
		"\x11E\a\x14\x2\x2\x11E\x11F\x5\x30\x19\x2\x11F\x120\x5\x12\n\x2\x120\x122"+
		"\x3\x2\x2\x2\x121\x102\x3\x2\x2\x2\x121\x104\x3\x2\x2\x2\x121\x107\x3"+
		"\x2\x2\x2\x121\x10A\x3\x2\x2\x2\x121\x10F\x3\x2\x2\x2\x121\x111\x3\x2"+
		"\x2\x2\x121\x114\x3\x2\x2\x2\x121\x119\x3\x2\x2\x2\x121\x11C\x3\x2\x2"+
		"\x2\x122%\x3\x2\x2\x2\x123\x124\a\x1B\x2\x2\x124\x125\a\f\x2\x2\x125\x126"+
		"\x5\x4\x3\x2\x126\x127\a\x14\x2\x2\x127\x128\x5\x34\x1B\x2\x128\x133\x3"+
		"\x2\x2\x2\x129\x12A\a\x1B\x2\x2\x12A\x133\a\x6\x2\x2\x12B\x12C\a\x1B\x2"+
		"\x2\x12C\x12D\a\f\x2\x2\x12D\x133\x5\x4\x3\x2\x12E\x12F\a\x1B\x2\x2\x12F"+
		"\x130\a\x14\x2\x2\x130\x133\x5\x34\x1B\x2\x131\x133\a\x1B\x2\x2\x132\x123"+
		"\x3\x2\x2\x2\x132\x129\x3\x2\x2\x2\x132\x12B\x3\x2\x2\x2\x132\x12E\x3"+
		"\x2\x2\x2\x132\x131\x3\x2\x2\x2\x133\'\x3\x2\x2\x2\x134\x135\a\x1C\x2"+
		"\x2\x135\x136\x5\x30\x19\x2\x136\x137\a\x14\x2\x2\x137\x138\x5\x34\x1B"+
		"\x2\x138\x13E\x3\x2\x2\x2\x139\x13A\a\x1C\x2\x2\x13A\x13B\x5\x30\x19\x2"+
		"\x13B\x13C\a\x6\x2\x2\x13C\x13E\x3\x2\x2\x2\x13D\x134\x3\x2\x2\x2\x13D"+
		"\x139\x3\x2\x2\x2\x13E)\x3\x2\x2\x2\x13F\x140\a\x13\x2\x2\x140\x141\a"+
		"&\x2\x2\x141\x142\x5:\x1E\x2\x142\x143\a\'\x2\x2\x143\x144\x5.\x18\x2"+
		"\x144+\x3\x2\x2\x2\x145\x146\a\x15\x2\x2\x146\x147\a&\x2\x2\x147\x148"+
		"\x5:\x1E\x2\x148\x149\a\'\x2\x2\x149\x14A\x5.\x18\x2\x14A-\x3\x2\x2\x2"+
		"\x14B\x14F\a)\x2\x2\x14C\x14E\x5\b\x5\x2\x14D\x14C\x3\x2\x2\x2\x14E\x151"+
		"\x3\x2\x2\x2\x14F\x14D\x3\x2\x2\x2\x14F\x150\x3\x2\x2\x2\x150\x152\x3"+
		"\x2\x2\x2\x151\x14F\x3\x2\x2\x2\x152\x153\a(\x2\x2\x153/\x3\x2\x2\x2\x154"+
		"\x155\t\x2\x2\x2\x155\x31\x3\x2\x2\x2\x156\x157\b\x1A\x1\x2\x157\x168"+
		"\x5\x4\x3\x2\x158\x168\a\x3\x2\x2\x159\x168\a\xE\x2\x2\x15A\x168\a\x4"+
		"\x2\x2\x15B\x168\a\x5\x2\x2\x15C\x168\a\xF\x2\x2\x15D\x168\a\x16\x2\x2"+
		"\x15E\x168\a\x1D\x2\x2\x15F\x168\a\x6\x2\x2\x160\x168\a\b\x2\x2\x161\x168"+
		"\a\a\x2\x2\x162\x168\a\n\x2\x2\x163\x168\a\v\x2\x2\x164\x168\a\f\x2\x2"+
		"\x165\x168\a\x12\x2\x2\x166\x168\a\r\x2\x2\x167\x156\x3\x2\x2\x2\x167"+
		"\x158\x3\x2\x2\x2\x167\x159\x3\x2\x2\x2\x167\x15A\x3\x2\x2\x2\x167\x15B"+
		"\x3\x2\x2\x2\x167\x15C\x3\x2\x2\x2\x167\x15D\x3\x2\x2\x2\x167\x15E\x3"+
		"\x2\x2\x2\x167\x15F\x3\x2\x2\x2\x167\x160\x3\x2\x2\x2\x167\x161\x3\x2"+
		"\x2\x2\x167\x162\x3\x2\x2\x2\x167\x163\x3\x2\x2\x2\x167\x164\x3\x2\x2"+
		"\x2\x167\x165\x3\x2\x2\x2\x167\x166\x3\x2\x2\x2\x168\x16E\x3\x2\x2\x2"+
		"\x169\x16A\f\x12\x2\x2\x16A\x16B\a.\x2\x2\x16B\x16D\x5\x32\x1A\x13\x16C"+
		"\x169\x3\x2\x2\x2\x16D\x170\x3\x2\x2\x2\x16E\x16C\x3\x2\x2\x2\x16E\x16F"+
		"\x3\x2\x2\x2\x16F\x33\x3\x2\x2\x2\x170\x16E\x3\x2\x2\x2\x171\x172\x5\x36"+
		"\x1C\x2\x172\x173\a,\x2\x2\x173\x174\x5\x38\x1D\x2\x174\x35\x3\x2\x2\x2"+
		"\x175\x176\a-\x2\x2\x176\x37\x3\x2\x2\x2\x177\x178\a-\x2\x2\x178\x39\x3"+
		"\x2\x2\x2\x179\x17A\a&\x2\x2\x17A\x17B\x5:\x1E\x2\x17B\x17D\a\'\x2\x2"+
		"\x17C\x17E\x5<\x1F\x2\x17D\x17C\x3\x2\x2\x2\x17D\x17E\x3\x2\x2\x2\x17E"+
		"\x195\x3\x2\x2\x2\x17F\x180\a \x2\x2\x180\x182\x5:\x1E\x2\x181\x183\x5"+
		"<\x1F\x2\x182\x181\x3\x2\x2\x2\x182\x183\x3\x2\x2\x2\x183\x195\x3\x2\x2"+
		"\x2\x184\x185\x5> \x2\x185\x186\x5J&\x2\x186\x188\x5> \x2\x187\x189\x5"+
		"<\x1F\x2\x188\x187\x3\x2\x2\x2\x188\x189\x3\x2\x2\x2\x189\x195\x3\x2\x2"+
		"\x2\x18A\x18C\x5\x44#\x2\x18B\x18D\x5<\x1F\x2\x18C\x18B\x3\x2\x2\x2\x18C"+
		"\x18D\x3\x2\x2\x2\x18D\x195\x3\x2\x2\x2\x18E\x18F\x5H%\x2\x18F\x190\a"+
		"\"\x2\x2\x190\x192\x5H%\x2\x191\x193\x5<\x1F\x2\x192\x191\x3\x2\x2\x2"+
		"\x192\x193\x3\x2\x2\x2\x193\x195\x3\x2\x2\x2\x194\x179\x3\x2\x2\x2\x194"+
		"\x17F\x3\x2\x2\x2\x194\x184\x3\x2\x2\x2\x194\x18A\x3\x2\x2\x2\x194\x18E"+
		"\x3\x2\x2\x2\x195;\x3\x2\x2\x2\x196\x197\a!\x2\x2\x197\x198\x5:\x1E\x2"+
		"\x198=\x3\x2\x2\x2\x199\x19E\x5@!\x2\x19A\x19B\a%\x2\x2\x19B\x19D\x5@"+
		"!\x2\x19C\x19A\x3\x2\x2\x2\x19D\x1A0\x3\x2\x2\x2\x19E\x19C\x3\x2\x2\x2"+
		"\x19E\x19F\x3\x2\x2\x2\x19F?\x3\x2\x2\x2\x1A0\x19E\x3\x2\x2\x2\x1A1\x1A6"+
		"\x5\x42\"\x2\x1A2\x1A3\a$\x2\x2\x1A3\x1A5\x5\x42\"\x2\x1A4\x1A2\x3\x2"+
		"\x2\x2\x1A5\x1A8\x3\x2\x2\x2\x1A6\x1A4\x3\x2\x2\x2\x1A6\x1A7\x3\x2\x2"+
		"\x2\x1A7\x41\x3\x2\x2\x2\x1A8\x1A6\x3\x2\x2\x2\x1A9\x1AA\a&\x2\x2\x1AA"+
		"\x1AB\x5> \x2\x1AB\x1AC\a\'\x2\x2\x1AC\x1B3\x3\x2\x2\x2\x1AD\x1AE\a\x1F"+
		"\x2\x2\x1AE\x1AF\x5> \x2\x1AF\x1B0\a\x1F\x2\x2\x1B0\x1B3\x3\x2\x2\x2\x1B1"+
		"\x1B3\x5\x46$\x2\x1B2\x1A9\x3\x2\x2\x2\x1B2\x1AD\x3\x2\x2\x2\x1B2\x1B1"+
		"\x3\x2\x2\x2\x1B3\x43\x3\x2\x2\x2\x1B4\x1B5\x5\x30\x19\x2\x1B5\x1B6\x5"+
		"L\'\x2\x1B6\x45\x3\x2\x2\x2\x1B7\x1BB\a-\x2\x2\x1B8\x1BB\a\xF\x2\x2\x1B9"+
		"\x1BB\x5H%\x2\x1BA\x1B7\x3\x2\x2\x2\x1BA\x1B8\x3\x2\x2\x2\x1BA\x1B9\x3"+
		"\x2\x2\x2\x1BBG\x3\x2\x2\x2\x1BC\x1BD\x5\x30\x19\x2\x1BD\x1BE\a.\x2\x2"+
		"\x1BE\x1BF\x5\x32\x1A\x2\x1BFI\x3\x2\x2\x2\x1C0\x1C1\t\x3\x2\x2\x1C1K"+
		"\x3\x2\x2\x2\x1C2\x1C3\a\x11\x2\x2\x1C3\x1C7\a\x17\x2\x2\x1C4\x1C5\a\x11"+
		"\x2\x2\x1C5\x1C7\a\x10\x2\x2\x1C6\x1C2\x3\x2\x2\x2\x1C6\x1C4\x3\x2\x2"+
		"\x2\x1C7M\x3\x2\x2\x2\x1AQZ\x83\x87\xBF\xDF\x100\x121\x132\x13D\x14F\x167"+
		"\x16E\x17D\x182\x188\x18C\x192\x194\x19E\x1A6\x1B2\x1BA\x1C6";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LabWork1github
