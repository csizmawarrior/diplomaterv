//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Dana\source\repos\LabWork1github\LabWork1github\G4 files\MonsterGrammar.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LabWork1github {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MonsterGrammarParser : Parser {
	public const int
		NAME_T=1, RANGE_T=2, MOVEROUNDS_T=3, SHOOTROUNDS_T=4, COLON=5, SEMI=6, 
		COMMA=7, NUMBER=8, ID=9, WS=10;
	public const int
		RULE_definition = 0, RULE_name = 1, RULE_statementList = 2, RULE_statement = 3, 
		RULE_nameDeclaration = 4, RULE_rangeDeclaration = 5, RULE_moveRoundDeclaration = 6, 
		RULE_shootRoundDeclaration = 7;
	public static readonly string[] ruleNames = {
		"definition", "name", "statementList", "statement", "nameDeclaration", 
		"rangeDeclaration", "moveRoundDeclaration", "shootRoundDeclaration"
	};

	private static readonly string[] _LiteralNames = {
		null, "'name'", "'range'", "'moverounds'", "'shootrounds'", "':'", "';'", 
		"','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NAME_T", "RANGE_T", "MOVEROUNDS_T", "SHOOTROUNDS_T", "COLON", "SEMI", 
		"COMMA", "NUMBER", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MonsterGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MonsterGrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DefinitionContext : ParserRuleContext {
		public StatementListContext[] statementList() {
			return GetRuleContexts<StatementListContext>();
		}
		public StatementListContext statementList(int i) {
			return GetRuleContext<StatementListContext>(i);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMonsterGrammarListener typedListener = listener as IMonsterGrammarListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMonsterGrammarListener typedListener = listener as IMonsterGrammarListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMonsterGrammarVisitor<TResult> typedVisitor = visitor as IMonsterGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NAME_T) {
				{
				{
				State = 16; statementList();
				}
				}
				State = 21;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MonsterGrammarParser.ID, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMonsterGrammarListener typedListener = listener as IMonsterGrammarListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMonsterGrammarListener typedListener = listener as IMonsterGrammarListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMonsterGrammarVisitor<TResult> typedVisitor = visitor as IMonsterGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public NameDeclarationContext nameDeclaration() {
			return GetRuleContext<NameDeclarationContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMonsterGrammarListener typedListener = listener as IMonsterGrammarListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMonsterGrammarListener typedListener = listener as IMonsterGrammarListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMonsterGrammarVisitor<TResult> typedVisitor = visitor as IMonsterGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24; nameDeclaration();
			State = 28;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RANGE_T) | (1L << MOVEROUNDS_T) | (1L << SHOOTROUNDS_T))) != 0)) {
				{
				{
				State = 25; statement();
				}
				}
				State = 30;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ShootRoundDeclarationContext shootRoundDeclaration() {
			return GetRuleContext<ShootRoundDeclarationContext>(0);
		}
		public RangeDeclarationContext rangeDeclaration() {
			return GetRuleContext<RangeDeclarationContext>(0);
		}
		public MoveRoundDeclarationContext moveRoundDeclaration() {
			return GetRuleContext<MoveRoundDeclarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMonsterGrammarListener typedListener = listener as IMonsterGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMonsterGrammarListener typedListener = listener as IMonsterGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMonsterGrammarVisitor<TResult> typedVisitor = visitor as IMonsterGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 34;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SHOOTROUNDS_T:
				EnterOuterAlt(_localctx, 1);
				{
				State = 31; shootRoundDeclaration();
				}
				break;
			case RANGE_T:
				EnterOuterAlt(_localctx, 2);
				{
				State = 32; rangeDeclaration();
				}
				break;
			case MOVEROUNDS_T:
				EnterOuterAlt(_localctx, 3);
				{
				State = 33; moveRoundDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameDeclarationContext : ParserRuleContext {
		public ITerminalNode NAME_T() { return GetToken(MonsterGrammarParser.NAME_T, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NameDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMonsterGrammarListener typedListener = listener as IMonsterGrammarListener;
			if (typedListener != null) typedListener.EnterNameDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMonsterGrammarListener typedListener = listener as IMonsterGrammarListener;
			if (typedListener != null) typedListener.ExitNameDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMonsterGrammarVisitor<TResult> typedVisitor = visitor as IMonsterGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameDeclarationContext nameDeclaration() {
		NameDeclarationContext _localctx = new NameDeclarationContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_nameDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; Match(NAME_T);
			State = 37; Match(COLON);
			State = 38; name();
			State = 39; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeDeclarationContext : ParserRuleContext {
		public ITerminalNode RANGE_T() { return GetToken(MonsterGrammarParser.RANGE_T, 0); }
		public ITerminalNode NUMBER() { return GetToken(MonsterGrammarParser.NUMBER, 0); }
		public RangeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMonsterGrammarListener typedListener = listener as IMonsterGrammarListener;
			if (typedListener != null) typedListener.EnterRangeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMonsterGrammarListener typedListener = listener as IMonsterGrammarListener;
			if (typedListener != null) typedListener.ExitRangeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMonsterGrammarVisitor<TResult> typedVisitor = visitor as IMonsterGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeDeclarationContext rangeDeclaration() {
		RangeDeclarationContext _localctx = new RangeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_rangeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41; Match(RANGE_T);
			State = 42; Match(COLON);
			State = 43; Match(NUMBER);
			State = 44; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveRoundDeclarationContext : ParserRuleContext {
		public ITerminalNode MOVEROUNDS_T() { return GetToken(MonsterGrammarParser.MOVEROUNDS_T, 0); }
		public ITerminalNode NUMBER() { return GetToken(MonsterGrammarParser.NUMBER, 0); }
		public MoveRoundDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveRoundDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMonsterGrammarListener typedListener = listener as IMonsterGrammarListener;
			if (typedListener != null) typedListener.EnterMoveRoundDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMonsterGrammarListener typedListener = listener as IMonsterGrammarListener;
			if (typedListener != null) typedListener.ExitMoveRoundDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMonsterGrammarVisitor<TResult> typedVisitor = visitor as IMonsterGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoveRoundDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveRoundDeclarationContext moveRoundDeclaration() {
		MoveRoundDeclarationContext _localctx = new MoveRoundDeclarationContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_moveRoundDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(MOVEROUNDS_T);
			State = 47; Match(COLON);
			State = 48; Match(NUMBER);
			State = 49; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShootRoundDeclarationContext : ParserRuleContext {
		public ITerminalNode SHOOTROUNDS_T() { return GetToken(MonsterGrammarParser.SHOOTROUNDS_T, 0); }
		public ITerminalNode NUMBER() { return GetToken(MonsterGrammarParser.NUMBER, 0); }
		public ShootRoundDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shootRoundDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMonsterGrammarListener typedListener = listener as IMonsterGrammarListener;
			if (typedListener != null) typedListener.EnterShootRoundDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMonsterGrammarListener typedListener = listener as IMonsterGrammarListener;
			if (typedListener != null) typedListener.ExitShootRoundDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMonsterGrammarVisitor<TResult> typedVisitor = visitor as IMonsterGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShootRoundDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShootRoundDeclarationContext shootRoundDeclaration() {
		ShootRoundDeclarationContext _localctx = new ShootRoundDeclarationContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_shootRoundDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51; Match(SHOOTROUNDS_T);
			State = 52; Match(COLON);
			State = 53; Match(NUMBER);
			State = 54; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\f;\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x3"+
		"\x2\a\x2\x14\n\x2\f\x2\xE\x2\x17\v\x2\x3\x3\x3\x3\x3\x4\x3\x4\a\x4\x1D"+
		"\n\x4\f\x4\xE\x4 \v\x4\x3\x5\x3\x5\x3\x5\x5\x5%\n\x5\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x2\x2\x2\n\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE"+
		"\x2\x10\x2\x2\x2\x36\x2\x15\x3\x2\x2\x2\x4\x18\x3\x2\x2\x2\x6\x1A\x3\x2"+
		"\x2\x2\b$\x3\x2\x2\x2\n&\x3\x2\x2\x2\f+\x3\x2\x2\x2\xE\x30\x3\x2\x2\x2"+
		"\x10\x35\x3\x2\x2\x2\x12\x14\x5\x6\x4\x2\x13\x12\x3\x2\x2\x2\x14\x17\x3"+
		"\x2\x2\x2\x15\x13\x3\x2\x2\x2\x15\x16\x3\x2\x2\x2\x16\x3\x3\x2\x2\x2\x17"+
		"\x15\x3\x2\x2\x2\x18\x19\a\v\x2\x2\x19\x5\x3\x2\x2\x2\x1A\x1E\x5\n\x6"+
		"\x2\x1B\x1D\x5\b\x5\x2\x1C\x1B\x3\x2\x2\x2\x1D \x3\x2\x2\x2\x1E\x1C\x3"+
		"\x2\x2\x2\x1E\x1F\x3\x2\x2\x2\x1F\a\x3\x2\x2\x2 \x1E\x3\x2\x2\x2!%\x5"+
		"\x10\t\x2\"%\x5\f\a\x2#%\x5\xE\b\x2$!\x3\x2\x2\x2$\"\x3\x2\x2\x2$#\x3"+
		"\x2\x2\x2%\t\x3\x2\x2\x2&\'\a\x3\x2\x2\'(\a\a\x2\x2()\x5\x4\x3\x2)*\a"+
		"\b\x2\x2*\v\x3\x2\x2\x2+,\a\x4\x2\x2,-\a\a\x2\x2-.\a\n\x2\x2./\a\b\x2"+
		"\x2/\r\x3\x2\x2\x2\x30\x31\a\x5\x2\x2\x31\x32\a\a\x2\x2\x32\x33\a\n\x2"+
		"\x2\x33\x34\a\b\x2\x2\x34\xF\x3\x2\x2\x2\x35\x36\a\x6\x2\x2\x36\x37\a"+
		"\a\x2\x2\x37\x38\a\n\x2\x2\x38\x39\a\b\x2\x2\x39\x11\x3\x2\x2\x2\x5\x15"+
		"\x1E$";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LabWork1github
